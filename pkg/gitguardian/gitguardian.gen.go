// Package gitguardian provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gitguardian

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// Defines values for APITokenScopeEnum.
const (
	APITokenScopeEnumApiTokensRead    APITokenScopeEnum = "api_tokens:read"
	APITokenScopeEnumApiTokensWrite   APITokenScopeEnum = "api_tokens:write"
	APITokenScopeEnumAuditLogsRead    APITokenScopeEnum = "audit_logs:read"
	APITokenScopeEnumHoneytokensRead  APITokenScopeEnum = "honeytokens:read"
	APITokenScopeEnumHoneytokensWrite APITokenScopeEnum = "honeytokens:write"
	APITokenScopeEnumIncidentsRead    APITokenScopeEnum = "incidents:read"
	APITokenScopeEnumIncidentsShare   APITokenScopeEnum = "incidents:share"
	APITokenScopeEnumIncidentsWrite   APITokenScopeEnum = "incidents:write"
	APITokenScopeEnumMembersRead      APITokenScopeEnum = "members:read"
	APITokenScopeEnumMembersWrite     APITokenScopeEnum = "members:write"
	APITokenScopeEnumScan             APITokenScopeEnum = "scan"
	APITokenScopeEnumTeamsRead        APITokenScopeEnum = "teams:read"
	APITokenScopeEnumTeamsWrite       APITokenScopeEnum = "teams:write"
)

// Defines values for APITokenStatusEnum.
const (
	APITokenStatusEnumActive  APITokenStatusEnum = "active"
	APITokenStatusEnumExpired APITokenStatusEnum = "expired"
	APITokenStatusEnumRevoked APITokenStatusEnum = "revoked"
)

// Defines values for APITokenTypeEnum.
const (
	PersonalAccessToken APITokenTypeEnum = "personal_access_token"
	ServiceAccount      APITokenTypeEnum = "service_account"
)

// Defines values for AuditLogActionTypeEnum.
const (
	CREATE AuditLogActionTypeEnum = "CREATE"
	DELETE AuditLogActionTypeEnum = "DELETE"
	OTHER  AuditLogActionTypeEnum = "OTHER"
	READ   AuditLogActionTypeEnum = "READ"
	UPDATE AuditLogActionTypeEnum = "UPDATE"
)

// Defines values for DependencyTypeEnum.
const (
	Direct     DependencyTypeEnum = "direct"
	Transitive DependencyTypeEnum = "transitive"
)

// Defines values for DetectorGroupTypeEnum.
const (
	Custom   DetectorGroupTypeEnum = "custom"
	Generic  DetectorGroupTypeEnum = "generic"
	Specific DetectorGroupTypeEnum = "specific"
)

// Defines values for HoneyTokenEventTag.
const (
	PubliclyExposed HoneyTokenEventTag = "publicly_exposed"
)

// Defines values for IACStatusEnum.
const (
	IACStatusEnumIGNORED   IACStatusEnum = "IGNORED"
	IACStatusEnumRESOLVED  IACStatusEnum = "RESOLVED"
	IACStatusEnumTRIGGERED IACStatusEnum = "TRIGGERED"
)

// Defines values for IncidentPermissionEnum.
const (
	CanEdit    IncidentPermissionEnum = "can_edit"
	CanView    IncidentPermissionEnum = "can_view"
	FullAccess IncidentPermissionEnum = "full_access"
)

// Defines values for MemberRoleEnum.
const (
	MemberRoleEnumManager    MemberRoleEnum = "manager"
	MemberRoleEnumMember     MemberRoleEnum = "member"
	MemberRoleEnumOwner      MemberRoleEnum = "owner"
	MemberRoleEnumRestricted MemberRoleEnum = "restricted"
)

// Defines values for NonOwnerMemberRoleEnum.
const (
	NonOwnerMemberRoleEnumManager    NonOwnerMemberRoleEnum = "manager"
	NonOwnerMemberRoleEnumMember     NonOwnerMemberRoleEnum = "member"
	NonOwnerMemberRoleEnumRestricted NonOwnerMemberRoleEnum = "restricted"
)

// Defines values for OccurrenceKindEnum.
const (
	Historical OccurrenceKindEnum = "Historical"
	Realtime   OccurrenceKindEnum = "Realtime"
)

// Defines values for PresenceEnum.
const (
	Present PresenceEnum = "present"
	Removed PresenceEnum = "removed"
)

// Defines values for ScanStatusEnum.
const (
	Canceled ScanStatusEnum = "canceled"
	Failed   ScanStatusEnum = "failed"
	Finished ScanStatusEnum = "finished"
	Pending  ScanStatusEnum = "pending"
	Running  ScanStatusEnum = "running"
	Timeout  ScanStatusEnum = "timeout"
	TooLarge ScanStatusEnum = "too_large"
)

// Defines values for SecretStatusEnum.
const (
	FalsePositive  SecretStatusEnum = "false_positive"
	LowRisk        SecretStatusEnum = "low_risk"
	TestCredential SecretStatusEnum = "test_credential"
)

// Defines values for SeverityEnum.
const (
	SeverityEnumCritical SeverityEnum = "critical"
	SeverityEnumHigh     SeverityEnum = "high"
	SeverityEnumInfo     SeverityEnum = "info"
	SeverityEnumLow      SeverityEnum = "low"
	SeverityEnumMedium   SeverityEnum = "medium"
	SeverityEnumUnknown  SeverityEnum = "unknown"
)

// Defines values for SeverityEnumIAC.
const (
	SeverityEnumIACCritical SeverityEnumIAC = "critical"
	SeverityEnumIACHigh     SeverityEnumIAC = "high"
	SeverityEnumIACLow      SeverityEnumIAC = "low"
	SeverityEnumIACMedium   SeverityEnumIAC = "medium"
)

// Defines values for SourceHealthEnum.
const (
	SourceHealthEnumAtRisk  SourceHealthEnum = "at_risk"
	SourceHealthEnumSafe    SourceHealthEnum = "safe"
	SourceHealthEnumUnknown SourceHealthEnum = "unknown"
)

// Defines values for StatusEnum.
const (
	StatusEnumASSIGNED  StatusEnum = "ASSIGNED"
	StatusEnumIGNORED   StatusEnum = "IGNORED"
	StatusEnumRESOLVED  StatusEnum = "RESOLVED"
	StatusEnumTRIGGERED StatusEnum = "TRIGGERED"
)

// Defines values for TagEnum.
const (
	DEFAULTBRANCH      TagEnum = "DEFAULT_BRANCH"
	FROMHISTORICALSCAN TagEnum = "FROM_HISTORICAL_SCAN"
	IGNOREDINCHECKRUN  TagEnum = "IGNORED_IN_CHECK_RUN"
	PUBLIC             TagEnum = "PUBLIC"
	PUBLICLYEXPOSED    TagEnum = "PUBLICLY_EXPOSED"
	PUBLICLYLEAKED     TagEnum = "PUBLICLY_LEAKED"
	REGRESSION         TagEnum = "REGRESSION"
	SENSITIVEFILE      TagEnum = "SENSITIVE_FILE"
	TESTFILE           TagEnum = "TEST_FILE"
)

// Defines values for TeamPermissionEnum.
const (
	CanManage    TeamPermissionEnum = "can_manage"
	CannotManage TeamPermissionEnum = "cannot_manage"
)

// Defines values for ValidityEnum.
const (
	ValidityEnumFailedToCheck ValidityEnum = "failed_to_check"
	ValidityEnumInvalid       ValidityEnum = "invalid"
	ValidityEnumNoChecker     ValidityEnum = "no_checker"
	ValidityEnumUnknown       ValidityEnum = "unknown"
	ValidityEnumValid         ValidityEnum = "valid"
)

// Defines values for HoneyTokenEventStatus.
const (
	HoneyTokenEventStatusClosed HoneyTokenEventStatus = "closed"
	HoneyTokenEventStatusOpen   HoneyTokenEventStatus = "open"
)

// Defines values for HoneyTokenSourceType.
const (
	HoneyTokenSourceTypeAzureDevops HoneyTokenSourceType = "azure_devops"
	HoneyTokenSourceTypeBitbucket   HoneyTokenSourceType = "bitbucket"
	HoneyTokenSourceTypeGithub      HoneyTokenSourceType = "github"
	HoneyTokenSourceTypeGitlab      HoneyTokenSourceType = "gitlab"
)

// Defines values for HoneytokenStatus.
const (
	HoneytokenStatusActive    HoneytokenStatus = "active"
	HoneytokenStatusRevoked   HoneytokenStatus = "revoked"
	HoneytokenStatusTriggered HoneytokenStatus = "triggered"
)

// Defines values for HoneytokenType.
const (
	HoneytokenTypeAWS HoneytokenType = "AWS"
)

// Defines values for PolicyBreakValidity.
const (
	FailedToCheck PolicyBreakValidity = "failed_to_check"
	Invalid       PolicyBreakValidity = "invalid"
	NoChecker     PolicyBreakValidity = "no_checker"
	Unknown       PolicyBreakValidity = "unknown"
	Valid         PolicyBreakValidity = "valid"
)

// Defines values for ListApiTokensParamsOrdering.
const (
	ListApiTokensParamsOrderingCreatedAt       ListApiTokensParamsOrdering = "created_at"
	ListApiTokensParamsOrderingExpireAt        ListApiTokensParamsOrdering = "expire_at"
	ListApiTokensParamsOrderingLastUsedAt      ListApiTokensParamsOrdering = "last_used_at"
	ListApiTokensParamsOrderingMinusCreatedAt  ListApiTokensParamsOrdering = "-created_at"
	ListApiTokensParamsOrderingMinusExpireAt   ListApiTokensParamsOrdering = "-expire_at"
	ListApiTokensParamsOrderingMinusLastUsedAt ListApiTokensParamsOrdering = "-last_used_at"
	ListApiTokensParamsOrderingMinusRevokedAt  ListApiTokensParamsOrdering = "-revoked_at"
	ListApiTokensParamsOrderingRevokedAt       ListApiTokensParamsOrdering = "revoked_at"
)

// Defines values for ListHoneytokenParamsStatus.
const (
	Active    ListHoneytokenParamsStatus = "active"
	Revoked   ListHoneytokenParamsStatus = "revoked"
	Triggered ListHoneytokenParamsStatus = "triggered"
)

// Defines values for ListHoneytokenParamsType.
const (
	ListHoneytokenParamsTypeAWS ListHoneytokenParamsType = "AWS"
)

// Defines values for ListHoneytokenParamsOrdering.
const (
	ListHoneytokenParamsOrderingCreatedAt        ListHoneytokenParamsOrdering = "created_at"
	ListHoneytokenParamsOrderingMinusCreatedAt   ListHoneytokenParamsOrdering = "-created_at"
	ListHoneytokenParamsOrderingMinusName        ListHoneytokenParamsOrdering = "-name"
	ListHoneytokenParamsOrderingMinusRevokedAt   ListHoneytokenParamsOrdering = "-revoked_at"
	ListHoneytokenParamsOrderingMinusTriggeredAt ListHoneytokenParamsOrdering = "-triggered_at"
	ListHoneytokenParamsOrderingName             ListHoneytokenParamsOrdering = "name"
	ListHoneytokenParamsOrderingRevokedAt        ListHoneytokenParamsOrdering = "revoked_at"
	ListHoneytokenParamsOrderingTriggeredAt      ListHoneytokenParamsOrdering = "triggered_at"
)

// Defines values for CreateHoneytokenJSONBodyType.
const (
	AWS CreateHoneytokenJSONBodyType = "AWS"
)

// Defines values for ListHoneytokenNotesParamsOrdering.
const (
	ListHoneytokenNotesParamsOrderingCreatedAt      ListHoneytokenNotesParamsOrdering = "created_at"
	ListHoneytokenNotesParamsOrderingMinusCreatedAt ListHoneytokenNotesParamsOrdering = "-created_at"
	ListHoneytokenNotesParamsOrderingMinusUpdatedAt ListHoneytokenNotesParamsOrdering = "-updated_at"
	ListHoneytokenNotesParamsOrderingUpdatedAt      ListHoneytokenNotesParamsOrdering = "updated_at"
)

// Defines values for ListHoneytokenSourcesParamsOrdering.
const (
	MinusSourceId ListHoneytokenSourcesParamsOrdering = "-source_id"
	SourceId      ListHoneytokenSourcesParamsOrdering = "source_id"
)

// Defines values for ListHoneytokensEventsParamsOrdering.
const (
	MinusTriggeredAt ListHoneytokensEventsParamsOrdering = "-triggered_at"
	TriggeredAt      ListHoneytokensEventsParamsOrdering = "triggered_at"
)

// Defines values for ListHoneytokensEventsParamsStatus.
const (
	ListHoneytokensEventsParamsStatusAllowed  ListHoneytokensEventsParamsStatus = "allowed"
	ListHoneytokensEventsParamsStatusArchived ListHoneytokensEventsParamsStatus = "archived"
	ListHoneytokensEventsParamsStatusOpen     ListHoneytokensEventsParamsStatus = "open"
)

// Defines values for ListIncidentsParamsOrdering.
const (
	ListIncidentsParamsOrderingDate            ListIncidentsParamsOrdering = "date"
	ListIncidentsParamsOrderingIgnoredAt       ListIncidentsParamsOrdering = "ignored_at"
	ListIncidentsParamsOrderingMinusDate       ListIncidentsParamsOrdering = "-date"
	ListIncidentsParamsOrderingMinusIgnoredAt  ListIncidentsParamsOrdering = "-ignored_at"
	ListIncidentsParamsOrderingMinusResolvedAt ListIncidentsParamsOrdering = "-resolved_at"
	ListIncidentsParamsOrderingResolvedAt      ListIncidentsParamsOrdering = "resolved_at"
)

// Defines values for ListIncidentNotesParamsOrdering.
const (
	ListIncidentNotesParamsOrderingCreatedAt      ListIncidentNotesParamsOrdering = "created_at"
	ListIncidentNotesParamsOrderingMinusCreatedAt ListIncidentNotesParamsOrdering = "-created_at"
	ListIncidentNotesParamsOrderingMinusUpdatedAt ListIncidentNotesParamsOrdering = "-updated_at"
	ListIncidentNotesParamsOrderingUpdatedAt      ListIncidentNotesParamsOrdering = "updated_at"
)

// Defines values for ListInvitationsParamsOrdering.
const (
	ListInvitationsParamsOrderingDate      ListInvitationsParamsOrdering = "date"
	ListInvitationsParamsOrderingMinusDate ListInvitationsParamsOrdering = "-date"
)

// Defines values for ListMembersParamsOrdering.
const (
	CreatedAt      ListMembersParamsOrdering = "created_at"
	LastLogin      ListMembersParamsOrdering = "last_login"
	MinusCreatedAt ListMembersParamsOrdering = "-created_at"
	MinusLastLogin ListMembersParamsOrdering = "-last_login"
)

// Defines values for ListOccsParamsSourceType.
const (
	ListOccsParamsSourceTypeAzureDevops ListOccsParamsSourceType = "azure_devops"
	ListOccsParamsSourceTypeBitbucket   ListOccsParamsSourceType = "bitbucket"
	ListOccsParamsSourceTypeGithub      ListOccsParamsSourceType = "github"
	ListOccsParamsSourceTypeGitlab      ListOccsParamsSourceType = "gitlab"
	ListOccsParamsSourceTypeSlack       ListOccsParamsSourceType = "slack"
)

// Defines values for ListOccsParamsOrdering.
const (
	ListOccsParamsOrderingDate      ListOccsParamsOrdering = "date"
	ListOccsParamsOrderingMinusDate ListOccsParamsOrdering = "-date"
)

// Defines values for ListSecretDetectorsParamsOrdering.
const (
	MinusName ListSecretDetectorsParamsOrdering = "-name"
	Name      ListSecretDetectorsParamsOrdering = "name"
)

// Defines values for ListSourcesParamsType.
const (
	ListSourcesParamsTypeAzureDevops ListSourcesParamsType = "azure_devops"
	ListSourcesParamsTypeBitbucket   ListSourcesParamsType = "bitbucket"
	ListSourcesParamsTypeGithub      ListSourcesParamsType = "github"
	ListSourcesParamsTypeGitlab      ListSourcesParamsType = "gitlab"
	ListSourcesParamsTypeSlack       ListSourcesParamsType = "slack"
)

// Defines values for ListSourcesParamsOrdering.
const (
	ListSourcesParamsOrderingLastScanDate      ListSourcesParamsOrdering = "last_scan_date"
	ListSourcesParamsOrderingMinusLastScanDate ListSourcesParamsOrdering = "-last_scan_date"
)

// Defines values for ListSourcesParamsVisibility.
const (
	ListSourcesParamsVisibilityInternal ListSourcesParamsVisibility = "internal"
	ListSourcesParamsVisibilityPrivate  ListSourcesParamsVisibility = "private"
	ListSourcesParamsVisibilityPublic   ListSourcesParamsVisibility = "public"
)

// Defines values for ListTeamIncidentsParamsOrdering.
const (
	ListTeamIncidentsParamsOrderingDate            ListTeamIncidentsParamsOrdering = "date"
	ListTeamIncidentsParamsOrderingIgnoredAt       ListTeamIncidentsParamsOrdering = "ignored_at"
	ListTeamIncidentsParamsOrderingMinusDate       ListTeamIncidentsParamsOrdering = "-date"
	ListTeamIncidentsParamsOrderingMinusIgnoredAt  ListTeamIncidentsParamsOrdering = "-ignored_at"
	ListTeamIncidentsParamsOrderingMinusResolvedAt ListTeamIncidentsParamsOrdering = "-resolved_at"
	ListTeamIncidentsParamsOrderingResolvedAt      ListTeamIncidentsParamsOrdering = "resolved_at"
)

// Defines values for ListTeamSourcesParamsType.
const (
	ListTeamSourcesParamsTypeAzureDevops ListTeamSourcesParamsType = "azure_devops"
	ListTeamSourcesParamsTypeBitbucket   ListTeamSourcesParamsType = "bitbucket"
	ListTeamSourcesParamsTypeGithub      ListTeamSourcesParamsType = "github"
	ListTeamSourcesParamsTypeGitlab      ListTeamSourcesParamsType = "gitlab"
)

// Defines values for ListTeamSourcesParamsOrdering.
const (
	ListTeamSourcesParamsOrderingLastScanDate      ListTeamSourcesParamsOrdering = "last_scan_date"
	ListTeamSourcesParamsOrderingMinusLastScanDate ListTeamSourcesParamsOrdering = "-last_scan_date"
)

// Defines values for ListTeamSourcesParamsVisibility.
const (
	ListTeamSourcesParamsVisibilityInternal ListTeamSourcesParamsVisibility = "internal"
	ListTeamSourcesParamsVisibilityPrivate  ListTeamSourcesParamsVisibility = "private"
	ListTeamSourcesParamsVisibilityPublic   ListTeamSourcesParamsVisibility = "public"
)

// APITokenScopeEnum defines model for APITokenScopeEnum.
type APITokenScopeEnum string

// APITokenStatusEnum defines model for APITokenStatusEnum.
type APITokenStatusEnum string

// APITokenTypeEnum defines model for APITokenTypeEnum.
type APITokenTypeEnum string

// AuditLogActionTypeEnum defines model for AuditLogActionTypeEnum.
type AuditLogActionTypeEnum string

// DependencyTypeEnum defines model for DependencyTypeEnum.
type DependencyTypeEnum string

// DetectorGroupTypeEnum defines model for DetectorGroupTypeEnum.
type DetectorGroupTypeEnum string

// ExposedVulnerabilityOutputSchema defines model for ExposedVulnerabilityOutputSchema.
type ExposedVulnerabilityOutputSchema struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	CveIds       []string   `json:"cve_ids"`
	FixedVersion *string    `json:"fixed_version,omitempty"`
	Identifier   string     `json:"identifier"`
	Severity     string     `json:"severity"`
	Summary      string     `json:"summary"`
}

// HoneyTokenEventTag defines model for HoneyTokenEventTag.
type HoneyTokenEventTag string

// IACScanTarParameters defines model for IACScanTarParameters.
type IACScanTarParameters struct {
	IgnoredPolicies *[]string        `json:"ignored_policies,omitempty"`
	MinimumSeverity *SeverityEnumIAC `json:"minimum_severity,omitempty"`
}

// IACStatusEnum defines model for IACStatusEnum.
type IACStatusEnum string

// IncidentPermissionEnum defines model for IncidentPermissionEnum.
type IncidentPermissionEnum string

// LocationOutputSchema defines model for LocationOutputSchema.
type LocationOutputSchema struct {
	Location     string                             `json:"location"`
	PackageVulns []PackageVulnerabilityOutputSchema `json:"package_vulns"`
}

// MemberRoleEnum defines model for MemberRoleEnum.
type MemberRoleEnum string

// NonOwnerMemberRoleEnum defines model for NonOwnerMemberRoleEnum.
type NonOwnerMemberRoleEnum string

// OccurrenceKindEnum defines model for OccurrenceKindEnum.
type OccurrenceKindEnum string

// PackageVulnerabilityOutputSchema defines model for PackageVulnerabilityOutputSchema.
type PackageVulnerabilityOutputSchema struct {
	DependencyType  *DependencyTypeEnum                `json:"dependency_type,omitempty"`
	Ecosystem       string                             `json:"ecosystem"`
	PackageFullName string                             `json:"package_full_name"`
	Version         string                             `json:"version"`
	Vulns           []ExposedVulnerabilityOutputSchema `json:"vulns"`
}

// PresenceEnum defines model for PresenceEnum.
type PresenceEnum string

// SCAIgnoredVulnerability defines model for SCAIgnoredVulnerability.
type SCAIgnoredVulnerability struct {
	Identifier string `json:"identifier"`
	Path       string `json:"path"`
}

// SCAScanTarParameters defines model for SCAScanTarParameters.
type SCAScanTarParameters struct {
	IgnoredVulnerabilities *[]SCAIgnoredVulnerability `json:"ignored_vulnerabilities,omitempty"`
	MinimumSeverity        *SeverityEnum              `json:"minimum_severity,omitempty"`
}

// ScanStatusEnum defines model for ScanStatusEnum.
type ScanStatusEnum string

// SecretStatusEnum defines model for SecretStatusEnum.
type SecretStatusEnum string

// SeverityEnum defines model for SeverityEnum.
type SeverityEnum string

// SeverityEnumIAC defines model for SeverityEnumIAC.
type SeverityEnumIAC string

// SourceHealthEnum defines model for SourceHealthEnum.
type SourceHealthEnum string

// StatusEnum defines model for StatusEnum.
type StatusEnum string

// TagEnum defines model for TagEnum.
type TagEnum string

// TagFilterEnum defines model for TagFilterEnum.
type TagFilterEnum = interface{}

// TeamPermissionEnum defines model for TeamPermissionEnum.
type TeamPermissionEnum string

// ValidityEnum defines model for ValidityEnum.
type ValidityEnum string

// BaseIncident defines model for _base_incident.
type BaseIncident struct {
	AssigneeEmail      *string             `json:"assignee_email"`
	AssigneeId         *int                `json:"assignee_id"`
	Date               *time.Time          `json:"date,omitempty"`
	Detector           *Detector           `json:"detector,omitempty"`
	GitguardianUrl     *string             `json:"gitguardian_url,omitempty"`
	HmslHash           *string             `json:"hmsl_hash,omitempty"`
	Id                 *int                `json:"id,omitempty"`
	IgnoreReason       *SecretStatusEnum   `json:"ignore_reason"`
	IgnoredAt          *time.Time          `json:"ignored_at"`
	IgnorerApiTokenId  *openapi_types.UUID `json:"ignorer_api_token_id"`
	IgnorerId          *int                `json:"ignorer_id"`
	OccurrencesCount   *int                `json:"occurrences_count,omitempty"`
	Regression         *bool               `json:"regression,omitempty"`
	ResolvedAt         *time.Time          `json:"resolved_at"`
	ResolverApiTokenId *openapi_types.UUID `json:"resolver_api_token_id"`
	ResolverId         *int                `json:"resolver_id"`
	SecretHash         *string             `json:"secret_hash,omitempty"`
	SecretRevoked      *bool               `json:"secret_revoked,omitempty"`
	Severity           *SeverityEnum       `json:"severity,omitempty"`
	ShareUrl           *string             `json:"share_url"`
	Status             *StatusEnum         `json:"status,omitempty"`
	Tags               *[]TagEnum          `json:"tags,omitempty"`
	Validity           *ValidityEnum       `json:"validity,omitempty"`
}

// ApiTokenDetails Details of an API Token
type ApiTokenDetails struct {
	// CreatedAt Creation date of the API token
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatorId Creator id
	CreatorId *int `json:"creator_id"`

	// ExpireAt Expiration date of the API token
	ExpireAt *time.Time `json:"expire_at"`

	// Id Id of API token
	Id *string `json:"id,omitempty"`

	// LastUsedAt Last usage of the API token
	LastUsedAt *time.Time `json:"last_used_at"`

	// MemberId Member id
	MemberId *int `json:"member_id"`

	// Name Name of API token
	Name *string `json:"name,omitempty"`

	// RevokedAt Revocation date of the API token
	RevokedAt *time.Time `json:"revoked_at"`

	// Scopes List of scopes
	Scopes *[]APITokenScopeEnum `json:"scopes,omitempty"`
	Status *APITokenStatusEnum  `json:"status,omitempty"`
	Type   *APITokenTypeEnum    `json:"type,omitempty"`
}

// AuditLog defines model for auditLog.
type AuditLog struct {
	ActionType *AuditLogActionTypeEnum `json:"action_type,omitempty"`

	// ApiTokenId ID of the API token associated to the event if it was done through the API
	ApiTokenId *int `json:"api_token_id"`

	// Data Additional data associated to the event.
	Data        *map[string]interface{} `json:"data"`
	Date        *time.Time              `json:"date,omitempty"`
	EventName   *string                 `json:"event_name,omitempty"`
	Id          *int                    `json:"id,omitempty"`
	IpAddress   *string                 `json:"ip_address"`
	MemberEmail *string                 `json:"member_email"`

	// MemberId ID of the member that did the event. Can be null if the member has been deleted since then:
	// in that case use `member_name` and `member_email` to identify the author of the action.
	MemberId *int `json:"member_id"`

	// MemberName Name of the member at the time he/she did the event. It may differ from the current name
	// of the member if it has been updated since.
	MemberName *string `json:"member_name"`
	TargetIds  *[]int  `json:"target_ids,omitempty"`
}

// Detector defines model for detector.
type Detector struct {
	DetectorGroupDisplayName *string `json:"detector_group_display_name,omitempty"`
	DetectorGroupName        *string `json:"detector_group_name,omitempty"`
	DisplayName              *string `json:"display_name,omitempty"`
	Family                   *string `json:"family,omitempty"`
	Name                     *string `json:"name,omitempty"`
	Nature                   *string `json:"nature,omitempty"`
}

// DetectorGroup defines model for detectorGroup.
type DetectorGroup struct {
	Category *string `json:"category,omitempty"`

	// Checkable Indicates whether this detector has a validity checker
	Checkable   *bool   `json:"checkable,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`

	// Frequency Number of secrets found per million of commits from GitGuardian experience of open-source monitoring
	Frequency *float32 `json:"frequency,omitempty"`

	// IgnoredIncidentsCount Number of ignored secret incidents on the workspace associated to this detector
	IgnoredIncidentsCount *int `json:"ignored_incidents_count,omitempty"`

	// IsActive Whether the detector is currently enabled on the workspace
	IsActive *bool   `json:"is_active,omitempty"`
	Name     *string `json:"name,omitempty"`

	// OpenIncidentsCount Number of open secret incidents on the workspace associated to this detector
	OpenIncidentsCount *int `json:"open_incidents_count,omitempty"`

	// RemovedAt Date at which this detector was disabled by GitGuardian
	RemovedAt *time.Time `json:"removed_at"`

	// ResolvedIncidentsCount Number of resolved secret incidents on the workspace associated to this detector
	ResolvedIncidentsCount *int `json:"resolved_incidents_count,omitempty"`

	// ScansCodeOnly Whether the detector can scan other kinds of resources than VCS ones
	ScansCodeOnly *bool                  `json:"scans_code_only,omitempty"`
	Type          *DetectorGroupTypeEnum `json:"type,omitempty"`

	// UseWithValidityCheckDisabled If false, this detector will not be used if secret validity check is disabled on the workspace
	UseWithValidityCheckDisabled *bool `json:"use_with_validity_check_disabled,omitempty"`
}

// Document defines model for document.
type Document struct {
	Document string  `json:"document"`
	Filename *string `json:"filename,omitempty"`
}

// EntitiesWithIncidents Files and their incidents
type EntitiesWithIncidents = []struct {
	// Filename File name
	Filename string `json:"filename"`

	// Incidents Incidents detected in the file
	Incidents []struct {
		// Component Component in which the vulnerability has been found
		Component *string `json:"component,omitempty"`

		// Description Vulnerability description
		Description *string `json:"description,omitempty"`

		// DocumentationUrl Vulnerability documentation
		DocumentationUrl *string `json:"documentation_url,omitempty"`

		// GitguardianUrl The URL of the incident on your GitGuardian dashboard, if it is a known vulnerability.
		GitguardianUrl *string `json:"gitguardian_url,omitempty"`

		// IgnoreComment The comment provided for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if no comment has been provided or if the incident is not ignored).
		IgnoreComment *string `json:"ignore_comment"`

		// IgnoreReason The reason selected for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if the incident is not ignored).
		IgnoreReason *string `json:"ignore_reason"`

		// IgnoredUntil The date when the incident will no longer be ignored on your GitGuardian Dashboard, if it is a known vulnerability (null if the incident is ignored permanently or not ignored).
		IgnoredUntil *time.Time `json:"ignored_until"`

		// LineEnd Ending line of the vulnerability block
		LineEnd *int `json:"line_end,omitempty"`

		// LineStart Starting line of the vulnerability block
		LineStart *int `json:"line_start,omitempty"`

		// Policy Policy involved with the vulnerability
		Policy *string `json:"policy,omitempty"`

		// PolicyId Policy id
		PolicyId *string `json:"policy_id,omitempty"`

		// Severity Severity of the vulnerability
		Severity *string        `json:"severity,omitempty"`
		Status   *IACStatusEnum `json:"status,omitempty"`
	} `json:"incidents"`
}

// Error Error obtained in an API response
type Error struct {
	// Detail Details on response.
	Detail string `json:"detail"`
}

// HoneyTokenEvent defines model for honeyTokenEvent.
type HoneyTokenEvent struct {
	// Action The action made through the honeytoken.
	Action *string `json:"action,omitempty"`

	// Data An object with additional data related to the event
	Data           *map[string]interface{} `json:"data,omitempty"`
	GitguardianUrl *string                 `json:"gitguardian_url,omitempty"`

	// HoneytokenId Id of the related Honeytoken.
	HoneytokenId *openapi_types.UUID `json:"honeytoken_id,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`

	// IpAddress IP address from which the event originates.
	IpAddress *string `json:"ip_address,omitempty"`

	// Status Status of the honeytoken event.
	Status *HoneyTokenEventStatus `json:"status,omitempty"`
	Tags   *[]HoneyTokenEventTag  `json:"tags,omitempty"`

	// TriggeredAt The time on which the honeytoken was triggered. Null if the
	// honeytoken was never triggered.
	TriggeredAt *time.Time `json:"triggered_at,omitempty"`
}

// HoneyTokenEventStatus Status of the honeytoken event.
type HoneyTokenEventStatus string

// HoneyTokenLabel defines model for honeyTokenLabel.
type HoneyTokenLabel struct {
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Key   *string             `json:"key,omitempty"`
	Value *string             `json:"value,omitempty"`
}

// HoneyTokenNote defines model for honeyTokenNote.
type HoneyTokenNote struct {
	// ApiTokenId ID of the API key which created this note. Can be null if the note
	// was not created via the API.
	ApiTokenId *openapi_types.UUID `json:"api_token_id"`
	Comment    *string             `json:"comment,omitempty"`

	// CreatedAt Creation date of the note
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// HoneytokenId Id of the related Honeytoken
	HoneytokenId *openapi_types.UUID `json:"honeytoken_id,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`

	// MemberId Id of the member who created this note. Can be null if the note was
	// not created by a member or if the member was deleted.
	MemberId *int `json:"member_id"`

	// UpdatedAt Last time the content of the note was updated. Null if the
	// comment was never modified.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// HoneyTokenSource defines model for honeyTokenSource.
type HoneyTokenSource struct {
	// Files Files where the honeytoken appears.
	Files *[]string `json:"files,omitempty"`
	Name  *string   `json:"name,omitempty"`

	// OpenIssuesCount Number of open secret issues with at least one occurrence on this source.
	OpenIssuesCount *float32 `json:"open_issues_count,omitempty"`
	SourceId        *float32 `json:"source_id,omitempty"`

	// TotalFilesCount Number of files where the honeytoken appears.
	TotalFilesCount *float32              `json:"total_files_count,omitempty"`
	Type            *HoneyTokenSourceType `json:"type,omitempty"`
	Url             *string               `json:"url,omitempty"`
}

// HoneyTokenSourceType defines model for HoneyTokenSource.Type.
type HoneyTokenSourceType string

// Honeytoken defines model for honeytoken.
type Honeytoken struct {
	// CreatedAt Creation date of the honeytoken
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatorApiTokenId ID of the API key which created this honeytoken. Can be null if the honeytoken
	// was not created via the API.
	CreatorApiTokenId *openapi_types.UUID `json:"creator_api_token_id"`

	// CreatorId Id of the member who created this honeytoken.
	CreatorId      *int                `json:"creator_id"`
	Description    *string             `json:"description,omitempty"`
	GitguardianUrl *string             `json:"gitguardian_url,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`

	// Labels Labels set on the honeytoken.
	Labels          *[]HoneyTokenLabel `json:"labels,omitempty"`
	Name            *string            `json:"name,omitempty"`
	OpenEventsCount *int               `json:"open_events_count,omitempty"`

	// RevokedAt Date when the honeytoken was revoked
	RevokedAt *time.Time `json:"revoked_at,omitempty"`

	// RevokerApiTokenId ID of the API key which created honeytoken note. Can be null if the honeytoken
	// was not created via the API.
	RevokerApiTokenId *openapi_types.UUID `json:"revoker_api_token_id"`

	// RevokerId Id of the member who revoked this honeytoken.
	RevokerId *int `json:"revoker_id"`

	// Status Status of the honeytoken.
	Status *HoneytokenStatus     `json:"status,omitempty"`
	Tags   *[]HoneyTokenEventTag `json:"tags,omitempty"`

	// Token Secret to be placed as a honeytoken.
	Token *map[string]interface{} `json:"token,omitempty"`

	// TriggeredAt Date when the honeytoken was switched from active to triggered the last time
	TriggeredAt *time.Time `json:"triggered_at,omitempty"`

	// Type Type of the honeytoken.
	Type *HoneytokenType `json:"type,omitempty"`
}

// HoneytokenStatus Status of the honeytoken.
type HoneytokenStatus string

// HoneytokenType Type of the honeytoken.
type HoneytokenType string

// IacDiffScanResult defines model for iacDiffScanResult.
type IacDiffScanResult struct {
	EntitiesWithIncidents *struct {
		// Deleted Files and their incidents
		Deleted *EntitiesWithIncidents `json:"deleted,omitempty"`

		// New Files and their incidents
		New *EntitiesWithIncidents `json:"new,omitempty"`

		// Unchanged Files and their incidents
		Unchanged *EntitiesWithIncidents `json:"unchanged,omitempty"`
	} `json:"entities_with_incidents,omitempty"`
	IacEngineVersion *string `json:"iac_engine_version,omitempty"`
	Id               *string `json:"id,omitempty"`
	Type             *string `json:"type,omitempty"`
}

// IacScanResult defines model for iacScanResult.
type IacScanResult struct {
	// EntitiesWithIncidents Files and their incidents
	EntitiesWithIncidents *EntitiesWithIncidents `json:"entities_with_incidents,omitempty"`
	IacEngineVersion      *string                `json:"iac_engine_version,omitempty"`
	Id                    *string                `json:"id,omitempty"`
	Type                  *string                `json:"type,omitempty"`
}

// Incident defines model for incident.
type Incident struct {
	AssigneeEmail      *string             `json:"assignee_email"`
	AssigneeId         *int                `json:"assignee_id"`
	Date               *time.Time          `json:"date,omitempty"`
	Detector           *Detector           `json:"detector,omitempty"`
	GitguardianUrl     *string             `json:"gitguardian_url,omitempty"`
	HmslHash           *string             `json:"hmsl_hash,omitempty"`
	Id                 *int                `json:"id,omitempty"`
	IgnoreReason       *SecretStatusEnum   `json:"ignore_reason"`
	IgnoredAt          *time.Time          `json:"ignored_at"`
	IgnorerApiTokenId  *openapi_types.UUID `json:"ignorer_api_token_id"`
	IgnorerId          *int                `json:"ignorer_id"`
	Occurrences        *[]VcsOccurrence    `json:"occurrences,omitempty"`
	OccurrencesCount   *int                `json:"occurrences_count,omitempty"`
	Regression         *bool               `json:"regression,omitempty"`
	ResolvedAt         *time.Time          `json:"resolved_at"`
	ResolverApiTokenId *openapi_types.UUID `json:"resolver_api_token_id"`
	ResolverId         *int                `json:"resolver_id"`
	SecretHash         *string             `json:"secret_hash,omitempty"`
	SecretRevoked      *bool               `json:"secret_revoked,omitempty"`
	Severity           *SeverityEnum       `json:"severity,omitempty"`
	ShareUrl           *string             `json:"share_url"`
	Status             *StatusEnum         `json:"status,omitempty"`
	Tags               *[]TagEnum          `json:"tags,omitempty"`
	Validity           *ValidityEnum       `json:"validity,omitempty"`
}

// IncidentInvitation defines model for incidentInvitation.
type IncidentInvitation struct {
	// IncidentId The id of the incident object
	IncidentId         *int                    `json:"incident_id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`

	// InvitationId The id of the invitation object
	InvitationId *int `json:"invitation_id,omitempty"`
}

// IncidentMember defines model for incidentMember.
type IncidentMember struct {
	// Deprecated:
	Email *openapi_types.Email `json:"email,omitempty"`
	// Deprecated:
	Id *int `json:"id,omitempty"`

	// IncidentId The id of the Incident object
	IncidentId         *int                    `json:"incident_id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`

	// MemberId The id of the Member object (replaces the id field)
	MemberId *int `json:"member_id,omitempty"`
	// Deprecated:
	Name *string `json:"name,omitempty"`
	// Deprecated:
	Role *MemberRoleEnum `json:"role,omitempty"`
}

// IncidentNote defines model for incidentNote.
type IncidentNote struct {
	// ApiToken Name of the API key which created this note. Can be null if the note
	// was not created via the API. Use `api_token_id` instead.
	// Deprecated:
	ApiToken *string `json:"api_token"`

	// ApiTokenId ID of the API key which created this note. Can be null if the note
	// was not created via the API.
	ApiTokenId *openapi_types.UUID `json:"api_token_id"`
	Comment    *string             `json:"comment"`

	// CreatedAt Creation date of the note
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int       `json:"id,omitempty"`

	// IncidentId Id of the related Incident
	IncidentId *int `json:"incident_id,omitempty"`

	// IssueId Id of the related Incident. Use `incident_id` instead.
	// Deprecated:
	IssueId *int `json:"issue_id,omitempty"`

	// MemberId Id of the member who created this note. Can be null if the note was
	// not created by a member or if the member was deleted.
	MemberId *int `json:"member_id"`

	// UpdatedAt Last time the content of the note was updated. Null if the
	// comment was never modified.
	UpdatedAt *time.Time `json:"updated_at"`

	// UserId Id of the user who created this note. Can be null if the note was
	// not created by a user or if the user was deleted. Use `member_id` instead.
	// Deprecated:
	UserId *int `json:"user_id"`
}

// IncidentTeam defines model for incidentTeam.
type IncidentTeam struct {
	// IncidentId The id of the Incident object
	IncidentId         *int                    `json:"incident_id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`

	// TeamId The id of the Team object
	TeamId *int `json:"team_id,omitempty"`
}

// IncidentToken defines model for incidentToken.
type IncidentToken struct {
	// AutoHealing Allow the developer to resolve or ignore through the share link
	AutoHealing *bool      `json:"auto_healing,omitempty"`
	ExpireAt    *time.Time `json:"expire_at"`

	// FeedbackCollection Allow the developer to submit their feedback through the share link
	FeedbackCollection *bool      `json:"feedback_collection,omitempty"`
	IncidentId         *int       `json:"incident_id,omitempty"`
	RevokedAt          *time.Time `json:"revoked_at"`
	ShareUrl           *string    `json:"share_url,omitempty"`
	Token              *string    `json:"token,omitempty"`
}

// IncidentWithoutOccurrences defines model for incidentWithoutOccurrences.
type IncidentWithoutOccurrences struct {
	AssigneeEmail      *string             `json:"assignee_email"`
	AssigneeId         *int                `json:"assignee_id"`
	Date               *time.Time          `json:"date,omitempty"`
	Detector           *Detector           `json:"detector,omitempty"`
	GitguardianUrl     *string             `json:"gitguardian_url,omitempty"`
	HmslHash           *string             `json:"hmsl_hash,omitempty"`
	Id                 *int                `json:"id,omitempty"`
	IgnoreReason       *SecretStatusEnum   `json:"ignore_reason"`
	IgnoredAt          *time.Time          `json:"ignored_at"`
	IgnorerApiTokenId  *openapi_types.UUID `json:"ignorer_api_token_id"`
	IgnorerId          *int                `json:"ignorer_id"`
	Occurrences        *[]VcsOccurrence    `json:"occurrences"`
	OccurrencesCount   *int                `json:"occurrences_count,omitempty"`
	Regression         *bool               `json:"regression,omitempty"`
	ResolvedAt         *time.Time          `json:"resolved_at"`
	ResolverApiTokenId *openapi_types.UUID `json:"resolver_api_token_id"`
	ResolverId         *int                `json:"resolver_id"`
	SecretHash         *string             `json:"secret_hash,omitempty"`
	SecretRevoked      *bool               `json:"secret_revoked,omitempty"`
	Severity           *SeverityEnum       `json:"severity,omitempty"`
	ShareUrl           *string             `json:"share_url"`
	Status             *StatusEnum         `json:"status,omitempty"`
	Tags               *[]TagEnum          `json:"tags,omitempty"`
	Validity           *ValidityEnum       `json:"validity,omitempty"`
}

// Invitation defines model for invitation.
type Invitation struct {
	// Date Creation date of the invitation
	Date  *time.Time              `json:"date,omitempty"`
	Email *openapi_types.Email    `json:"email,omitempty"`
	Id    *int                    `json:"id,omitempty"`
	Role  *NonOwnerMemberRoleEnum `json:"role,omitempty"`
}

// Match defines model for match.
type Match struct {
	IndiceEnd     *int    `json:"indice_end,omitempty"`
	IndiceStart   *int    `json:"indice_start,omitempty"`
	Name          *string `json:"name,omitempty"`
	PostLineEnd   *int    `json:"post_line_end,omitempty"`
	PostLineStart *int    `json:"post_line_start,omitempty"`
	PreLineEnd    *int    `json:"pre_line_end"`
	PreLineStart  *int    `json:"pre_line_start"`
}

// Member defines model for member.
type Member struct {
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        *int                 `json:"id,omitempty"`
	LastLogin *time.Time           `json:"last_login"`
	Name      *string              `json:"name,omitempty"`
	Role      *MemberRoleEnum      `json:"role,omitempty"`
}

// Occurrence defines model for occurrence.
type Occurrence struct {
	AuthorInfo *string             `json:"author_info,omitempty"`
	AuthorName *string             `json:"author_name,omitempty"`
	Date       *time.Time          `json:"date,omitempty"`
	Id         *int                `json:"id,omitempty"`
	IncidentId *int                `json:"incident_id,omitempty"`
	Kind       *OccurrenceKindEnum `json:"kind,omitempty"`
	Matches    *[]Match            `json:"matches,omitempty"`
	Source     *Source             `json:"source,omitempty"`
	Tags       *[]TagEnum          `json:"tags,omitempty"`
	Url        *string             `json:"url,omitempty"`
}

// PolicyBreak Issue found in your Document
type PolicyBreak struct {
	// IncidentUrl The incident's URL on your GitGuardian dashboard, if it is a known secret, or
	// an empty string otherwise.
	IncidentUrl *string `json:"incident_url,omitempty"`

	// KnownSecret Indicates whether the secret is known by your GitGuardian dashboard.
	KnownSecret *bool `json:"known_secret,omitempty"`

	// Matches List of secret matches.
	Matches []struct {
		// IndexEnd end index of match in file as an array (index origin = 0)
		IndexEnd *int `json:"index_end,omitempty"`

		// IndexStart start index of match in file as an array (index origin = 0)
		IndexStart *int `json:"index_start,omitempty"`

		// LineEnd end line number of match (index origin = 1)
		LineEnd *int `json:"line_end,omitempty"`

		// LineStart start line number of match (index origin = 1)
		LineStart *int `json:"line_start,omitempty"`

		// Match Matched string of failure
		Match string `json:"match"`

		// Type Type of match
		Type string `json:"type"`
	} `json:"matches"`

	// Policy Name of failing policy.
	Policy string `json:"policy"`

	// Type Type of detected policy.
	Type string `json:"type"`

	// Validity Validity of the found secret.
	Validity *PolicyBreakValidity `json:"validity"`
}

// PolicyBreakValidity Validity of the found secret.
type PolicyBreakValidity string

// Quota defines model for quota.
type Quota struct {
	Content struct {
		Count     *int                `json:"count,omitempty"`
		Limit     *int                `json:"limit,omitempty"`
		Remaining *int                `json:"remaining,omitempty"`
		Since     *openapi_types.Date `json:"since,omitempty"`
	} `json:"content"`
}

// Scan defines model for scan.
type Scan struct {
	// BranchesScanned Number of branches scanned
	BranchesScanned *int `json:"branches_scanned,omitempty"`

	// CommitsScanned Number of commits scanned
	CommitsScanned *int `json:"commits_scanned,omitempty"`

	// Date Creation date of this historical scan
	Date *time.Time `json:"date,omitempty"`

	// Duration Historical scan duration
	Duration *string `json:"duration,omitempty"`

	// FailingReason Failure reason of the historical scan, if status is failed
	FailingReason *string         `json:"failing_reason,omitempty"`
	Status        *ScanStatusEnum `json:"status,omitempty"`
}

// ScanResult Result of a content scan.
type ScanResult struct {
	// Policies Policies checked on this document.
	Policies []string `json:"policies"`

	// PolicyBreakCount Number of policy breaks on this document.
	PolicyBreakCount int `json:"policy_break_count"`

	// PolicyBreaks List of policy breaks.
	PolicyBreaks []PolicyBreak `json:"policy_breaks"`
}

// Source defines model for source.
type Source struct {
	// ClosedIncidentsCount Number of closed secret incidents with at least one occurrence on this source.
	ClosedIncidentsCount *int `json:"closed_incidents_count,omitempty"`

	// DefaultBranch Default branch of the source repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// DefaultBranchHead Reference of the HEAD of the default branch.
	DefaultBranchHead *string `json:"default_branch_head,omitempty"`

	// ExternalId VCS identifier of the source (e.g.: the GitHub id for a GitHub repository). Warning: external_id is a string because some VCS ids can be UUIDs.
	ExternalId *string           `json:"external_id,omitempty"`
	FullName   *string           `json:"full_name,omitempty"`
	Health     *SourceHealthEnum `json:"health,omitempty"`
	Id         *int              `json:"id,omitempty"`
	LastScan   *Scan             `json:"last_scan,omitempty"`

	// OpenIncidentsCount Number of open secret incidents with at least one occurrence on this source.
	OpenIncidentsCount *int    `json:"open_incidents_count,omitempty"`
	Type               *string `json:"type,omitempty"`
	Url                *string `json:"url,omitempty"`
	Visibility         *string `json:"visibility,omitempty"`
}

// Team defines model for team.
type Team struct {
	// Description team description.
	Description    *string `json:"description"`
	GitguardianUrl *string `json:"gitguardian_url,omitempty"`
	Id             *int    `json:"id,omitempty"`
	IsGlobal       *bool   `json:"is_global,omitempty"`
	Name           *string `json:"name,omitempty"`
}

// TeamInvitation defines model for teamInvitation.
type TeamInvitation struct {
	Id                 *int                    `json:"id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`
	InvitationId       *int                    `json:"invitation_id,omitempty"`
	TeamId             *int                    `json:"team_id,omitempty"`
	TeamPermission     *TeamPermissionEnum     `json:"team_permission,omitempty"`
}

// TeamMembership defines model for teamMembership.
type TeamMembership struct {
	Id                 *int                    `json:"id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`

	// MemberId Id of a workspace member.
	MemberId       *int                `json:"member_id,omitempty"`
	TeamId         *int                `json:"team_id,omitempty"`
	TeamPermission *TeamPermissionEnum `json:"team_permission,omitempty"`
}

// TeamRequest defines model for teamRequest.
type TeamRequest struct {
	Id       *int `json:"id,omitempty"`
	MemberId *int `json:"member_id,omitempty"`
	TeamId   *int `json:"team_id,omitempty"`
}

// VcsOccurrence defines model for vcsOccurrence.
type VcsOccurrence struct {
	AuthorInfo *string    `json:"author_info,omitempty"`
	AuthorName *string    `json:"author_name,omitempty"`
	Date       *time.Time `json:"date,omitempty"`

	// Filepath This is filename for old models with incomplete data
	Filepath   *string             `json:"filepath"`
	Id         *int                `json:"id,omitempty"`
	IncidentId *int                `json:"incident_id,omitempty"`
	Kind       *OccurrenceKindEnum `json:"kind,omitempty"`
	Matches    *[]Match            `json:"matches,omitempty"`
	Presence   *PresenceEnum       `json:"presence,omitempty"`
	Sha        *string             `json:"sha"`
	Source     *Source             `json:"source,omitempty"`
	Tags       *[]TagEnum          `json:"tags,omitempty"`
	Url        *string             `json:"url,omitempty"`
}

// Cursor defines model for cursor.
type Cursor = string

// DateAfter Entries found after this date.
type DateAfter = string

// DateBefore Entries found before this date.
type DateBefore = string

// HoneytokenId defines model for honeytoken_id.
type HoneytokenId = openapi_types.UUID

// IncidentId defines model for incident_id.
type IncidentId = int

// InvitationId defines model for invitation_id.
type InvitationId = int

// MemberId defines model for member_id.
type MemberId = int

// Page defines model for page.
type Page = int

// PerPage defines model for per_page.
type PerPage = int

// TeamId defines model for team_id.
type TeamId = int

// BadRequestError Error obtained in an API response
type BadRequestError = Error

// ConflictError Error obtained in an API response
type ConflictError = Error

// MaintenanceResponse Error obtained in an API response
type MaintenanceResponse = Error

// OverQuotaError Error obtained in an API response
type OverQuotaError = Error

// PermissionDeniedError Error obtained in an API response
type PermissionDeniedError = Error

// ScanningError Error obtained in an API response
type ScanningError = Error

// UnauthorizedError Error obtained in an API response
type UnauthorizedError = Error

// ListApiTokensParams defines parameters for ListApiTokens.
type ListApiTokensParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage            `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status  *APITokenStatusEnum `form:"status,omitempty" json:"status,omitempty"`

	// MemberId Filter by member id.
	MemberId *int `form:"member_id,omitempty" json:"member_id,omitempty"`

	// CreatorId Filter by creator id.
	CreatorId *int               `form:"creator_id,omitempty" json:"creator_id,omitempty"`
	Scopes    *APITokenScopeEnum `form:"scopes,omitempty" json:"scopes,omitempty"`
	Search    *string            `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListApiTokensParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListApiTokensParamsOrdering defines parameters for ListApiTokens.
type ListApiTokensParamsOrdering string

// ListAuditLogsParams defines parameters for ListAuditLogs.
type ListAuditLogsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage    *PerPage    `form:"per_page,omitempty" json:"per_page,omitempty"`
	DateBefore *DateBefore `form:"date_before,omitempty" json:"date_before,omitempty"`
	DateAfter  *DateAfter  `form:"date_after,omitempty" json:"date_after,omitempty"`

	// EventName Entries matching this event name.
	EventName *string `form:"event_name,omitempty" json:"event_name,omitempty"`

	// MemberId The id of the member to retrieve.
	MemberId *int `form:"member_id,omitempty" json:"member_id,omitempty"`

	// MemberName Entries matching this member name.
	MemberName *string `form:"member_name,omitempty" json:"member_name,omitempty"`

	// MemberEmail Entries matching this member email.
	MemberEmail *string `form:"member_email,omitempty" json:"member_email,omitempty"`

	// ApiTokenId Entries matching this API token id.
	ApiTokenId *openapi_types.UUID `form:"api_token_id,omitempty" json:"api_token_id,omitempty"`

	// IpAddress Entries matching this IP address.
	IpAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty"`
}

// PublicJwtCreateJSONBody defines parameters for PublicJwtCreate.
type PublicJwtCreateJSONBody struct {
	// Audience Audience of the JWT.
	Audience string `json:"audience"`

	// AudienceType Type of audience.
	AudienceType *string `json:"audience_type,omitempty"`
}

// ListHoneytokenParams defines parameters for ListHoneytoken.
type ListHoneytokenParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage           *PerPage                    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Status            *ListHoneytokenParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	Type              *ListHoneytokenParamsType   `form:"type,omitempty" json:"type,omitempty"`
	Search            *string                     `form:"search,omitempty" json:"search,omitempty"`
	CreatorId         *float32                    `form:"creator_id,omitempty" json:"creator_id,omitempty"`
	RevokerId         *float32                    `form:"revoker_id,omitempty" json:"revoker_id,omitempty"`
	CreatorApiTokenId *string                     `form:"creator_api_token_id,omitempty" json:"creator_api_token_id,omitempty"`
	RevokerApiTokenId *string                     `form:"revoker_api_token_id,omitempty" json:"revoker_api_token_id,omitempty"`
	Tags              *string                     `form:"tags,omitempty" json:"tags,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering  *ListHoneytokenParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
	ShowToken *bool                         `form:"show_token,omitempty" json:"show_token,omitempty"`
}

// ListHoneytokenParamsStatus defines parameters for ListHoneytoken.
type ListHoneytokenParamsStatus string

// ListHoneytokenParamsType defines parameters for ListHoneytoken.
type ListHoneytokenParamsType string

// ListHoneytokenParamsOrdering defines parameters for ListHoneytoken.
type ListHoneytokenParamsOrdering string

// CreateHoneytokenJSONBody defines parameters for CreateHoneytoken.
type CreateHoneytokenJSONBody struct {
	// Description honeytoken description.
	Description *string `json:"description,omitempty"`

	// Labels Labels to set on the honeytoken. If the label doesn't exist, it will be created.
	Labels *[]HoneyTokenLabel `json:"labels,omitempty"`

	// Name honeytoken name.
	Name string `json:"name"`

	// Type honeytoken type
	Type CreateHoneytokenJSONBodyType `json:"type"`
}

// CreateHoneytokenJSONBodyType defines parameters for CreateHoneytoken.
type CreateHoneytokenJSONBodyType string

// DeleteHoneytokenLabelKeyParams defines parameters for DeleteHoneytokenLabelKey.
type DeleteHoneytokenLabelKeyParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// ListHoneytokenLabelsParams defines parameters for ListHoneytokenLabels.
type ListHoneytokenLabelsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	Search  *string  `form:"search,omitempty" json:"search,omitempty"`
	Key     *string  `form:"key,omitempty" json:"key,omitempty"`
}

// PatchHoneytokenLabelKeyParams defines parameters for PatchHoneytokenLabelKey.
type PatchHoneytokenLabelKeyParams struct {
	// OldKey an existing key that we want to rename
	OldKey string `form:"old_key" json:"old_key"`

	// NewKey a new name of the key
	NewKey string `form:"new_key" json:"new_key"`
}

// CreateHoneytokenLabelJSONBody defines parameters for CreateHoneytokenLabel.
type CreateHoneytokenLabelJSONBody struct {
	// Key Label's key's content.
	Key *string `json:"key,omitempty"`

	// Value Label's value's content.
	Value *string `json:"value,omitempty"`
}

// PatchHoneytokenLabelJSONBody defines parameters for PatchHoneytokenLabel.
type PatchHoneytokenLabelJSONBody struct {
	// Value New value for the label.
	Value *string `json:"value,omitempty"`
}

// RetrieveHoneytokenParams defines parameters for RetrieveHoneytoken.
type RetrieveHoneytokenParams struct {
	ShowToken *bool `form:"show_token,omitempty" json:"show_token,omitempty"`
}

// UpdateHoneytokenJSONBody defines parameters for UpdateHoneytoken.
type UpdateHoneytokenJSONBody struct {
	// Description A new honeytoken description
	Description *string `json:"description,omitempty"`

	// Labels A new set of labels for the honeytoken. Will completely override the former labels.
	Labels *[]HoneyTokenLabel `json:"labels,omitempty"`

	// Name A new honeytoken name
	Name *string `json:"name,omitempty"`
}

// ListHoneytokenNotesParams defines parameters for ListHoneytokenNotes.
type ListHoneytokenNotesParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListHoneytokenNotesParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// MemberId Filter by member id.
	MemberId *int `form:"member_id,omitempty" json:"member_id,omitempty"`

	// ApiTokenId Entries matching this API token id.
	ApiTokenId *openapi_types.UUID `form:"api_token_id,omitempty" json:"api_token_id,omitempty"`
	Search     *string             `form:"search,omitempty" json:"search,omitempty"`
}

// ListHoneytokenNotesParamsOrdering defines parameters for ListHoneytokenNotes.
type ListHoneytokenNotesParamsOrdering string

// CreateHoneytokenNoteJSONBody defines parameters for CreateHoneytokenNote.
type CreateHoneytokenNoteJSONBody struct {
	// Comment Content of the honeytoken note
	Comment *string `json:"comment,omitempty"`
}

// UpdateHoneytokenNoteJSONBody defines parameters for UpdateHoneytokenNote.
type UpdateHoneytokenNoteJSONBody struct {
	// Comment Content of the honeytoken note
	Comment *string `json:"comment,omitempty"`
}

// ListHoneytokenSourcesParams defines parameters for ListHoneytokenSources.
type ListHoneytokenSourcesParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListHoneytokenSourcesParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListHoneytokenSourcesParamsOrdering defines parameters for ListHoneytokenSources.
type ListHoneytokenSourcesParamsOrdering string

// ListHoneytokensEventsParams defines parameters for ListHoneytokensEvents.
type ListHoneytokensEventsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'
	Ordering *ListHoneytokensEventsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// HoneytokenId Filter by honeytoken id
	HoneytokenId *openapi_types.UUID `form:"honeytoken_id,omitempty" json:"honeytoken_id,omitempty"`

	// Status Filter by status
	Status *ListHoneytokensEventsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// IpAddress Filter by ip address
	IpAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty"`
	Tags      *string `form:"tags,omitempty" json:"tags,omitempty"`

	// Search Search events based on the `data` field content
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListHoneytokensEventsParamsOrdering defines parameters for ListHoneytokensEvents.
type ListHoneytokensEventsParamsOrdering string

// ListHoneytokensEventsParamsStatus defines parameters for ListHoneytokensEvents.
type ListHoneytokensEventsParamsStatus string

// DiffScanIacJSONBody defines parameters for DiffScanIac.
type DiffScanIacJSONBody struct {
	// Current Tar file containing current folder to be scanned.
	Current map[string]interface{} `json:"current"`

	// Reference Tar file containing reference folder to be scanned.
	Reference      map[string]interface{} `json:"reference"`
	ScanParameters *IACScanTarParameters  `json:"scan_parameters,omitempty"`
}

// ScanIacJSONBody defines parameters for ScanIac.
type ScanIacJSONBody struct {
	// Directory Tar file containing the folder to be scanned.
	Directory      map[string]interface{} `json:"directory"`
	ScanParameters *IACScanTarParameters  `json:"scan_parameters,omitempty"`
}

// ListIncidentsParams defines parameters for ListIncidents.
type ListIncidentsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage       *PerPage       `form:"per_page,omitempty" json:"per_page,omitempty"`
	DateBefore    *DateBefore    `form:"date_before,omitempty" json:"date_before,omitempty"`
	DateAfter     *DateAfter     `form:"date_after,omitempty" json:"date_after,omitempty"`
	AssigneeEmail *string        `form:"assignee_email,omitempty" json:"assignee_email,omitempty"`
	AssigneeId    *int           `form:"assignee_id,omitempty" json:"assignee_id,omitempty"`
	Status        *StatusEnum    `form:"status,omitempty" json:"status,omitempty"`
	Severity      *SeverityEnum  `form:"severity,omitempty" json:"severity,omitempty"`
	Validity      *ValidityEnum  `form:"validity,omitempty" json:"validity,omitempty"`
	Tags          *TagFilterEnum `form:"tags,omitempty" json:"tags,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering           *ListIncidentsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
	DetectorGroupName  *string                      `form:"detector_group_name,omitempty" json:"detector_group_name,omitempty"`
	IgnorerId          *int                         `form:"ignorer_id,omitempty" json:"ignorer_id,omitempty"`
	IgnorerApiTokenId  *openapi_types.UUID          `form:"ignorer_api_token_id,omitempty" json:"ignorer_api_token_id,omitempty"`
	ResolverId         *int                         `form:"resolver_id,omitempty" json:"resolver_id,omitempty"`
	ResolverApiTokenId *openapi_types.UUID          `form:"resolver_api_token_id,omitempty" json:"resolver_api_token_id,omitempty"`
}

// ListIncidentsParamsOrdering defines parameters for ListIncidents.
type ListIncidentsParamsOrdering string

// RetrieveIncidentsParams defines parameters for RetrieveIncidents.
type RetrieveIncidentsParams struct {
	// WithOccurrences Retrieve a number of occurrences of this incident.
	WithOccurrences *int `form:"with_occurrences,omitempty" json:"with_occurrences,omitempty"`
}

// AssignIncidentJSONBody defines parameters for AssignIncident.
type AssignIncidentJSONBody struct {
	// Email email of the member to assign. This parameter is mutually exclusive with `member_id`.
	Email *string `json:"email,omitempty"`

	// MemberId id of the member to assign. This parameter is mutually exclusive with `email`.
	MemberId *float32 `json:"member_id,omitempty"`
}

// GrantAccessIncidentJSONBody defines parameters for GrantAccessIncident.
type GrantAccessIncidentJSONBody struct {
	// Email Email address of a user or invitee. This parameter is mutually exclusive
	// with `member_id`, `invitation_id` and `team_id`.
	Email              *string                 `json:"email,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`

	// InvitationId Id of an invitation. This parameter is mutually exclusive with `email`,
	// `member_id` and `team_id`.
	InvitationId *float32 `json:"invitation_id,omitempty"`

	// MemberId Id of a member. This parameter is mutually exclusive with `email`,
	// `invitation_id` and `team_id`.
	MemberId *float32 `json:"member_id,omitempty"`

	// TeamId Id of a team, except for the global team. This parameter is mutually
	// exclusive with `email`, `member_id` and `invitation_id`.
	TeamId *float32 `json:"team_id,omitempty"`
}

// IgnoreIncidentJSONBody defines parameters for IgnoreIncident.
type IgnoreIncidentJSONBody struct {
	IgnoreReason SecretStatusEnum `json:"ignore_reason"`
}

// ListIncidentInvitationsParams defines parameters for ListIncidentInvitations.
type ListIncidentInvitationsParams struct {
	// Cursor Pagination cursor.
	Cursor       *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	InvitationId *float32 `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`

	// IncidentPermission filter accesses with a specific permission.
	IncidentPermission *IncidentPermissionEnum `form:"incident_permission,omitempty" json:"incident_permission,omitempty"`
}

// ListIncidentMembersParams defines parameters for ListIncidentMembers.
type ListIncidentMembersParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage            *PerPage                `form:"per_page,omitempty" json:"per_page,omitempty"`
	MemberId           *float32                `form:"member_id,omitempty" json:"member_id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `form:"incident_permission,omitempty" json:"incident_permission,omitempty"`
	Role               *MemberRoleEnum         `form:"role,omitempty" json:"role,omitempty"`
	Search             *string                 `form:"search,omitempty" json:"search,omitempty"`
}

// ListIncidentNotesParams defines parameters for ListIncidentNotes.
type ListIncidentNotesParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListIncidentNotesParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// MemberId Filter by member id.
	MemberId *int    `form:"member_id,omitempty" json:"member_id,omitempty"`
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
}

// ListIncidentNotesParamsOrdering defines parameters for ListIncidentNotes.
type ListIncidentNotesParamsOrdering string

// CreateIncidentNoteJSONBody defines parameters for CreateIncidentNote.
type CreateIncidentNoteJSONBody struct {
	// Comment Content of the incident note
	Comment string `json:"comment"`
}

// UpdateIncidentNoteJSONBody defines parameters for UpdateIncidentNote.
type UpdateIncidentNoteJSONBody struct {
	// Comment Content of the incident note
	Comment string `json:"comment"`
}

// ResolveIncidentJSONBody defines parameters for ResolveIncident.
type ResolveIncidentJSONBody struct {
	SecretRevoked bool `json:"secret_revoked"`
}

// RevokeAccessIncidentJSONBody defines parameters for RevokeAccessIncident.
type RevokeAccessIncidentJSONBody struct {
	// Email Email address of a user or invitee. This parameter is mutually exclusive
	// with `member_id`, `invitation_id` and `team_id`.
	Email *string `json:"email,omitempty"`

	// InvitationId Id of an invitation. This parameter is mutually exclusive with `email`,
	// `member_id` and `team_id`.
	InvitationId *float32 `json:"invitation_id,omitempty"`

	// MemberId Id of a member. This parameter is mutually exclusive with `email`,
	// `invitation_id` and `team_id`.
	MemberId *float32 `json:"member_id,omitempty"`

	// TeamId Id of a team, except for the global team. This parameter is mutually
	// exclusive with `email`, `member_id` and `invitation_id`.
	TeamId *float32 `json:"team_id,omitempty"`
}

// ShareIncidentJSONBody defines parameters for ShareIncident.
type ShareIncidentJSONBody struct {
	// AutoHealing Allow the developer to resolve or ignore through the share link
	AutoHealing *bool `json:"auto_healing,omitempty"`

	// FeedbackCollection Allow the developer to submit their feedback through the share link
	FeedbackCollection *bool `json:"feedback_collection,omitempty"`

	// Lifespan Lifespan, in hours, of the share link. If 0 or unset, a default value will be applied based on the workspace settings.
	Lifespan *int `json:"lifespan,omitempty"`
}

// ListIncidentTeamsParams defines parameters for ListIncidentTeams.
type ListIncidentTeamsParams struct {
	// Cursor Pagination cursor.
	Cursor             *Cursor                 `form:"cursor,omitempty" json:"cursor,omitempty"`
	TeamId             *float32                `form:"team_id,omitempty" json:"team_id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `form:"incident_permission,omitempty" json:"incident_permission,omitempty"`
}

// ListInvitationsParams defines parameters for ListInvitations.
type ListInvitationsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	Search  *string  `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListInvitationsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListInvitationsParamsOrdering defines parameters for ListInvitations.
type ListInvitationsParamsOrdering string

// CreateInvitationsJSONBody defines parameters for CreateInvitations.
type CreateInvitationsJSONBody struct {
	// Email email of the user to invite.
	Email string                  `json:"email"`
	Role  *NonOwnerMemberRoleEnum `json:"role,omitempty"`
}

// ResendInvitationJSONBody defines parameters for ResendInvitation.
type ResendInvitationJSONBody = map[string]interface{}

// ListMembersParams defines parameters for ListMembers.
type ListMembersParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage        `form:"per_page,omitempty" json:"per_page,omitempty"`
	Role    *MemberRoleEnum `form:"role,omitempty" json:"role,omitempty"`
	Search  *string         `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListMembersParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListMembersParamsOrdering defines parameters for ListMembers.
type ListMembersParamsOrdering string

// ListMemberTeamMembershipsParams defines parameters for ListMemberTeamMemberships.
type ListMemberTeamMembershipsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// TeamId The id of a team to filter on
	TeamId *int `form:"team_id,omitempty" json:"team_id,omitempty"`
}

// ListMemberTeamRequestsParams defines parameters for ListMemberTeamRequests.
type ListMemberTeamRequestsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	TeamId  *float32 `form:"team_id,omitempty" json:"team_id,omitempty"`
}

// ListMemberTeamsParams defines parameters for ListMemberTeams.
type ListMemberTeamsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage  *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	Search   *string  `form:"search,omitempty" json:"search,omitempty"`
	IsGlobal *bool    `form:"is_global,omitempty" json:"is_global,omitempty"`
}

// MultipleScanJSONBody defines parameters for MultipleScan.
type MultipleScanJSONBody = []Document

// ListOccsParams defines parameters for ListOccs.
type ListOccsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage    *PerPage    `form:"per_page,omitempty" json:"per_page,omitempty"`
	DateBefore *DateBefore `form:"date_before,omitempty" json:"date_before,omitempty"`
	DateAfter  *DateAfter  `form:"date_after,omitempty" json:"date_after,omitempty"`

	// SourceId Filter on the source ID.
	SourceId   *int                      `form:"source_id,omitempty" json:"source_id,omitempty"`
	SourceName *string                   `form:"source_name,omitempty" json:"source_name,omitempty"`
	SourceType *ListOccsParamsSourceType `form:"source_type,omitempty" json:"source_type,omitempty"`

	// IncidentId Filter by incident ID.
	IncidentId *int           `form:"incident_id,omitempty" json:"incident_id,omitempty"`
	Presence   *PresenceEnum  `form:"presence,omitempty" json:"presence,omitempty"`
	AuthorName *string        `form:"author_name,omitempty" json:"author_name,omitempty"`
	AuthorInfo *string        `form:"author_info,omitempty" json:"author_info,omitempty"`
	Sha        *string        `form:"sha,omitempty" json:"sha,omitempty"`
	Filepath   *string        `form:"filepath,omitempty" json:"filepath,omitempty"`
	Tags       *TagFilterEnum `form:"tags,omitempty" json:"tags,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListOccsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListOccsParamsSourceType defines parameters for ListOccs.
type ListOccsParamsSourceType string

// ListOccsParamsOrdering defines parameters for ListOccs.
type ListOccsParamsOrdering string

// ComputeScaFilesParams defines parameters for ComputeScaFiles.
type ComputeScaFilesParams struct {
	// Files List of input files, comma separated.
	Files *string `form:"files,omitempty" json:"files,omitempty"`
}

// ScaScanAllMultipartBody defines parameters for ScaScanAll.
type ScaScanAllMultipartBody struct {
	Directory      string                `json:"directory"`
	ScanParameters *SCAScanTarParameters `json:"scan_parameters,omitempty"`
}

// ScaScanDiffMultipartBody defines parameters for ScaScanDiff.
type ScaScanDiffMultipartBody struct {
	Current        string                `json:"current"`
	Reference      string                `json:"reference"`
	ScanParameters *SCAScanTarParameters `json:"scan_parameters,omitempty"`
}

// ListSecretDetectorsParams defines parameters for ListSecretDetectors.
type ListSecretDetectorsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage  *PerPage               `form:"per_page,omitempty" json:"per_page,omitempty"`
	IsActive *bool                  `form:"is_active,omitempty" json:"is_active,omitempty"`
	Type     *DetectorGroupTypeEnum `form:"type,omitempty" json:"type,omitempty"`
	Search   *string                `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering *ListSecretDetectorsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// ListSecretDetectorsParamsOrdering defines parameters for ListSecretDetectors.
type ListSecretDetectorsParamsOrdering string

// ListSourcesParams defines parameters for ListSources.
type ListSourcesParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Page Page number.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Number of items to list per page.
	PerPage        *PerPage               `form:"per_page,omitempty" json:"per_page,omitempty"`
	Search         *string                `form:"search,omitempty" json:"search,omitempty"`
	LastScanStatus *ScanStatusEnum        `form:"last_scan_status,omitempty" json:"last_scan_status,omitempty"`
	Health         *SourceHealthEnum      `form:"health,omitempty" json:"health,omitempty"`
	Type           *ListSourcesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering   *ListSourcesParamsOrdering   `form:"ordering,omitempty" json:"ordering,omitempty"`
	Visibility *ListSourcesParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
	ExternalId *string                      `form:"external_id,omitempty" json:"external_id,omitempty"`
}

// ListSourcesParamsType defines parameters for ListSources.
type ListSourcesParamsType string

// ListSourcesParamsOrdering defines parameters for ListSources.
type ListSourcesParamsOrdering string

// ListSourcesParamsVisibility defines parameters for ListSources.
type ListSourcesParamsVisibility string

// ListTeamsParams defines parameters for ListTeams.
type ListTeamsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage  *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	IsGlobal *bool    `form:"is_global,omitempty" json:"is_global,omitempty"`
	Search   *string  `form:"search,omitempty" json:"search,omitempty"`
}

// CreateTeamsJSONBody defines parameters for CreateTeams.
type CreateTeamsJSONBody struct {
	// Description team description.
	Description    *string `json:"description"`
	GitguardianUrl *string `json:"gitguardian_url,omitempty"`
	Id             *int    `json:"id,omitempty"`
	IsGlobal       *bool   `json:"is_global,omitempty"`
	Name           string  `json:"name"`
}

// ListTeamIncidentsParams defines parameters for ListTeamIncidents.
type ListTeamIncidentsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage       *PerPage       `form:"per_page,omitempty" json:"per_page,omitempty"`
	DateBefore    *DateBefore    `form:"date_before,omitempty" json:"date_before,omitempty"`
	DateAfter     *DateAfter     `form:"date_after,omitempty" json:"date_after,omitempty"`
	AssigneeEmail *string        `form:"assignee_email,omitempty" json:"assignee_email,omitempty"`
	AssigneeId    *int           `form:"assignee_id,omitempty" json:"assignee_id,omitempty"`
	Status        *StatusEnum    `form:"status,omitempty" json:"status,omitempty"`
	Severity      *SeverityEnum  `form:"severity,omitempty" json:"severity,omitempty"`
	Validity      *ValidityEnum  `form:"validity,omitempty" json:"validity,omitempty"`
	Tags          *TagFilterEnum `form:"tags,omitempty" json:"tags,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering           *ListTeamIncidentsParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
	DetectorGroupName  *string                          `form:"detector_group_name,omitempty" json:"detector_group_name,omitempty"`
	IgnorerId          *int                             `form:"ignorer_id,omitempty" json:"ignorer_id,omitempty"`
	IgnorerApiTokenId  *openapi_types.UUID              `form:"ignorer_api_token_id,omitempty" json:"ignorer_api_token_id,omitempty"`
	ResolverId         *int                             `form:"resolver_id,omitempty" json:"resolver_id,omitempty"`
	ResolverApiTokenId *openapi_types.UUID              `form:"resolver_api_token_id,omitempty" json:"resolver_api_token_id,omitempty"`
}

// ListTeamIncidentsParamsOrdering defines parameters for ListTeamIncidents.
type ListTeamIncidentsParamsOrdering string

// ListTeamSourcesParams defines parameters for ListTeamSources.
type ListTeamSourcesParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage        *PerPage                   `form:"per_page,omitempty" json:"per_page,omitempty"`
	Search         *string                    `form:"search,omitempty" json:"search,omitempty"`
	LastScanStatus *ScanStatusEnum            `form:"last_scan_status,omitempty" json:"last_scan_status,omitempty"`
	Health         *SourceHealthEnum          `form:"health,omitempty" json:"health,omitempty"`
	Type           *ListTeamSourcesParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Ordering Sort the results by their field value. The default sort is ASC, DESC if the
	// field is preceded by a '-'.
	Ordering   *ListTeamSourcesParamsOrdering   `form:"ordering,omitempty" json:"ordering,omitempty"`
	Visibility *ListTeamSourcesParamsVisibility `form:"visibility,omitempty" json:"visibility,omitempty"`
	ExternalId *string                          `form:"external_id,omitempty" json:"external_id,omitempty"`
}

// ListTeamSourcesParamsType defines parameters for ListTeamSources.
type ListTeamSourcesParamsType string

// ListTeamSourcesParamsOrdering defines parameters for ListTeamSources.
type ListTeamSourcesParamsOrdering string

// ListTeamSourcesParamsVisibility defines parameters for ListTeamSources.
type ListTeamSourcesParamsVisibility string

// UpdateTeamSourcesJSONBody defines parameters for UpdateTeamSources.
type UpdateTeamSourcesJSONBody struct {
	// SourcesToAdd Ids of sources to add to the perimeter.
	SourcesToAdd *[]int `json:"sources_to_add,omitempty"`

	// SourcesToRemove Ids of sources to remove from the perimeter.
	SourcesToRemove *[]int `json:"sources_to_remove,omitempty"`
}

// ListTeamInvitationParams defines parameters for ListTeamInvitation.
type ListTeamInvitationParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// InvitationId The id of an invitation to filter on
	InvitationId       *int                    `form:"invitation_id,omitempty" json:"invitation_id,omitempty"`
	TeamPermission     *TeamPermissionEnum     `form:"team_permission,omitempty" json:"team_permission,omitempty"`
	IncidentPermission *IncidentPermissionEnum `form:"incident_permission,omitempty" json:"incident_permission,omitempty"`
}

// CreateTeamInvitationsJSONBody defines parameters for CreateTeamInvitations.
type CreateTeamInvitationsJSONBody struct {
	Id                 *int                    `json:"id,omitempty"`
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`
	InvitationId       int                     `json:"invitation_id"`
	TeamId             *int                    `json:"team_id,omitempty"`
	TeamPermission     *TeamPermissionEnum     `json:"team_permission,omitempty"`
}

// UpdateTeamInvitationJSONBody defines parameters for UpdateTeamInvitation.
type UpdateTeamInvitationJSONBody struct {
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`
	TeamPermission     *TeamPermissionEnum     `json:"team_permission,omitempty"`
}

// ListTeamMembershipsParams defines parameters for ListTeamMemberships.
type ListTeamMembershipsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage            *PerPage                `form:"per_page,omitempty" json:"per_page,omitempty"`
	TeamPermission     *TeamPermissionEnum     `form:"team_permission,omitempty" json:"team_permission,omitempty"`
	IncidentPermission *IncidentPermissionEnum `form:"incident_permission,omitempty" json:"incident_permission,omitempty"`
	MemberId           *float32                `form:"member_id,omitempty" json:"member_id,omitempty"`
}

// UpdateTeamMembershipJSONBody defines parameters for UpdateTeamMembership.
type UpdateTeamMembershipJSONBody struct {
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`
	TeamPermission     *TeamPermissionEnum     `json:"team_permission,omitempty"`
}

// ListTeamRequestsParams defines parameters for ListTeamRequests.
type ListTeamRequestsParams struct {
	// Cursor Pagination cursor.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PerPage Number of items to list per page.
	PerPage  *PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`
	MemberId *float32 `form:"member_id,omitempty" json:"member_id,omitempty"`
}

// AcceptTeamRequestJSONBody defines parameters for AcceptTeamRequest.
type AcceptTeamRequestJSONBody struct {
	IncidentPermission *IncidentPermissionEnum `json:"incident_permission,omitempty"`
	TeamPermission     *TeamPermissionEnum     `json:"team_permission,omitempty"`
}

// PublicJwtCreateJSONRequestBody defines body for PublicJwtCreate for application/json ContentType.
type PublicJwtCreateJSONRequestBody PublicJwtCreateJSONBody

// CreateHoneytokenJSONRequestBody defines body for CreateHoneytoken for application/json ContentType.
type CreateHoneytokenJSONRequestBody CreateHoneytokenJSONBody

// CreateHoneytokenLabelJSONRequestBody defines body for CreateHoneytokenLabel for application/json ContentType.
type CreateHoneytokenLabelJSONRequestBody CreateHoneytokenLabelJSONBody

// PatchHoneytokenLabelJSONRequestBody defines body for PatchHoneytokenLabel for application/json ContentType.
type PatchHoneytokenLabelJSONRequestBody PatchHoneytokenLabelJSONBody

// UpdateHoneytokenJSONRequestBody defines body for UpdateHoneytoken for application/json ContentType.
type UpdateHoneytokenJSONRequestBody UpdateHoneytokenJSONBody

// CreateHoneytokenNoteJSONRequestBody defines body for CreateHoneytokenNote for application/json ContentType.
type CreateHoneytokenNoteJSONRequestBody CreateHoneytokenNoteJSONBody

// UpdateHoneytokenNoteJSONRequestBody defines body for UpdateHoneytokenNote for application/json ContentType.
type UpdateHoneytokenNoteJSONRequestBody UpdateHoneytokenNoteJSONBody

// DiffScanIacJSONRequestBody defines body for DiffScanIac for application/json ContentType.
type DiffScanIacJSONRequestBody DiffScanIacJSONBody

// ScanIacJSONRequestBody defines body for ScanIac for application/json ContentType.
type ScanIacJSONRequestBody ScanIacJSONBody

// UpdateSecretIncidentJSONRequestBody defines body for UpdateSecretIncident for application/json ContentType.
type UpdateSecretIncidentJSONRequestBody = IncidentWithoutOccurrences

// AssignIncidentJSONRequestBody defines body for AssignIncident for application/json ContentType.
type AssignIncidentJSONRequestBody AssignIncidentJSONBody

// GrantAccessIncidentJSONRequestBody defines body for GrantAccessIncident for application/json ContentType.
type GrantAccessIncidentJSONRequestBody GrantAccessIncidentJSONBody

// IgnoreIncidentJSONRequestBody defines body for IgnoreIncident for application/json ContentType.
type IgnoreIncidentJSONRequestBody IgnoreIncidentJSONBody

// CreateIncidentNoteJSONRequestBody defines body for CreateIncidentNote for application/json ContentType.
type CreateIncidentNoteJSONRequestBody CreateIncidentNoteJSONBody

// UpdateIncidentNoteJSONRequestBody defines body for UpdateIncidentNote for application/json ContentType.
type UpdateIncidentNoteJSONRequestBody UpdateIncidentNoteJSONBody

// ResolveIncidentJSONRequestBody defines body for ResolveIncident for application/json ContentType.
type ResolveIncidentJSONRequestBody ResolveIncidentJSONBody

// RevokeAccessIncidentJSONRequestBody defines body for RevokeAccessIncident for application/json ContentType.
type RevokeAccessIncidentJSONRequestBody RevokeAccessIncidentJSONBody

// ShareIncidentJSONRequestBody defines body for ShareIncident for application/json ContentType.
type ShareIncidentJSONRequestBody ShareIncidentJSONBody

// CreateInvitationsJSONRequestBody defines body for CreateInvitations for application/json ContentType.
type CreateInvitationsJSONRequestBody CreateInvitationsJSONBody

// ResendInvitationJSONRequestBody defines body for ResendInvitation for application/json ContentType.
type ResendInvitationJSONRequestBody = ResendInvitationJSONBody

// UpdateMemberJSONRequestBody defines body for UpdateMember for application/json ContentType.
type UpdateMemberJSONRequestBody = Member

// MultipleScanJSONRequestBody defines body for MultipleScan for application/json ContentType.
type MultipleScanJSONRequestBody = MultipleScanJSONBody

// ScaScanAllMultipartRequestBody defines body for ScaScanAll for multipart/form-data ContentType.
type ScaScanAllMultipartRequestBody ScaScanAllMultipartBody

// ScaScanDiffMultipartRequestBody defines body for ScaScanDiff for multipart/form-data ContentType.
type ScaScanDiffMultipartRequestBody ScaScanDiffMultipartBody

// ContentScanJSONRequestBody defines body for ContentScan for application/json ContentType.
type ContentScanJSONRequestBody = Document

// CreateTeamsJSONRequestBody defines body for CreateTeams for application/json ContentType.
type CreateTeamsJSONRequestBody CreateTeamsJSONBody

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = Team

// UpdateTeamSourcesJSONRequestBody defines body for UpdateTeamSources for application/json ContentType.
type UpdateTeamSourcesJSONRequestBody UpdateTeamSourcesJSONBody

// CreateTeamInvitationsJSONRequestBody defines body for CreateTeamInvitations for application/json ContentType.
type CreateTeamInvitationsJSONRequestBody CreateTeamInvitationsJSONBody

// UpdateTeamInvitationJSONRequestBody defines body for UpdateTeamInvitation for application/json ContentType.
type UpdateTeamInvitationJSONRequestBody UpdateTeamInvitationJSONBody

// CreateTeamMembershipJSONRequestBody defines body for CreateTeamMembership for application/json ContentType.
type CreateTeamMembershipJSONRequestBody = TeamMembership

// UpdateTeamMembershipJSONRequestBody defines body for UpdateTeamMembership for application/json ContentType.
type UpdateTeamMembershipJSONRequestBody UpdateTeamMembershipJSONBody

// AcceptTeamRequestJSONRequestBody defines body for AcceptTeamRequest for application/json ContentType.
type AcceptTeamRequestJSONRequestBody AcceptTeamRequestJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListApiTokens request
	ListApiTokens(ctx context.Context, params *ListApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SelfDeleteApiToken request
	SelfDeleteApiToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SelfRetrieveApiToken request
	SelfRetrieveApiToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiToken request
	DeleteApiToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveApiToken request
	RetrieveApiToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuditLogs request
	ListAuditLogs(ctx context.Context, params *ListAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicJwtCreateWithBody request with any body
	PublicJwtCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicJwtCreate(ctx context.Context, body PublicJwtCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HealthCheck request
	HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHoneytoken request
	ListHoneytoken(ctx context.Context, params *ListHoneytokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHoneytokenWithBody request with any body
	CreateHoneytokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHoneytoken(ctx context.Context, body CreateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHoneytokenLabelKey request
	DeleteHoneytokenLabelKey(ctx context.Context, params *DeleteHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHoneytokenLabels request
	ListHoneytokenLabels(ctx context.Context, params *ListHoneytokenLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchHoneytokenLabelKey request
	PatchHoneytokenLabelKey(ctx context.Context, params *PatchHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHoneytokenLabelWithBody request with any body
	CreateHoneytokenLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHoneytokenLabel(ctx context.Context, body CreateHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHoneytokenLabel request
	DeleteHoneytokenLabel(ctx context.Context, labelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchHoneytokenLabelWithBody request with any body
	PatchHoneytokenLabelWithBody(ctx context.Context, labelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchHoneytokenLabel(ctx context.Context, labelId string, body PatchHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveHoneytoken request
	RetrieveHoneytoken(ctx context.Context, honeytokenId HoneytokenId, params *RetrieveHoneytokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHoneytokenWithBody request with any body
	UpdateHoneytokenWithBody(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHoneytoken(ctx context.Context, honeytokenId HoneytokenId, body UpdateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHoneytokenNotes request
	ListHoneytokenNotes(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHoneytokenNoteWithBody request with any body
	CreateHoneytokenNoteWithBody(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, body CreateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHoneytokenNote request
	DeleteHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHoneytokenNoteWithBody request with any body
	UpdateHoneytokenNoteWithBody(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, body UpdateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetHoneytoken request
	ResetHoneytoken(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeHoneytoken request
	RevokeHoneytoken(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHoneytokenSources request
	ListHoneytokenSources(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListHoneytokensEvents request
	ListHoneytokensEvents(ctx context.Context, params *ListHoneytokensEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiffScanIacWithBody request with any body
	DiffScanIacWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DiffScanIac(ctx context.Context, body DiffScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScanIacWithBody request with any body
	ScanIacWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScanIac(ctx context.Context, body ScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidents request
	ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveIncidents request
	RetrieveIncidents(ctx context.Context, incidentId IncidentId, params *RetrieveIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSecretIncidentWithBody request with any body
	UpdateSecretIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSecretIncident(ctx context.Context, incidentId IncidentId, body UpdateSecretIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignIncidentWithBody request with any body
	AssignIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignIncident(ctx context.Context, incidentId IncidentId, body AssignIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GrantAccessIncidentWithBody request with any body
	GrantAccessIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GrantAccessIncident(ctx context.Context, incidentId IncidentId, body GrantAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IgnoreIncidentWithBody request with any body
	IgnoreIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IgnoreIncident(ctx context.Context, incidentId IncidentId, body IgnoreIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentInvitations request
	ListIncidentInvitations(ctx context.Context, incidentId IncidentId, params *ListIncidentInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveIncidentsLeaks request
	RetrieveIncidentsLeaks(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentMembers request
	ListIncidentMembers(ctx context.Context, incidentId IncidentId, params *ListIncidentMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentNotes request
	ListIncidentNotes(ctx context.Context, incidentId IncidentId, params *ListIncidentNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncidentNoteWithBody request with any body
	CreateIncidentNoteWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIncidentNote(ctx context.Context, incidentId IncidentId, body CreateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentNote request
	DeleteIncidentNote(ctx context.Context, incidentId IncidentId, noteId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncidentNoteWithBody request with any body
	UpdateIncidentNoteWithBody(ctx context.Context, incidentId IncidentId, noteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIncidentNote(ctx context.Context, incidentId IncidentId, noteId int, body UpdateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReopenIncident request
	ReopenIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResolveIncidentWithBody request with any body
	ResolveIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResolveIncident(ctx context.Context, incidentId IncidentId, body ResolveIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeAccessIncidentWithBody request with any body
	RevokeAccessIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RevokeAccessIncident(ctx context.Context, incidentId IncidentId, body RevokeAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShareIncidentWithBody request with any body
	ShareIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ShareIncident(ctx context.Context, incidentId IncidentId, body ShareIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncidentTeams request
	ListIncidentTeams(ctx context.Context, incidentId IncidentId, params *ListIncidentTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignIncident request
	UnassignIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnshareIncident request
	UnshareIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvitations request
	ListInvitations(ctx context.Context, params *ListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvitationsWithBody request with any body
	CreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvitations(ctx context.Context, body CreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvitation request
	DeleteInvitation(ctx context.Context, invitationId InvitationId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendInvitationWithBody request with any body
	ResendInvitationWithBody(ctx context.Context, invitationId InvitationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResendInvitation(ctx context.Context, invitationId InvitationId, body ResendInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMembers request
	ListMembers(ctx context.Context, params *ListMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMember request
	DeleteMember(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveMember request
	RetrieveMember(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMemberWithBody request with any body
	UpdateMemberWithBody(ctx context.Context, memberId MemberId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMember(ctx context.Context, memberId MemberId, body UpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMemberTeamMemberships request
	ListMemberTeamMemberships(ctx context.Context, memberId MemberId, params *ListMemberTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMemberTeamRequests request
	ListMemberTeamRequests(ctx context.Context, memberId MemberId, params *ListMemberTeamRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMemberTeams request
	ListMemberTeams(ctx context.Context, memberId MemberId, params *ListMemberTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MultipleScanWithBody request with any body
	MultipleScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MultipleScan(ctx context.Context, body MultipleScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOccs request
	ListOccs(ctx context.Context, params *ListOccsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Quotas request
	Quotas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComputeScaFiles request
	ComputeScaFiles(ctx context.Context, params *ComputeScaFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaScanAllWithBody request with any body
	ScaScanAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScaScanDiffWithBody request with any body
	ScaScanDiffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContentScanWithBody request with any body
	ContentScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContentScan(ctx context.Context, body ContentScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSecretDetectors request
	ListSecretDetectors(ctx context.Context, params *ListSecretDetectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretDetector request
	GetSecretDetector(ctx context.Context, detectorName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSources request
	ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveSource request
	RetrieveSource(ctx context.Context, sourceId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeams request
	ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamsWithBody request with any body
	CreateTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeams(ctx context.Context, body CreateTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveTeam request
	RetrieveTeam(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamWithBody request with any body
	UpdateTeamWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, teamId TeamId, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamIncidents request
	ListTeamIncidents(ctx context.Context, teamId TeamId, params *ListTeamIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamSources request
	ListTeamSources(ctx context.Context, teamId TeamId, params *ListTeamSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamSourcesWithBody request with any body
	UpdateTeamSourcesWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamSources(ctx context.Context, teamId TeamId, body UpdateTeamSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamInvitation request
	ListTeamInvitation(ctx context.Context, teamId TeamId, params *ListTeamInvitationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamInvitationsWithBody request with any body
	CreateTeamInvitationsWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamInvitations(ctx context.Context, teamId TeamId, body CreateTeamInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamInvitation request
	DeleteTeamInvitation(ctx context.Context, teamId TeamId, teamInvitationId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamInvitationWithBody request with any body
	UpdateTeamInvitationWithBody(ctx context.Context, teamId TeamId, teamInvitationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamInvitation(ctx context.Context, teamId TeamId, teamInvitationId int, body UpdateTeamInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamMemberships request
	ListTeamMemberships(ctx context.Context, teamId TeamId, params *ListTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamMembershipWithBody request with any body
	CreateTeamMembershipWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeamMembership(ctx context.Context, teamId TeamId, body CreateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamMembership request
	DeleteTeamMembership(ctx context.Context, teamId TeamId, teamMembershipId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamMembershipWithBody request with any body
	UpdateTeamMembershipWithBody(ctx context.Context, teamId TeamId, teamMembershipId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeamMembership(ctx context.Context, teamId TeamId, teamMembershipId int, body UpdateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTeamRequests request
	ListTeamRequests(ctx context.Context, teamId TeamId, params *ListTeamRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamRequest request
	CreateTeamRequest(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamRequest request
	DeleteTeamRequest(ctx context.Context, teamId TeamId, teamRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptTeamRequestWithBody request with any body
	AcceptTeamRequestWithBody(ctx context.Context, teamId TeamId, teamRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptTeamRequest(ctx context.Context, teamId TeamId, teamRequestId int, body AcceptTeamRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListApiTokens(ctx context.Context, params *ListApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApiTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SelfDeleteApiToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSelfDeleteApiTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SelfRetrieveApiToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSelfRetrieveApiTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveApiToken(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveApiTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuditLogs(ctx context.Context, params *ListAuditLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicJwtCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicJwtCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicJwtCreate(ctx context.Context, body PublicJwtCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicJwtCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHoneytoken(ctx context.Context, params *ListHoneytokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHoneytokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytoken(ctx context.Context, body CreateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHoneytokenLabelKey(ctx context.Context, params *DeleteHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHoneytokenLabelKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHoneytokenLabels(ctx context.Context, params *ListHoneytokenLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHoneytokenLabelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchHoneytokenLabelKey(ctx context.Context, params *PatchHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchHoneytokenLabelKeyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytokenLabelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenLabelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytokenLabel(ctx context.Context, body CreateHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenLabelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHoneytokenLabel(ctx context.Context, labelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHoneytokenLabelRequest(c.Server, labelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchHoneytokenLabelWithBody(ctx context.Context, labelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchHoneytokenLabelRequestWithBody(c.Server, labelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchHoneytokenLabel(ctx context.Context, labelId string, body PatchHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchHoneytokenLabelRequest(c.Server, labelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveHoneytoken(ctx context.Context, honeytokenId HoneytokenId, params *RetrieveHoneytokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveHoneytokenRequest(c.Server, honeytokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHoneytokenWithBody(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHoneytokenRequestWithBody(c.Server, honeytokenId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHoneytoken(ctx context.Context, honeytokenId HoneytokenId, body UpdateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHoneytokenRequest(c.Server, honeytokenId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHoneytokenNotes(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHoneytokenNotesRequest(c.Server, honeytokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytokenNoteWithBody(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenNoteRequestWithBody(c.Server, honeytokenId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, body CreateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHoneytokenNoteRequest(c.Server, honeytokenId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHoneytokenNoteRequest(c.Server, honeytokenId, noteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHoneytokenNoteWithBody(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHoneytokenNoteRequestWithBody(c.Server, honeytokenId, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHoneytokenNote(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, body UpdateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHoneytokenNoteRequest(c.Server, honeytokenId, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetHoneytoken(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetHoneytokenRequest(c.Server, honeytokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeHoneytoken(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeHoneytokenRequest(c.Server, honeytokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHoneytokenSources(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHoneytokenSourcesRequest(c.Server, honeytokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListHoneytokensEvents(ctx context.Context, params *ListHoneytokensEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListHoneytokensEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffScanIacWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffScanIacRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiffScanIac(ctx context.Context, body DiffScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiffScanIacRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScanIacWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanIacRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScanIac(ctx context.Context, body ScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanIacRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidents(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveIncidents(ctx context.Context, incidentId IncidentId, params *RetrieveIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveIncidentsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSecretIncident(ctx context.Context, incidentId IncidentId, body UpdateSecretIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSecretIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignIncident(ctx context.Context, incidentId IncidentId, body AssignIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrantAccessIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrantAccessIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GrantAccessIncident(ctx context.Context, incidentId IncidentId, body GrantAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGrantAccessIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IgnoreIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIgnoreIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IgnoreIncident(ctx context.Context, incidentId IncidentId, body IgnoreIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIgnoreIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentInvitations(ctx context.Context, incidentId IncidentId, params *ListIncidentInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentInvitationsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveIncidentsLeaks(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveIncidentsLeaksRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentMembers(ctx context.Context, incidentId IncidentId, params *ListIncidentMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentMembersRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentNotes(ctx context.Context, incidentId IncidentId, params *ListIncidentNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentNotesRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentNoteWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentNoteRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncidentNote(ctx context.Context, incidentId IncidentId, body CreateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncidentNoteRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentNote(ctx context.Context, incidentId IncidentId, noteId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentNoteRequest(c.Server, incidentId, noteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentNoteWithBody(ctx context.Context, incidentId IncidentId, noteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentNoteRequestWithBody(c.Server, incidentId, noteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncidentNote(ctx context.Context, incidentId IncidentId, noteId int, body UpdateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncidentNoteRequest(c.Server, incidentId, noteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReopenIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReopenIncidentRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResolveIncident(ctx context.Context, incidentId IncidentId, body ResolveIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResolveIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeAccessIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeAccessIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeAccessIncident(ctx context.Context, incidentId IncidentId, body RevokeAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeAccessIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareIncidentWithBody(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareIncidentRequestWithBody(c.Server, incidentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShareIncident(ctx context.Context, incidentId IncidentId, body ShareIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShareIncidentRequest(c.Server, incidentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncidentTeams(ctx context.Context, incidentId IncidentId, params *ListIncidentTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncidentTeamsRequest(c.Server, incidentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignIncidentRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnshareIncident(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnshareIncidentRequest(c.Server, incidentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvitations(ctx context.Context, params *ListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitations(ctx context.Context, body CreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvitation(ctx context.Context, invitationId InvitationId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvitationRequest(c.Server, invitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendInvitationWithBody(ctx context.Context, invitationId InvitationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendInvitationRequestWithBody(c.Server, invitationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendInvitation(ctx context.Context, invitationId InvitationId, body ResendInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendInvitationRequest(c.Server, invitationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMembers(ctx context.Context, params *ListMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMember(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMemberRequest(c.Server, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveMember(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveMemberRequest(c.Server, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemberWithBody(ctx context.Context, memberId MemberId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemberRequestWithBody(c.Server, memberId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMember(ctx context.Context, memberId MemberId, body UpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemberRequest(c.Server, memberId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMemberTeamMemberships(ctx context.Context, memberId MemberId, params *ListMemberTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMemberTeamMembershipsRequest(c.Server, memberId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMemberTeamRequests(ctx context.Context, memberId MemberId, params *ListMemberTeamRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMemberTeamRequestsRequest(c.Server, memberId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMemberTeams(ctx context.Context, memberId MemberId, params *ListMemberTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMemberTeamsRequest(c.Server, memberId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultipleScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultipleScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MultipleScan(ctx context.Context, body MultipleScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMultipleScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOccs(ctx context.Context, params *ListOccsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOccsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Quotas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuotasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeScaFiles(ctx context.Context, params *ComputeScaFilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeScaFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaScanAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaScanAllRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScaScanDiffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScaScanDiffRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContentScan(ctx context.Context, body ContentScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContentScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSecretDetectors(ctx context.Context, params *ListSecretDetectorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSecretDetectorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretDetector(ctx context.Context, detectorName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretDetectorRequest(c.Server, detectorName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSources(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSource(ctx context.Context, sourceId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSourceRequest(c.Server, sourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeams(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeams(ctx context.Context, body CreateTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveTeam(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveTeamRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeam(ctx context.Context, teamId TeamId, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamIncidents(ctx context.Context, teamId TeamId, params *ListTeamIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamIncidentsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamSources(ctx context.Context, teamId TeamId, params *ListTeamSourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamSourcesRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamSourcesWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamSourcesRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamSources(ctx context.Context, teamId TeamId, body UpdateTeamSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamSourcesRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamInvitation(ctx context.Context, teamId TeamId, params *ListTeamInvitationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamInvitationRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamInvitationsWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamInvitationsRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamInvitations(ctx context.Context, teamId TeamId, body CreateTeamInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamInvitationsRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamInvitation(ctx context.Context, teamId TeamId, teamInvitationId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamInvitationRequest(c.Server, teamId, teamInvitationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamInvitationWithBody(ctx context.Context, teamId TeamId, teamInvitationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamInvitationRequestWithBody(c.Server, teamId, teamInvitationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamInvitation(ctx context.Context, teamId TeamId, teamInvitationId int, body UpdateTeamInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamInvitationRequest(c.Server, teamId, teamInvitationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamMemberships(ctx context.Context, teamId TeamId, params *ListTeamMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamMembershipsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamMembershipWithBody(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamMembershipRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamMembership(ctx context.Context, teamId TeamId, body CreateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamMembershipRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamMembership(ctx context.Context, teamId TeamId, teamMembershipId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamMembershipRequest(c.Server, teamId, teamMembershipId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamMembershipWithBody(ctx context.Context, teamId TeamId, teamMembershipId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamMembershipRequestWithBody(c.Server, teamId, teamMembershipId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamMembership(ctx context.Context, teamId TeamId, teamMembershipId int, body UpdateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamMembershipRequest(c.Server, teamId, teamMembershipId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTeamRequests(ctx context.Context, teamId TeamId, params *ListTeamRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTeamRequestsRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamRequest(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamRequest(ctx context.Context, teamId TeamId, teamRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequestRequest(c.Server, teamId, teamRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptTeamRequestWithBody(ctx context.Context, teamId TeamId, teamRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptTeamRequestRequestWithBody(c.Server, teamId, teamRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptTeamRequest(ctx context.Context, teamId TeamId, teamRequestId int, body AcceptTeamRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptTeamRequestRequest(c.Server, teamId, teamRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListApiTokensRequest generates requests for ListApiTokens
func NewListApiTokensRequest(server string, params *ListApiTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api_tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creator_id", runtime.ParamLocationQuery, *params.CreatorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scopes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, *params.Scopes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSelfDeleteApiTokenRequest generates requests for SelfDeleteApiToken
func NewSelfDeleteApiTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api_tokens/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSelfRetrieveApiTokenRequest generates requests for SelfRetrieveApiToken
func NewSelfRetrieveApiTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api_tokens/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiTokenRequest generates requests for DeleteApiToken
func NewDeleteApiTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api_tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveApiTokenRequest generates requests for RetrieveApiToken
func NewRetrieveApiTokenRequest(server string, tokenId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token_id", runtime.ParamLocationPath, tokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api_tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuditLogsRequest generates requests for ListAuditLogs
func NewListAuditLogsRequest(server string, params *ListAuditLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/audit_logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_before", runtime.ParamLocationQuery, *params.DateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_after", runtime.ParamLocationQuery, *params.DateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_name", runtime.ParamLocationQuery, *params.EventName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_name", runtime.ParamLocationQuery, *params.MemberName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_email", runtime.ParamLocationQuery, *params.MemberEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_token_id", runtime.ParamLocationQuery, *params.ApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicJwtCreateRequest calls the generic PublicJwtCreate builder with application/json body
func NewPublicJwtCreateRequest(server string, body PublicJwtCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicJwtCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicJwtCreateRequestWithBody generates requests for PublicJwtCreate with any type of body
func NewPublicJwtCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/jwt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewHealthCheckRequest generates requests for HealthCheck
func NewHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHoneytokenRequest generates requests for ListHoneytoken
func NewListHoneytokenRequest(server string, params *ListHoneytokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creator_id", runtime.ParamLocationQuery, *params.CreatorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RevokerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revoker_id", runtime.ParamLocationQuery, *params.RevokerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatorApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creator_api_token_id", runtime.ParamLocationQuery, *params.CreatorApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RevokerApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "revoker_api_token_id", runtime.ParamLocationQuery, *params.RevokerApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_token", runtime.ParamLocationQuery, *params.ShowToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHoneytokenRequest calls the generic CreateHoneytoken builder with application/json body
func NewCreateHoneytokenRequest(server string, body CreateHoneytokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHoneytokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHoneytokenRequestWithBody generates requests for CreateHoneytoken with any type of body
func NewCreateHoneytokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHoneytokenLabelKeyRequest generates requests for DeleteHoneytokenLabelKey
func NewDeleteHoneytokenLabelKeyRequest(server string, params *DeleteHoneytokenLabelKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHoneytokenLabelsRequest generates requests for ListHoneytokenLabels
func NewListHoneytokenLabelsRequest(server string, params *ListHoneytokenLabelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchHoneytokenLabelKeyRequest generates requests for PatchHoneytokenLabelKey
func NewPatchHoneytokenLabelKeyRequest(server string, params *PatchHoneytokenLabelKeyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "old_key", runtime.ParamLocationQuery, params.OldKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "new_key", runtime.ParamLocationQuery, params.NewKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHoneytokenLabelRequest calls the generic CreateHoneytokenLabel builder with application/json body
func NewCreateHoneytokenLabelRequest(server string, body CreateHoneytokenLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHoneytokenLabelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHoneytokenLabelRequestWithBody generates requests for CreateHoneytokenLabel with any type of body
func NewCreateHoneytokenLabelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHoneytokenLabelRequest generates requests for DeleteHoneytokenLabel
func NewDeleteHoneytokenLabelRequest(server string, labelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "label_id", runtime.ParamLocationPath, labelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchHoneytokenLabelRequest calls the generic PatchHoneytokenLabel builder with application/json body
func NewPatchHoneytokenLabelRequest(server string, labelId string, body PatchHoneytokenLabelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchHoneytokenLabelRequestWithBody(server, labelId, "application/json", bodyReader)
}

// NewPatchHoneytokenLabelRequestWithBody generates requests for PatchHoneytokenLabel with any type of body
func NewPatchHoneytokenLabelRequestWithBody(server string, labelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "label_id", runtime.ParamLocationPath, labelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/labels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveHoneytokenRequest generates requests for RetrieveHoneytoken
func NewRetrieveHoneytokenRequest(server string, honeytokenId HoneytokenId, params *RetrieveHoneytokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ShowToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_token", runtime.ParamLocationQuery, *params.ShowToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHoneytokenRequest calls the generic UpdateHoneytoken builder with application/json body
func NewUpdateHoneytokenRequest(server string, honeytokenId HoneytokenId, body UpdateHoneytokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHoneytokenRequestWithBody(server, honeytokenId, "application/json", bodyReader)
}

// NewUpdateHoneytokenRequestWithBody generates requests for UpdateHoneytoken with any type of body
func NewUpdateHoneytokenRequestWithBody(server string, honeytokenId HoneytokenId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListHoneytokenNotesRequest generates requests for ListHoneytokenNotes
func NewListHoneytokenNotesRequest(server string, honeytokenId HoneytokenId, params *ListHoneytokenNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_token_id", runtime.ParamLocationQuery, *params.ApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHoneytokenNoteRequest calls the generic CreateHoneytokenNote builder with application/json body
func NewCreateHoneytokenNoteRequest(server string, honeytokenId HoneytokenId, body CreateHoneytokenNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHoneytokenNoteRequestWithBody(server, honeytokenId, "application/json", bodyReader)
}

// NewCreateHoneytokenNoteRequestWithBody generates requests for CreateHoneytokenNote with any type of body
func NewCreateHoneytokenNoteRequestWithBody(server string, honeytokenId HoneytokenId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteHoneytokenNoteRequest generates requests for DeleteHoneytokenNote
func NewDeleteHoneytokenNoteRequest(server string, honeytokenId HoneytokenId, noteId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/notes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHoneytokenNoteRequest calls the generic UpdateHoneytokenNote builder with application/json body
func NewUpdateHoneytokenNoteRequest(server string, honeytokenId HoneytokenId, noteId openapi_types.UUID, body UpdateHoneytokenNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHoneytokenNoteRequestWithBody(server, honeytokenId, noteId, "application/json", bodyReader)
}

// NewUpdateHoneytokenNoteRequestWithBody generates requests for UpdateHoneytokenNote with any type of body
func NewUpdateHoneytokenNoteRequestWithBody(server string, honeytokenId HoneytokenId, noteId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/notes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetHoneytokenRequest generates requests for ResetHoneytoken
func NewResetHoneytokenRequest(server string, honeytokenId HoneytokenId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevokeHoneytokenRequest generates requests for RevokeHoneytoken
func NewRevokeHoneytokenRequest(server string, honeytokenId HoneytokenId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHoneytokenSourcesRequest generates requests for ListHoneytokenSources
func NewListHoneytokenSourcesRequest(server string, honeytokenId HoneytokenId, params *ListHoneytokenSourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "honeytoken_id", runtime.ParamLocationPath, honeytokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens/%s/sources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListHoneytokensEventsRequest generates requests for ListHoneytokensEvents
func NewListHoneytokensEventsRequest(server string, params *ListHoneytokensEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/honeytokens_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HoneytokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "honeytoken_id", runtime.ParamLocationQuery, *params.HoneytokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDiffScanIacRequest calls the generic DiffScanIac builder with application/json body
func NewDiffScanIacRequest(server string, body DiffScanIacJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDiffScanIacRequestWithBody(server, "application/json", bodyReader)
}

// NewDiffScanIacRequestWithBody generates requests for DiffScanIac with any type of body
func NewDiffScanIacRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/iac_diff_scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScanIacRequest calls the generic ScanIac builder with application/json body
func NewScanIacRequest(server string, body ScanIacJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScanIacRequestWithBody(server, "application/json", bodyReader)
}

// NewScanIacRequestWithBody generates requests for ScanIac with any type of body
func NewScanIacRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/iac_scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentsRequest generates requests for ListIncidents
func NewListIncidentsRequest(server string, params *ListIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_before", runtime.ParamLocationQuery, *params.DateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_after", runtime.ParamLocationQuery, *params.DateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_email", runtime.ParamLocationQuery, *params.AssigneeEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_id", runtime.ParamLocationQuery, *params.AssigneeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Validity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validity", runtime.ParamLocationQuery, *params.Validity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DetectorGroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detector_group_name", runtime.ParamLocationQuery, *params.DetectorGroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IgnorerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorer_id", runtime.ParamLocationQuery, *params.IgnorerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IgnorerApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorer_api_token_id", runtime.ParamLocationQuery, *params.IgnorerApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResolverId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver_id", runtime.ParamLocationQuery, *params.ResolverId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResolverApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver_api_token_id", runtime.ParamLocationQuery, *params.ResolverApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveIncidentsRequest generates requests for RetrieveIncidents
func NewRetrieveIncidentsRequest(server string, incidentId IncidentId, params *RetrieveIncidentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithOccurrences != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_occurrences", runtime.ParamLocationQuery, *params.WithOccurrences); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSecretIncidentRequest calls the generic UpdateSecretIncident builder with application/json body
func NewUpdateSecretIncidentRequest(server string, incidentId IncidentId, body UpdateSecretIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSecretIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewUpdateSecretIncidentRequestWithBody generates requests for UpdateSecretIncident with any type of body
func NewUpdateSecretIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAssignIncidentRequest calls the generic AssignIncident builder with application/json body
func NewAssignIncidentRequest(server string, incidentId IncidentId, body AssignIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewAssignIncidentRequestWithBody generates requests for AssignIncident with any type of body
func NewAssignIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/assign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGrantAccessIncidentRequest calls the generic GrantAccessIncident builder with application/json body
func NewGrantAccessIncidentRequest(server string, incidentId IncidentId, body GrantAccessIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGrantAccessIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewGrantAccessIncidentRequestWithBody generates requests for GrantAccessIncident with any type of body
func NewGrantAccessIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/grant_access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIgnoreIncidentRequest calls the generic IgnoreIncident builder with application/json body
func NewIgnoreIncidentRequest(server string, incidentId IncidentId, body IgnoreIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIgnoreIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewIgnoreIncidentRequestWithBody generates requests for IgnoreIncident with any type of body
func NewIgnoreIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/ignore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentInvitationsRequest generates requests for ListIncidentInvitations
func NewListIncidentInvitationsRequest(server string, incidentId IncidentId, params *ListIncidentInvitationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_permission", runtime.ParamLocationQuery, *params.IncidentPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveIncidentsLeaksRequest generates requests for RetrieveIncidentsLeaks
func NewRetrieveIncidentsLeaksRequest(server string, incidentId IncidentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/leaks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentMembersRequest generates requests for ListIncidentMembers
func NewListIncidentMembersRequest(server string, incidentId IncidentId, params *ListIncidentMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_permission", runtime.ParamLocationQuery, *params.IncidentPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListIncidentNotesRequest generates requests for ListIncidentNotes
func NewListIncidentNotesRequest(server string, incidentId IncidentId, params *ListIncidentNotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncidentNoteRequest calls the generic CreateIncidentNote builder with application/json body
func NewCreateIncidentNoteRequest(server string, incidentId IncidentId, body CreateIncidentNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIncidentNoteRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewCreateIncidentNoteRequestWithBody generates requests for CreateIncidentNote with any type of body
func NewCreateIncidentNoteRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/notes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentNoteRequest generates requests for DeleteIncidentNote
func NewDeleteIncidentNoteRequest(server string, incidentId IncidentId, noteId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/notes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncidentNoteRequest calls the generic UpdateIncidentNote builder with application/json body
func NewUpdateIncidentNoteRequest(server string, incidentId IncidentId, noteId int, body UpdateIncidentNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIncidentNoteRequestWithBody(server, incidentId, noteId, "application/json", bodyReader)
}

// NewUpdateIncidentNoteRequestWithBody generates requests for UpdateIncidentNote with any type of body
func NewUpdateIncidentNoteRequestWithBody(server string, incidentId IncidentId, noteId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "note_id", runtime.ParamLocationPath, noteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/notes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReopenIncidentRequest generates requests for ReopenIncident
func NewReopenIncidentRequest(server string, incidentId IncidentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/reopen", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResolveIncidentRequest calls the generic ResolveIncident builder with application/json body
func NewResolveIncidentRequest(server string, incidentId IncidentId, body ResolveIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResolveIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewResolveIncidentRequestWithBody generates requests for ResolveIncident with any type of body
func NewResolveIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/resolve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevokeAccessIncidentRequest calls the generic RevokeAccessIncident builder with application/json body
func NewRevokeAccessIncidentRequest(server string, incidentId IncidentId, body RevokeAccessIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRevokeAccessIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewRevokeAccessIncidentRequestWithBody generates requests for RevokeAccessIncident with any type of body
func NewRevokeAccessIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/revoke_access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewShareIncidentRequest calls the generic ShareIncident builder with application/json body
func NewShareIncidentRequest(server string, incidentId IncidentId, body ShareIncidentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewShareIncidentRequestWithBody(server, incidentId, "application/json", bodyReader)
}

// NewShareIncidentRequestWithBody generates requests for ShareIncident with any type of body
func NewShareIncidentRequestWithBody(server string, incidentId IncidentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/share", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncidentTeamsRequest generates requests for ListIncidentTeams
func NewListIncidentTeamsRequest(server string, incidentId IncidentId, params *ListIncidentTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_permission", runtime.ParamLocationQuery, *params.IncidentPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnassignIncidentRequest generates requests for UnassignIncident
func NewUnassignIncidentRequest(server string, incidentId IncidentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/unassign", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnshareIncidentRequest generates requests for UnshareIncident
func NewUnshareIncidentRequest(server string, incidentId IncidentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incident_id", runtime.ParamLocationPath, incidentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/incidents/secrets/%s/unshare", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvitationsRequest generates requests for ListInvitations
func NewListInvitationsRequest(server string, params *ListInvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInvitationsRequest calls the generic CreateInvitations builder with application/json body
func NewCreateInvitationsRequest(server string, body CreateInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvitationsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvitationsRequestWithBody generates requests for CreateInvitations with any type of body
func NewCreateInvitationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInvitationRequest generates requests for DeleteInvitation
func NewDeleteInvitationRequest(server string, invitationId InvitationId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_id", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResendInvitationRequest calls the generic ResendInvitation builder with application/json body
func NewResendInvitationRequest(server string, invitationId InvitationId, body ResendInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResendInvitationRequestWithBody(server, invitationId, "application/json", bodyReader)
}

// NewResendInvitationRequestWithBody generates requests for ResendInvitation with any type of body
func NewResendInvitationRequestWithBody(server string, invitationId InvitationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitation_id", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s/resend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMembersRequest generates requests for ListMembers
func NewListMembersRequest(server string, params *ListMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMemberRequest generates requests for DeleteMember
func NewDeleteMemberRequest(server string, memberId MemberId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveMemberRequest generates requests for RetrieveMember
func NewRetrieveMemberRequest(server string, memberId MemberId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMemberRequest calls the generic UpdateMember builder with application/json body
func NewUpdateMemberRequest(server string, memberId MemberId, body UpdateMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMemberRequestWithBody(server, memberId, "application/json", bodyReader)
}

// NewUpdateMemberRequestWithBody generates requests for UpdateMember with any type of body
func NewUpdateMemberRequestWithBody(server string, memberId MemberId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMemberTeamMembershipsRequest generates requests for ListMemberTeamMemberships
func NewListMemberTeamMembershipsRequest(server string, memberId MemberId, params *ListMemberTeamMembershipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s/team_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMemberTeamRequestsRequest generates requests for ListMemberTeamRequests
func NewListMemberTeamRequestsRequest(server string, memberId MemberId, params *ListMemberTeamRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s/team_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMemberTeamsRequest generates requests for ListMemberTeams
func NewListMemberTeamsRequest(server string, memberId MemberId, params *ListMemberTeamsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/members/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsGlobal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_global", runtime.ParamLocationQuery, *params.IsGlobal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMultipleScanRequest calls the generic MultipleScan builder with application/json body
func NewMultipleScanRequest(server string, body MultipleScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMultipleScanRequestWithBody(server, "application/json", bodyReader)
}

// NewMultipleScanRequestWithBody generates requests for MultipleScan with any type of body
func NewMultipleScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/multiscan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOccsRequest generates requests for ListOccs
func NewListOccsRequest(server string, params *ListOccsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/occurrences/secrets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_before", runtime.ParamLocationQuery, *params.DateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_after", runtime.ParamLocationQuery, *params.DateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_id", runtime.ParamLocationQuery, *params.SourceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_name", runtime.ParamLocationQuery, *params.SourceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source_type", runtime.ParamLocationQuery, *params.SourceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_id", runtime.ParamLocationQuery, *params.IncidentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Presence != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "presence", runtime.ParamLocationQuery, *params.Presence); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_name", runtime.ParamLocationQuery, *params.AuthorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorInfo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author_info", runtime.ParamLocationQuery, *params.AuthorInfo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sha != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sha", runtime.ParamLocationQuery, *params.Sha); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filepath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filepath", runtime.ParamLocationQuery, *params.Filepath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuotasRequest generates requests for Quotas
func NewQuotasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/quotas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewComputeScaFilesRequest generates requests for ComputeScaFiles
func NewComputeScaFilesRequest(server string, params *ComputeScaFilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sca/compute_sca_files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Files != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "files", runtime.ParamLocationQuery, *params.Files); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScaScanAllRequestWithBody generates requests for ScaScanAll with any type of body
func NewScaScanAllRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sca/sca_scan_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScaScanDiffRequestWithBody generates requests for ScaScanDiff with any type of body
func NewScaScanDiffRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sca/sca_scan_diff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContentScanRequest calls the generic ContentScan builder with application/json body
func NewContentScanRequest(server string, body ContentScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContentScanRequestWithBody(server, "application/json", bodyReader)
}

// NewContentScanRequestWithBody generates requests for ContentScan with any type of body
func NewContentScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSecretDetectorsRequest generates requests for ListSecretDetectors
func NewListSecretDetectorsRequest(server string, params *ListSecretDetectorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secret_detectors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsActive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSecretDetectorRequest generates requests for GetSecretDetector
func NewGetSecretDetectorRequest(server string, detectorName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "detector_name", runtime.ParamLocationPath, detectorName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/secret_detectors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSourcesRequest generates requests for ListSources
func NewListSourcesRequest(server string, params *ListSourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastScanStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_scan_status", runtime.ParamLocationQuery, *params.LastScanStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Health != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "health", runtime.ParamLocationQuery, *params.Health); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveSourceRequest generates requests for RetrieveSource
func NewRetrieveSourceRequest(server string, sourceId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "source_id", runtime.ParamLocationPath, sourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTeamsRequest generates requests for ListTeams
func NewListTeamsRequest(server string, params *ListTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsGlobal != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_global", runtime.ParamLocationQuery, *params.IsGlobal); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamsRequest calls the generic CreateTeams builder with application/json body
func NewCreateTeamsRequest(server string, body CreateTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTeamsRequestWithBody generates requests for CreateTeams with any type of body
func NewCreateTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveTeamRequest generates requests for RetrieveTeam
func NewRetrieveTeamRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, teamId TeamId, body UpdateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, teamId TeamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamIncidentsRequest generates requests for ListTeamIncidents
func NewListTeamIncidentsRequest(server string, teamId TeamId, params *ListTeamIncidentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/incidents/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_before", runtime.ParamLocationQuery, *params.DateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_after", runtime.ParamLocationQuery, *params.DateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeEmail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_email", runtime.ParamLocationQuery, *params.AssigneeEmail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AssigneeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "assignee_id", runtime.ParamLocationQuery, *params.AssigneeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Severity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severity", runtime.ParamLocationQuery, *params.Severity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Validity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validity", runtime.ParamLocationQuery, *params.Validity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, *params.Tags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DetectorGroupName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detector_group_name", runtime.ParamLocationQuery, *params.DetectorGroupName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IgnorerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorer_id", runtime.ParamLocationQuery, *params.IgnorerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IgnorerApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignorer_api_token_id", runtime.ParamLocationQuery, *params.IgnorerApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResolverId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver_id", runtime.ParamLocationQuery, *params.ResolverId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResolverApiTokenId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolver_api_token_id", runtime.ParamLocationQuery, *params.ResolverApiTokenId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTeamSourcesRequest generates requests for ListTeamSources
func NewListTeamSourcesRequest(server string, teamId TeamId, params *ListTeamSourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/sources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastScanStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_scan_status", runtime.ParamLocationQuery, *params.LastScanStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Health != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "health", runtime.ParamLocationQuery, *params.Health); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Visibility != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamSourcesRequest calls the generic UpdateTeamSources builder with application/json body
func NewUpdateTeamSourcesRequest(server string, teamId TeamId, body UpdateTeamSourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamSourcesRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewUpdateTeamSourcesRequestWithBody generates requests for UpdateTeamSources with any type of body
func NewUpdateTeamSourcesRequestWithBody(server string, teamId TeamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/sources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamInvitationRequest generates requests for ListTeamInvitation
func NewListTeamInvitationRequest(server string, teamId TeamId, params *ListTeamInvitationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvitationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invitation_id", runtime.ParamLocationQuery, *params.InvitationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_permission", runtime.ParamLocationQuery, *params.TeamPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_permission", runtime.ParamLocationQuery, *params.IncidentPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamInvitationsRequest calls the generic CreateTeamInvitations builder with application/json body
func NewCreateTeamInvitationsRequest(server string, teamId TeamId, body CreateTeamInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamInvitationsRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewCreateTeamInvitationsRequestWithBody generates requests for CreateTeamInvitations with any type of body
func NewCreateTeamInvitationsRequestWithBody(server string, teamId TeamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamInvitationRequest generates requests for DeleteTeamInvitation
func NewDeleteTeamInvitationRequest(server string, teamId TeamId, teamInvitationId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_invitation_id", runtime.ParamLocationPath, teamInvitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamInvitationRequest calls the generic UpdateTeamInvitation builder with application/json body
func NewUpdateTeamInvitationRequest(server string, teamId TeamId, teamInvitationId int, body UpdateTeamInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamInvitationRequestWithBody(server, teamId, teamInvitationId, "application/json", bodyReader)
}

// NewUpdateTeamInvitationRequestWithBody generates requests for UpdateTeamInvitation with any type of body
func NewUpdateTeamInvitationRequestWithBody(server string, teamId TeamId, teamInvitationId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_invitation_id", runtime.ParamLocationPath, teamInvitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamMembershipsRequest generates requests for ListTeamMemberships
func NewListTeamMembershipsRequest(server string, teamId TeamId, params *ListTeamMembershipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_permission", runtime.ParamLocationQuery, *params.TeamPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncidentPermission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_permission", runtime.ParamLocationQuery, *params.IncidentPermission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamMembershipRequest calls the generic CreateTeamMembership builder with application/json body
func NewCreateTeamMembershipRequest(server string, teamId TeamId, body CreateTeamMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamMembershipRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewCreateTeamMembershipRequestWithBody generates requests for CreateTeamMembership with any type of body
func NewCreateTeamMembershipRequestWithBody(server string, teamId TeamId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamMembershipRequest generates requests for DeleteTeamMembership
func NewDeleteTeamMembershipRequest(server string, teamId TeamId, teamMembershipId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_membership_id", runtime.ParamLocationPath, teamMembershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamMembershipRequest calls the generic UpdateTeamMembership builder with application/json body
func NewUpdateTeamMembershipRequest(server string, teamId TeamId, teamMembershipId int, body UpdateTeamMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamMembershipRequestWithBody(server, teamId, teamMembershipId, "application/json", bodyReader)
}

// NewUpdateTeamMembershipRequestWithBody generates requests for UpdateTeamMembership with any type of body
func NewUpdateTeamMembershipRequestWithBody(server string, teamId TeamId, teamMembershipId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_membership_id", runtime.ParamLocationPath, teamMembershipId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_memberships/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTeamRequestsRequest generates requests for ListTeamRequests
func NewListTeamRequestsRequest(server string, teamId TeamId, params *ListTeamRequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member_id", runtime.ParamLocationQuery, *params.MemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequestRequest generates requests for CreateTeamRequest
func NewCreateTeamRequestRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTeamRequestRequest generates requests for DeleteTeamRequest
func NewDeleteTeamRequestRequest(server string, teamId TeamId, teamRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_request_id", runtime.ParamLocationPath, teamRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_requests/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptTeamRequestRequest calls the generic AcceptTeamRequest builder with application/json body
func NewAcceptTeamRequestRequest(server string, teamId TeamId, teamRequestId int, body AcceptTeamRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptTeamRequestRequestWithBody(server, teamId, teamRequestId, "application/json", bodyReader)
}

// NewAcceptTeamRequestRequestWithBody generates requests for AcceptTeamRequest with any type of body
func NewAcceptTeamRequestRequestWithBody(server string, teamId TeamId, teamRequestId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_request_id", runtime.ParamLocationPath, teamRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teams/%s/team_requests/%s/accept", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListApiTokensWithResponse request
	ListApiTokensWithResponse(ctx context.Context, params *ListApiTokensParams, reqEditors ...RequestEditorFn) (*ListApiTokensResponse, error)

	// SelfDeleteApiTokenWithResponse request
	SelfDeleteApiTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SelfDeleteApiTokenResponse, error)

	// SelfRetrieveApiTokenWithResponse request
	SelfRetrieveApiTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SelfRetrieveApiTokenResponse, error)

	// DeleteApiTokenWithResponse request
	DeleteApiTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiTokenResponse, error)

	// RetrieveApiTokenWithResponse request
	RetrieveApiTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*RetrieveApiTokenResponse, error)

	// ListAuditLogsWithResponse request
	ListAuditLogsWithResponse(ctx context.Context, params *ListAuditLogsParams, reqEditors ...RequestEditorFn) (*ListAuditLogsResponse, error)

	// PublicJwtCreateWithBodyWithResponse request with any body
	PublicJwtCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicJwtCreateResponse, error)

	PublicJwtCreateWithResponse(ctx context.Context, body PublicJwtCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicJwtCreateResponse, error)

	// HealthCheckWithResponse request
	HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error)

	// ListHoneytokenWithResponse request
	ListHoneytokenWithResponse(ctx context.Context, params *ListHoneytokenParams, reqEditors ...RequestEditorFn) (*ListHoneytokenResponse, error)

	// CreateHoneytokenWithBodyWithResponse request with any body
	CreateHoneytokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenResponse, error)

	CreateHoneytokenWithResponse(ctx context.Context, body CreateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenResponse, error)

	// DeleteHoneytokenLabelKeyWithResponse request
	DeleteHoneytokenLabelKeyWithResponse(ctx context.Context, params *DeleteHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*DeleteHoneytokenLabelKeyResponse, error)

	// ListHoneytokenLabelsWithResponse request
	ListHoneytokenLabelsWithResponse(ctx context.Context, params *ListHoneytokenLabelsParams, reqEditors ...RequestEditorFn) (*ListHoneytokenLabelsResponse, error)

	// PatchHoneytokenLabelKeyWithResponse request
	PatchHoneytokenLabelKeyWithResponse(ctx context.Context, params *PatchHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelKeyResponse, error)

	// CreateHoneytokenLabelWithBodyWithResponse request with any body
	CreateHoneytokenLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenLabelResponse, error)

	CreateHoneytokenLabelWithResponse(ctx context.Context, body CreateHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenLabelResponse, error)

	// DeleteHoneytokenLabelWithResponse request
	DeleteHoneytokenLabelWithResponse(ctx context.Context, labelId string, reqEditors ...RequestEditorFn) (*DeleteHoneytokenLabelResponse, error)

	// PatchHoneytokenLabelWithBodyWithResponse request with any body
	PatchHoneytokenLabelWithBodyWithResponse(ctx context.Context, labelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelResponse, error)

	PatchHoneytokenLabelWithResponse(ctx context.Context, labelId string, body PatchHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelResponse, error)

	// RetrieveHoneytokenWithResponse request
	RetrieveHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *RetrieveHoneytokenParams, reqEditors ...RequestEditorFn) (*RetrieveHoneytokenResponse, error)

	// UpdateHoneytokenWithBodyWithResponse request with any body
	UpdateHoneytokenWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHoneytokenResponse, error)

	UpdateHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, body UpdateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHoneytokenResponse, error)

	// ListHoneytokenNotesWithResponse request
	ListHoneytokenNotesWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenNotesParams, reqEditors ...RequestEditorFn) (*ListHoneytokenNotesResponse, error)

	// CreateHoneytokenNoteWithBodyWithResponse request with any body
	CreateHoneytokenNoteWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenNoteResponse, error)

	CreateHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, body CreateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenNoteResponse, error)

	// DeleteHoneytokenNoteWithResponse request
	DeleteHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteHoneytokenNoteResponse, error)

	// UpdateHoneytokenNoteWithBodyWithResponse request with any body
	UpdateHoneytokenNoteWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHoneytokenNoteResponse, error)

	UpdateHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, body UpdateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHoneytokenNoteResponse, error)

	// ResetHoneytokenWithResponse request
	ResetHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*ResetHoneytokenResponse, error)

	// RevokeHoneytokenWithResponse request
	RevokeHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*RevokeHoneytokenResponse, error)

	// ListHoneytokenSourcesWithResponse request
	ListHoneytokenSourcesWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenSourcesParams, reqEditors ...RequestEditorFn) (*ListHoneytokenSourcesResponse, error)

	// ListHoneytokensEventsWithResponse request
	ListHoneytokensEventsWithResponse(ctx context.Context, params *ListHoneytokensEventsParams, reqEditors ...RequestEditorFn) (*ListHoneytokensEventsResponse, error)

	// DiffScanIacWithBodyWithResponse request with any body
	DiffScanIacWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffScanIacResponse, error)

	DiffScanIacWithResponse(ctx context.Context, body DiffScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffScanIacResponse, error)

	// ScanIacWithBodyWithResponse request with any body
	ScanIacWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScanIacResponse, error)

	ScanIacWithResponse(ctx context.Context, body ScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*ScanIacResponse, error)

	// ListIncidentsWithResponse request
	ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error)

	// RetrieveIncidentsWithResponse request
	RetrieveIncidentsWithResponse(ctx context.Context, incidentId IncidentId, params *RetrieveIncidentsParams, reqEditors ...RequestEditorFn) (*RetrieveIncidentsResponse, error)

	// UpdateSecretIncidentWithBodyWithResponse request with any body
	UpdateSecretIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretIncidentResponse, error)

	UpdateSecretIncidentWithResponse(ctx context.Context, incidentId IncidentId, body UpdateSecretIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretIncidentResponse, error)

	// AssignIncidentWithBodyWithResponse request with any body
	AssignIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignIncidentResponse, error)

	AssignIncidentWithResponse(ctx context.Context, incidentId IncidentId, body AssignIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignIncidentResponse, error)

	// GrantAccessIncidentWithBodyWithResponse request with any body
	GrantAccessIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrantAccessIncidentResponse, error)

	GrantAccessIncidentWithResponse(ctx context.Context, incidentId IncidentId, body GrantAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*GrantAccessIncidentResponse, error)

	// IgnoreIncidentWithBodyWithResponse request with any body
	IgnoreIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IgnoreIncidentResponse, error)

	IgnoreIncidentWithResponse(ctx context.Context, incidentId IncidentId, body IgnoreIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*IgnoreIncidentResponse, error)

	// ListIncidentInvitationsWithResponse request
	ListIncidentInvitationsWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentInvitationsParams, reqEditors ...RequestEditorFn) (*ListIncidentInvitationsResponse, error)

	// RetrieveIncidentsLeaksWithResponse request
	RetrieveIncidentsLeaksWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*RetrieveIncidentsLeaksResponse, error)

	// ListIncidentMembersWithResponse request
	ListIncidentMembersWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentMembersParams, reqEditors ...RequestEditorFn) (*ListIncidentMembersResponse, error)

	// ListIncidentNotesWithResponse request
	ListIncidentNotesWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentNotesParams, reqEditors ...RequestEditorFn) (*ListIncidentNotesResponse, error)

	// CreateIncidentNoteWithBodyWithResponse request with any body
	CreateIncidentNoteWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentNoteResponse, error)

	CreateIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, body CreateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentNoteResponse, error)

	// DeleteIncidentNoteWithResponse request
	DeleteIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, noteId int, reqEditors ...RequestEditorFn) (*DeleteIncidentNoteResponse, error)

	// UpdateIncidentNoteWithBodyWithResponse request with any body
	UpdateIncidentNoteWithBodyWithResponse(ctx context.Context, incidentId IncidentId, noteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentNoteResponse, error)

	UpdateIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, noteId int, body UpdateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentNoteResponse, error)

	// ReopenIncidentWithResponse request
	ReopenIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*ReopenIncidentResponse, error)

	// ResolveIncidentWithBodyWithResponse request with any body
	ResolveIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	ResolveIncidentWithResponse(ctx context.Context, incidentId IncidentId, body ResolveIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error)

	// RevokeAccessIncidentWithBodyWithResponse request with any body
	RevokeAccessIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevokeAccessIncidentResponse, error)

	RevokeAccessIncidentWithResponse(ctx context.Context, incidentId IncidentId, body RevokeAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*RevokeAccessIncidentResponse, error)

	// ShareIncidentWithBodyWithResponse request with any body
	ShareIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareIncidentResponse, error)

	ShareIncidentWithResponse(ctx context.Context, incidentId IncidentId, body ShareIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareIncidentResponse, error)

	// ListIncidentTeamsWithResponse request
	ListIncidentTeamsWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentTeamsParams, reqEditors ...RequestEditorFn) (*ListIncidentTeamsResponse, error)

	// UnassignIncidentWithResponse request
	UnassignIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*UnassignIncidentResponse, error)

	// UnshareIncidentWithResponse request
	UnshareIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*UnshareIncidentResponse, error)

	// ListInvitationsWithResponse request
	ListInvitationsWithResponse(ctx context.Context, params *ListInvitationsParams, reqEditors ...RequestEditorFn) (*ListInvitationsResponse, error)

	// CreateInvitationsWithBodyWithResponse request with any body
	CreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvitationsResponse, error)

	CreateInvitationsWithResponse(ctx context.Context, body CreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvitationsResponse, error)

	// DeleteInvitationWithResponse request
	DeleteInvitationWithResponse(ctx context.Context, invitationId InvitationId, reqEditors ...RequestEditorFn) (*DeleteInvitationResponse, error)

	// ResendInvitationWithBodyWithResponse request with any body
	ResendInvitationWithBodyWithResponse(ctx context.Context, invitationId InvitationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResendInvitationResponse, error)

	ResendInvitationWithResponse(ctx context.Context, invitationId InvitationId, body ResendInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*ResendInvitationResponse, error)

	// ListMembersWithResponse request
	ListMembersWithResponse(ctx context.Context, params *ListMembersParams, reqEditors ...RequestEditorFn) (*ListMembersResponse, error)

	// DeleteMemberWithResponse request
	DeleteMemberWithResponse(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*DeleteMemberResponse, error)

	// RetrieveMemberWithResponse request
	RetrieveMemberWithResponse(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*RetrieveMemberResponse, error)

	// UpdateMemberWithBodyWithResponse request with any body
	UpdateMemberWithBodyWithResponse(ctx context.Context, memberId MemberId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error)

	UpdateMemberWithResponse(ctx context.Context, memberId MemberId, body UpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error)

	// ListMemberTeamMembershipsWithResponse request
	ListMemberTeamMembershipsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamMembershipsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamMembershipsResponse, error)

	// ListMemberTeamRequestsWithResponse request
	ListMemberTeamRequestsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamRequestsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamRequestsResponse, error)

	// ListMemberTeamsWithResponse request
	ListMemberTeamsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamsResponse, error)

	// MultipleScanWithBodyWithResponse request with any body
	MultipleScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultipleScanResponse, error)

	MultipleScanWithResponse(ctx context.Context, body MultipleScanJSONRequestBody, reqEditors ...RequestEditorFn) (*MultipleScanResponse, error)

	// ListOccsWithResponse request
	ListOccsWithResponse(ctx context.Context, params *ListOccsParams, reqEditors ...RequestEditorFn) (*ListOccsResponse, error)

	// QuotasWithResponse request
	QuotasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuotasResponse, error)

	// ComputeScaFilesWithResponse request
	ComputeScaFilesWithResponse(ctx context.Context, params *ComputeScaFilesParams, reqEditors ...RequestEditorFn) (*ComputeScaFilesResponse, error)

	// ScaScanAllWithBodyWithResponse request with any body
	ScaScanAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaScanAllResponse, error)

	// ScaScanDiffWithBodyWithResponse request with any body
	ScaScanDiffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaScanDiffResponse, error)

	// ContentScanWithBodyWithResponse request with any body
	ContentScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentScanResponse, error)

	ContentScanWithResponse(ctx context.Context, body ContentScanJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentScanResponse, error)

	// ListSecretDetectorsWithResponse request
	ListSecretDetectorsWithResponse(ctx context.Context, params *ListSecretDetectorsParams, reqEditors ...RequestEditorFn) (*ListSecretDetectorsResponse, error)

	// GetSecretDetectorWithResponse request
	GetSecretDetectorWithResponse(ctx context.Context, detectorName string, reqEditors ...RequestEditorFn) (*GetSecretDetectorResponse, error)

	// ListSourcesWithResponse request
	ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*ListSourcesResponse, error)

	// RetrieveSourceWithResponse request
	RetrieveSourceWithResponse(ctx context.Context, sourceId int, reqEditors ...RequestEditorFn) (*RetrieveSourceResponse, error)

	// ListTeamsWithResponse request
	ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error)

	// CreateTeamsWithBodyWithResponse request with any body
	CreateTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamsResponse, error)

	CreateTeamsWithResponse(ctx context.Context, body CreateTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamsResponse, error)

	// DeleteTeamWithResponse request
	DeleteTeamWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// RetrieveTeamWithResponse request
	RetrieveTeamWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*RetrieveTeamResponse, error)

	// UpdateTeamWithBodyWithResponse request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, teamId TeamId, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// ListTeamIncidentsWithResponse request
	ListTeamIncidentsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamIncidentsParams, reqEditors ...RequestEditorFn) (*ListTeamIncidentsResponse, error)

	// ListTeamSourcesWithResponse request
	ListTeamSourcesWithResponse(ctx context.Context, teamId TeamId, params *ListTeamSourcesParams, reqEditors ...RequestEditorFn) (*ListTeamSourcesResponse, error)

	// UpdateTeamSourcesWithBodyWithResponse request with any body
	UpdateTeamSourcesWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamSourcesResponse, error)

	UpdateTeamSourcesWithResponse(ctx context.Context, teamId TeamId, body UpdateTeamSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamSourcesResponse, error)

	// ListTeamInvitationWithResponse request
	ListTeamInvitationWithResponse(ctx context.Context, teamId TeamId, params *ListTeamInvitationParams, reqEditors ...RequestEditorFn) (*ListTeamInvitationResponse, error)

	// CreateTeamInvitationsWithBodyWithResponse request with any body
	CreateTeamInvitationsWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamInvitationsResponse, error)

	CreateTeamInvitationsWithResponse(ctx context.Context, teamId TeamId, body CreateTeamInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamInvitationsResponse, error)

	// DeleteTeamInvitationWithResponse request
	DeleteTeamInvitationWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, reqEditors ...RequestEditorFn) (*DeleteTeamInvitationResponse, error)

	// UpdateTeamInvitationWithBodyWithResponse request with any body
	UpdateTeamInvitationWithBodyWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamInvitationResponse, error)

	UpdateTeamInvitationWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, body UpdateTeamInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamInvitationResponse, error)

	// ListTeamMembershipsWithResponse request
	ListTeamMembershipsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamMembershipsParams, reqEditors ...RequestEditorFn) (*ListTeamMembershipsResponse, error)

	// CreateTeamMembershipWithBodyWithResponse request with any body
	CreateTeamMembershipWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamMembershipResponse, error)

	CreateTeamMembershipWithResponse(ctx context.Context, teamId TeamId, body CreateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamMembershipResponse, error)

	// DeleteTeamMembershipWithResponse request
	DeleteTeamMembershipWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, reqEditors ...RequestEditorFn) (*DeleteTeamMembershipResponse, error)

	// UpdateTeamMembershipWithBodyWithResponse request with any body
	UpdateTeamMembershipWithBodyWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamMembershipResponse, error)

	UpdateTeamMembershipWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, body UpdateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamMembershipResponse, error)

	// ListTeamRequestsWithResponse request
	ListTeamRequestsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamRequestsParams, reqEditors ...RequestEditorFn) (*ListTeamRequestsResponse, error)

	// CreateTeamRequestWithResponse request
	CreateTeamRequestWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*CreateTeamRequestResponse, error)

	// DeleteTeamRequestWithResponse request
	DeleteTeamRequestWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, reqEditors ...RequestEditorFn) (*DeleteTeamRequestResponse, error)

	// AcceptTeamRequestWithBodyWithResponse request with any body
	AcceptTeamRequestWithBodyWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptTeamRequestResponse, error)

	AcceptTeamRequestWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, body AcceptTeamRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptTeamRequestResponse, error)
}

type ListApiTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiTokenDetails
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r ListApiTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApiTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SelfDeleteApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r SelfDeleteApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SelfDeleteApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SelfRetrieveApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiTokenDetails
	JSON401      *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r SelfRetrieveApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SelfRetrieveApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveApiTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiTokenDetails
	JSON401      *UnauthorizedError
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r RetrieveApiTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveApiTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuditLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuditLog
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListAuditLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicJwtCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Token JWT
		Token *string `json:"token,omitempty"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
}

// Status returns HTTPResponse.Status
func (r PublicJwtCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicJwtCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Detail API key status.
		Detail string `json:"detail"`
	}
	JSON401 *UnauthorizedError
	JSON503 *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHoneytokenLabelKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteHoneytokenLabelKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHoneytokenLabelKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHoneytokenLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HoneyTokenLabel
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListHoneytokenLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHoneytokenLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchHoneytokenLabelKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r PatchHoneytokenLabelKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchHoneytokenLabelKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHoneytokenLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HoneyTokenLabel
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateHoneytokenLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHoneytokenLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHoneytokenLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteHoneytokenLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHoneytokenLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchHoneytokenLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r PatchHoneytokenLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchHoneytokenLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHoneytokenNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HoneyTokenNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListHoneytokenNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHoneytokenNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHoneytokenNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HoneyTokenNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateHoneytokenNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHoneytokenNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHoneytokenNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteHoneytokenNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHoneytokenNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHoneytokenNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HoneyTokenNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateHoneytokenNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHoneytokenNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ResetHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeHoneytokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Honeytoken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RevokeHoneytokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeHoneytokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHoneytokenSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HoneyTokenSource
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListHoneytokenSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHoneytokenSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListHoneytokensEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HoneyTokenEvent
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListHoneytokensEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListHoneytokensEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiffScanIacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IacDiffScanResult
	JSON400      *BadRequestError
	JSON500      *ScanningError
}

// Status returns HTTPResponse.Status
func (r DiffScanIacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiffScanIacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScanIacResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IacScanResult
	JSON400      *BadRequestError
	JSON500      *ScanningError
}

// Status returns HTTPResponse.Status
func (r ScanIacResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScanIacResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSecretIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSecretIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSecretIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r AssignIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GrantAccessIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r GrantAccessIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GrantAccessIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IgnoreIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r IgnoreIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IgnoreIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentInvitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListIncidentInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveIncidentsLeaksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Name   *string `json:"name,omitempty"`
		Source *string `json:"source,omitempty"`
		Url    *string `json:"url,omitempty"`
	}
	JSON401 *UnauthorizedError
	JSON404 *Error
	JSON503 *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveIncidentsLeaksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveIncidentsLeaksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentMember
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListIncidentMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListIncidentNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncidentNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IncidentNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateIncidentNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncidentNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncidentNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentNote
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateIncidentNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncidentNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReopenIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ReopenIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReopenIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResolveIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ResolveIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResolveIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeAccessIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RevokeAccessIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeAccessIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShareIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentToken
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ShareIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShareIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncidentTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentTeam
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListIncidentTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncidentTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UnassignIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnshareIncidentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UnshareIncidentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnshareIncidentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Invitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Invitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Detail Details on response.
		Detail *string `json:"detail,omitempty"`
	}
	JSON400 *BadRequestError
	JSON401 *UnauthorizedError
	JSON403 *Error
	JSON404 *Error
	JSON429 *Error
	JSON503 *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ResendInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Member
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Member
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Member
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMemberTeamMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TeamMembership
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListMemberTeamMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMemberTeamMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMemberTeamRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TeamRequest
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListMemberTeamRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMemberTeamRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMemberTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListMemberTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMemberTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MultipleScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScanResult
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *OverQuotaError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r MultipleScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MultipleScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOccsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VcsOccurrence
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListOccsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOccsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quota
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r QuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComputeScaFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PotentialSiblings *[]string `json:"potential_siblings,omitempty"`
		ScaFiles          *[]string `json:"sca_files,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeScaFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeScaFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaScanAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		FoundPackageVulns *[]LocationOutputSchema `json:"found_package_vulns,omitempty"`
		ScannedFiles      *[]string               `json:"scanned_files,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ScaScanAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaScanAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScaScanDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddedVulns   *[]LocationOutputSchema `json:"added_vulns,omitempty"`
		RemovedVulns *[]LocationOutputSchema `json:"removed_vulns,omitempty"`
		ScannedFiles *[]string               `json:"scanned_files,omitempty"`
	}
	JSON400 *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ScaScanDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScaScanDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContentScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScanResult
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *OverQuotaError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ContentScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContentScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSecretDetectorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DetectorGroup
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListSecretDetectorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSecretDetectorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretDetectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetectorGroup
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretDetectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretDetectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Source
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Source
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *Error
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r RetrieveTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IncidentWithoutOccurrences
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Source
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TeamInvitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamInvitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamInvitation
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TeamMembership
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamMembership
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMembership
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r UpdateTeamMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTeamRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TeamRequest
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r ListTeamRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTeamRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamRequest
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON409      *ConflictError
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r CreateTeamRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTeamRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptTeamRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMembership
	JSON400      *BadRequestError
	JSON401      *UnauthorizedError
	JSON403      *PermissionDeniedError
	JSON404      *Error
	JSON503      *MaintenanceResponse
}

// Status returns HTTPResponse.Status
func (r AcceptTeamRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptTeamRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListApiTokensWithResponse request returning *ListApiTokensResponse
func (c *ClientWithResponses) ListApiTokensWithResponse(ctx context.Context, params *ListApiTokensParams, reqEditors ...RequestEditorFn) (*ListApiTokensResponse, error) {
	rsp, err := c.ListApiTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApiTokensResponse(rsp)
}

// SelfDeleteApiTokenWithResponse request returning *SelfDeleteApiTokenResponse
func (c *ClientWithResponses) SelfDeleteApiTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SelfDeleteApiTokenResponse, error) {
	rsp, err := c.SelfDeleteApiToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSelfDeleteApiTokenResponse(rsp)
}

// SelfRetrieveApiTokenWithResponse request returning *SelfRetrieveApiTokenResponse
func (c *ClientWithResponses) SelfRetrieveApiTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SelfRetrieveApiTokenResponse, error) {
	rsp, err := c.SelfRetrieveApiToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSelfRetrieveApiTokenResponse(rsp)
}

// DeleteApiTokenWithResponse request returning *DeleteApiTokenResponse
func (c *ClientWithResponses) DeleteApiTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*DeleteApiTokenResponse, error) {
	rsp, err := c.DeleteApiToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiTokenResponse(rsp)
}

// RetrieveApiTokenWithResponse request returning *RetrieveApiTokenResponse
func (c *ClientWithResponses) RetrieveApiTokenWithResponse(ctx context.Context, tokenId string, reqEditors ...RequestEditorFn) (*RetrieveApiTokenResponse, error) {
	rsp, err := c.RetrieveApiToken(ctx, tokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveApiTokenResponse(rsp)
}

// ListAuditLogsWithResponse request returning *ListAuditLogsResponse
func (c *ClientWithResponses) ListAuditLogsWithResponse(ctx context.Context, params *ListAuditLogsParams, reqEditors ...RequestEditorFn) (*ListAuditLogsResponse, error) {
	rsp, err := c.ListAuditLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuditLogsResponse(rsp)
}

// PublicJwtCreateWithBodyWithResponse request with arbitrary body returning *PublicJwtCreateResponse
func (c *ClientWithResponses) PublicJwtCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicJwtCreateResponse, error) {
	rsp, err := c.PublicJwtCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicJwtCreateResponse(rsp)
}

func (c *ClientWithResponses) PublicJwtCreateWithResponse(ctx context.Context, body PublicJwtCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicJwtCreateResponse, error) {
	rsp, err := c.PublicJwtCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicJwtCreateResponse(rsp)
}

// HealthCheckWithResponse request returning *HealthCheckResponse
func (c *ClientWithResponses) HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthCheckResponse, error) {
	rsp, err := c.HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthCheckResponse(rsp)
}

// ListHoneytokenWithResponse request returning *ListHoneytokenResponse
func (c *ClientWithResponses) ListHoneytokenWithResponse(ctx context.Context, params *ListHoneytokenParams, reqEditors ...RequestEditorFn) (*ListHoneytokenResponse, error) {
	rsp, err := c.ListHoneytoken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHoneytokenResponse(rsp)
}

// CreateHoneytokenWithBodyWithResponse request with arbitrary body returning *CreateHoneytokenResponse
func (c *ClientWithResponses) CreateHoneytokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenResponse, error) {
	rsp, err := c.CreateHoneytokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenResponse(rsp)
}

func (c *ClientWithResponses) CreateHoneytokenWithResponse(ctx context.Context, body CreateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenResponse, error) {
	rsp, err := c.CreateHoneytoken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenResponse(rsp)
}

// DeleteHoneytokenLabelKeyWithResponse request returning *DeleteHoneytokenLabelKeyResponse
func (c *ClientWithResponses) DeleteHoneytokenLabelKeyWithResponse(ctx context.Context, params *DeleteHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*DeleteHoneytokenLabelKeyResponse, error) {
	rsp, err := c.DeleteHoneytokenLabelKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHoneytokenLabelKeyResponse(rsp)
}

// ListHoneytokenLabelsWithResponse request returning *ListHoneytokenLabelsResponse
func (c *ClientWithResponses) ListHoneytokenLabelsWithResponse(ctx context.Context, params *ListHoneytokenLabelsParams, reqEditors ...RequestEditorFn) (*ListHoneytokenLabelsResponse, error) {
	rsp, err := c.ListHoneytokenLabels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHoneytokenLabelsResponse(rsp)
}

// PatchHoneytokenLabelKeyWithResponse request returning *PatchHoneytokenLabelKeyResponse
func (c *ClientWithResponses) PatchHoneytokenLabelKeyWithResponse(ctx context.Context, params *PatchHoneytokenLabelKeyParams, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelKeyResponse, error) {
	rsp, err := c.PatchHoneytokenLabelKey(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchHoneytokenLabelKeyResponse(rsp)
}

// CreateHoneytokenLabelWithBodyWithResponse request with arbitrary body returning *CreateHoneytokenLabelResponse
func (c *ClientWithResponses) CreateHoneytokenLabelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenLabelResponse, error) {
	rsp, err := c.CreateHoneytokenLabelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenLabelResponse(rsp)
}

func (c *ClientWithResponses) CreateHoneytokenLabelWithResponse(ctx context.Context, body CreateHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenLabelResponse, error) {
	rsp, err := c.CreateHoneytokenLabel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenLabelResponse(rsp)
}

// DeleteHoneytokenLabelWithResponse request returning *DeleteHoneytokenLabelResponse
func (c *ClientWithResponses) DeleteHoneytokenLabelWithResponse(ctx context.Context, labelId string, reqEditors ...RequestEditorFn) (*DeleteHoneytokenLabelResponse, error) {
	rsp, err := c.DeleteHoneytokenLabel(ctx, labelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHoneytokenLabelResponse(rsp)
}

// PatchHoneytokenLabelWithBodyWithResponse request with arbitrary body returning *PatchHoneytokenLabelResponse
func (c *ClientWithResponses) PatchHoneytokenLabelWithBodyWithResponse(ctx context.Context, labelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelResponse, error) {
	rsp, err := c.PatchHoneytokenLabelWithBody(ctx, labelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchHoneytokenLabelResponse(rsp)
}

func (c *ClientWithResponses) PatchHoneytokenLabelWithResponse(ctx context.Context, labelId string, body PatchHoneytokenLabelJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchHoneytokenLabelResponse, error) {
	rsp, err := c.PatchHoneytokenLabel(ctx, labelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchHoneytokenLabelResponse(rsp)
}

// RetrieveHoneytokenWithResponse request returning *RetrieveHoneytokenResponse
func (c *ClientWithResponses) RetrieveHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *RetrieveHoneytokenParams, reqEditors ...RequestEditorFn) (*RetrieveHoneytokenResponse, error) {
	rsp, err := c.RetrieveHoneytoken(ctx, honeytokenId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveHoneytokenResponse(rsp)
}

// UpdateHoneytokenWithBodyWithResponse request with arbitrary body returning *UpdateHoneytokenResponse
func (c *ClientWithResponses) UpdateHoneytokenWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHoneytokenResponse, error) {
	rsp, err := c.UpdateHoneytokenWithBody(ctx, honeytokenId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHoneytokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, body UpdateHoneytokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHoneytokenResponse, error) {
	rsp, err := c.UpdateHoneytoken(ctx, honeytokenId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHoneytokenResponse(rsp)
}

// ListHoneytokenNotesWithResponse request returning *ListHoneytokenNotesResponse
func (c *ClientWithResponses) ListHoneytokenNotesWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenNotesParams, reqEditors ...RequestEditorFn) (*ListHoneytokenNotesResponse, error) {
	rsp, err := c.ListHoneytokenNotes(ctx, honeytokenId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHoneytokenNotesResponse(rsp)
}

// CreateHoneytokenNoteWithBodyWithResponse request with arbitrary body returning *CreateHoneytokenNoteResponse
func (c *ClientWithResponses) CreateHoneytokenNoteWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHoneytokenNoteResponse, error) {
	rsp, err := c.CreateHoneytokenNoteWithBody(ctx, honeytokenId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenNoteResponse(rsp)
}

func (c *ClientWithResponses) CreateHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, body CreateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHoneytokenNoteResponse, error) {
	rsp, err := c.CreateHoneytokenNote(ctx, honeytokenId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHoneytokenNoteResponse(rsp)
}

// DeleteHoneytokenNoteWithResponse request returning *DeleteHoneytokenNoteResponse
func (c *ClientWithResponses) DeleteHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteHoneytokenNoteResponse, error) {
	rsp, err := c.DeleteHoneytokenNote(ctx, honeytokenId, noteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHoneytokenNoteResponse(rsp)
}

// UpdateHoneytokenNoteWithBodyWithResponse request with arbitrary body returning *UpdateHoneytokenNoteResponse
func (c *ClientWithResponses) UpdateHoneytokenNoteWithBodyWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHoneytokenNoteResponse, error) {
	rsp, err := c.UpdateHoneytokenNoteWithBody(ctx, honeytokenId, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHoneytokenNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateHoneytokenNoteWithResponse(ctx context.Context, honeytokenId HoneytokenId, noteId openapi_types.UUID, body UpdateHoneytokenNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHoneytokenNoteResponse, error) {
	rsp, err := c.UpdateHoneytokenNote(ctx, honeytokenId, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHoneytokenNoteResponse(rsp)
}

// ResetHoneytokenWithResponse request returning *ResetHoneytokenResponse
func (c *ClientWithResponses) ResetHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*ResetHoneytokenResponse, error) {
	rsp, err := c.ResetHoneytoken(ctx, honeytokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetHoneytokenResponse(rsp)
}

// RevokeHoneytokenWithResponse request returning *RevokeHoneytokenResponse
func (c *ClientWithResponses) RevokeHoneytokenWithResponse(ctx context.Context, honeytokenId HoneytokenId, reqEditors ...RequestEditorFn) (*RevokeHoneytokenResponse, error) {
	rsp, err := c.RevokeHoneytoken(ctx, honeytokenId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeHoneytokenResponse(rsp)
}

// ListHoneytokenSourcesWithResponse request returning *ListHoneytokenSourcesResponse
func (c *ClientWithResponses) ListHoneytokenSourcesWithResponse(ctx context.Context, honeytokenId HoneytokenId, params *ListHoneytokenSourcesParams, reqEditors ...RequestEditorFn) (*ListHoneytokenSourcesResponse, error) {
	rsp, err := c.ListHoneytokenSources(ctx, honeytokenId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHoneytokenSourcesResponse(rsp)
}

// ListHoneytokensEventsWithResponse request returning *ListHoneytokensEventsResponse
func (c *ClientWithResponses) ListHoneytokensEventsWithResponse(ctx context.Context, params *ListHoneytokensEventsParams, reqEditors ...RequestEditorFn) (*ListHoneytokensEventsResponse, error) {
	rsp, err := c.ListHoneytokensEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListHoneytokensEventsResponse(rsp)
}

// DiffScanIacWithBodyWithResponse request with arbitrary body returning *DiffScanIacResponse
func (c *ClientWithResponses) DiffScanIacWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiffScanIacResponse, error) {
	rsp, err := c.DiffScanIacWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffScanIacResponse(rsp)
}

func (c *ClientWithResponses) DiffScanIacWithResponse(ctx context.Context, body DiffScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*DiffScanIacResponse, error) {
	rsp, err := c.DiffScanIac(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiffScanIacResponse(rsp)
}

// ScanIacWithBodyWithResponse request with arbitrary body returning *ScanIacResponse
func (c *ClientWithResponses) ScanIacWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScanIacResponse, error) {
	rsp, err := c.ScanIacWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanIacResponse(rsp)
}

func (c *ClientWithResponses) ScanIacWithResponse(ctx context.Context, body ScanIacJSONRequestBody, reqEditors ...RequestEditorFn) (*ScanIacResponse, error) {
	rsp, err := c.ScanIac(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanIacResponse(rsp)
}

// ListIncidentsWithResponse request returning *ListIncidentsResponse
func (c *ClientWithResponses) ListIncidentsWithResponse(ctx context.Context, params *ListIncidentsParams, reqEditors ...RequestEditorFn) (*ListIncidentsResponse, error) {
	rsp, err := c.ListIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentsResponse(rsp)
}

// RetrieveIncidentsWithResponse request returning *RetrieveIncidentsResponse
func (c *ClientWithResponses) RetrieveIncidentsWithResponse(ctx context.Context, incidentId IncidentId, params *RetrieveIncidentsParams, reqEditors ...RequestEditorFn) (*RetrieveIncidentsResponse, error) {
	rsp, err := c.RetrieveIncidents(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveIncidentsResponse(rsp)
}

// UpdateSecretIncidentWithBodyWithResponse request with arbitrary body returning *UpdateSecretIncidentResponse
func (c *ClientWithResponses) UpdateSecretIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSecretIncidentResponse, error) {
	rsp, err := c.UpdateSecretIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretIncidentResponse(rsp)
}

func (c *ClientWithResponses) UpdateSecretIncidentWithResponse(ctx context.Context, incidentId IncidentId, body UpdateSecretIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSecretIncidentResponse, error) {
	rsp, err := c.UpdateSecretIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSecretIncidentResponse(rsp)
}

// AssignIncidentWithBodyWithResponse request with arbitrary body returning *AssignIncidentResponse
func (c *ClientWithResponses) AssignIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignIncidentResponse, error) {
	rsp, err := c.AssignIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignIncidentResponse(rsp)
}

func (c *ClientWithResponses) AssignIncidentWithResponse(ctx context.Context, incidentId IncidentId, body AssignIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignIncidentResponse, error) {
	rsp, err := c.AssignIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignIncidentResponse(rsp)
}

// GrantAccessIncidentWithBodyWithResponse request with arbitrary body returning *GrantAccessIncidentResponse
func (c *ClientWithResponses) GrantAccessIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GrantAccessIncidentResponse, error) {
	rsp, err := c.GrantAccessIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrantAccessIncidentResponse(rsp)
}

func (c *ClientWithResponses) GrantAccessIncidentWithResponse(ctx context.Context, incidentId IncidentId, body GrantAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*GrantAccessIncidentResponse, error) {
	rsp, err := c.GrantAccessIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGrantAccessIncidentResponse(rsp)
}

// IgnoreIncidentWithBodyWithResponse request with arbitrary body returning *IgnoreIncidentResponse
func (c *ClientWithResponses) IgnoreIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IgnoreIncidentResponse, error) {
	rsp, err := c.IgnoreIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIgnoreIncidentResponse(rsp)
}

func (c *ClientWithResponses) IgnoreIncidentWithResponse(ctx context.Context, incidentId IncidentId, body IgnoreIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*IgnoreIncidentResponse, error) {
	rsp, err := c.IgnoreIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIgnoreIncidentResponse(rsp)
}

// ListIncidentInvitationsWithResponse request returning *ListIncidentInvitationsResponse
func (c *ClientWithResponses) ListIncidentInvitationsWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentInvitationsParams, reqEditors ...RequestEditorFn) (*ListIncidentInvitationsResponse, error) {
	rsp, err := c.ListIncidentInvitations(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentInvitationsResponse(rsp)
}

// RetrieveIncidentsLeaksWithResponse request returning *RetrieveIncidentsLeaksResponse
func (c *ClientWithResponses) RetrieveIncidentsLeaksWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*RetrieveIncidentsLeaksResponse, error) {
	rsp, err := c.RetrieveIncidentsLeaks(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveIncidentsLeaksResponse(rsp)
}

// ListIncidentMembersWithResponse request returning *ListIncidentMembersResponse
func (c *ClientWithResponses) ListIncidentMembersWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentMembersParams, reqEditors ...RequestEditorFn) (*ListIncidentMembersResponse, error) {
	rsp, err := c.ListIncidentMembers(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentMembersResponse(rsp)
}

// ListIncidentNotesWithResponse request returning *ListIncidentNotesResponse
func (c *ClientWithResponses) ListIncidentNotesWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentNotesParams, reqEditors ...RequestEditorFn) (*ListIncidentNotesResponse, error) {
	rsp, err := c.ListIncidentNotes(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentNotesResponse(rsp)
}

// CreateIncidentNoteWithBodyWithResponse request with arbitrary body returning *CreateIncidentNoteResponse
func (c *ClientWithResponses) CreateIncidentNoteWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncidentNoteResponse, error) {
	rsp, err := c.CreateIncidentNoteWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentNoteResponse(rsp)
}

func (c *ClientWithResponses) CreateIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, body CreateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIncidentNoteResponse, error) {
	rsp, err := c.CreateIncidentNote(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncidentNoteResponse(rsp)
}

// DeleteIncidentNoteWithResponse request returning *DeleteIncidentNoteResponse
func (c *ClientWithResponses) DeleteIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, noteId int, reqEditors ...RequestEditorFn) (*DeleteIncidentNoteResponse, error) {
	rsp, err := c.DeleteIncidentNote(ctx, incidentId, noteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentNoteResponse(rsp)
}

// UpdateIncidentNoteWithBodyWithResponse request with arbitrary body returning *UpdateIncidentNoteResponse
func (c *ClientWithResponses) UpdateIncidentNoteWithBodyWithResponse(ctx context.Context, incidentId IncidentId, noteId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncidentNoteResponse, error) {
	rsp, err := c.UpdateIncidentNoteWithBody(ctx, incidentId, noteId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateIncidentNoteWithResponse(ctx context.Context, incidentId IncidentId, noteId int, body UpdateIncidentNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIncidentNoteResponse, error) {
	rsp, err := c.UpdateIncidentNote(ctx, incidentId, noteId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncidentNoteResponse(rsp)
}

// ReopenIncidentWithResponse request returning *ReopenIncidentResponse
func (c *ClientWithResponses) ReopenIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*ReopenIncidentResponse, error) {
	rsp, err := c.ReopenIncident(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReopenIncidentResponse(rsp)
}

// ResolveIncidentWithBodyWithResponse request with arbitrary body returning *ResolveIncidentResponse
func (c *ClientWithResponses) ResolveIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

func (c *ClientWithResponses) ResolveIncidentWithResponse(ctx context.Context, incidentId IncidentId, body ResolveIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*ResolveIncidentResponse, error) {
	rsp, err := c.ResolveIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResolveIncidentResponse(rsp)
}

// RevokeAccessIncidentWithBodyWithResponse request with arbitrary body returning *RevokeAccessIncidentResponse
func (c *ClientWithResponses) RevokeAccessIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RevokeAccessIncidentResponse, error) {
	rsp, err := c.RevokeAccessIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeAccessIncidentResponse(rsp)
}

func (c *ClientWithResponses) RevokeAccessIncidentWithResponse(ctx context.Context, incidentId IncidentId, body RevokeAccessIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*RevokeAccessIncidentResponse, error) {
	rsp, err := c.RevokeAccessIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeAccessIncidentResponse(rsp)
}

// ShareIncidentWithBodyWithResponse request with arbitrary body returning *ShareIncidentResponse
func (c *ClientWithResponses) ShareIncidentWithBodyWithResponse(ctx context.Context, incidentId IncidentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ShareIncidentResponse, error) {
	rsp, err := c.ShareIncidentWithBody(ctx, incidentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareIncidentResponse(rsp)
}

func (c *ClientWithResponses) ShareIncidentWithResponse(ctx context.Context, incidentId IncidentId, body ShareIncidentJSONRequestBody, reqEditors ...RequestEditorFn) (*ShareIncidentResponse, error) {
	rsp, err := c.ShareIncident(ctx, incidentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShareIncidentResponse(rsp)
}

// ListIncidentTeamsWithResponse request returning *ListIncidentTeamsResponse
func (c *ClientWithResponses) ListIncidentTeamsWithResponse(ctx context.Context, incidentId IncidentId, params *ListIncidentTeamsParams, reqEditors ...RequestEditorFn) (*ListIncidentTeamsResponse, error) {
	rsp, err := c.ListIncidentTeams(ctx, incidentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncidentTeamsResponse(rsp)
}

// UnassignIncidentWithResponse request returning *UnassignIncidentResponse
func (c *ClientWithResponses) UnassignIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*UnassignIncidentResponse, error) {
	rsp, err := c.UnassignIncident(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignIncidentResponse(rsp)
}

// UnshareIncidentWithResponse request returning *UnshareIncidentResponse
func (c *ClientWithResponses) UnshareIncidentWithResponse(ctx context.Context, incidentId IncidentId, reqEditors ...RequestEditorFn) (*UnshareIncidentResponse, error) {
	rsp, err := c.UnshareIncident(ctx, incidentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnshareIncidentResponse(rsp)
}

// ListInvitationsWithResponse request returning *ListInvitationsResponse
func (c *ClientWithResponses) ListInvitationsWithResponse(ctx context.Context, params *ListInvitationsParams, reqEditors ...RequestEditorFn) (*ListInvitationsResponse, error) {
	rsp, err := c.ListInvitations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvitationsResponse(rsp)
}

// CreateInvitationsWithBodyWithResponse request with arbitrary body returning *CreateInvitationsResponse
func (c *ClientWithResponses) CreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvitationsResponse, error) {
	rsp, err := c.CreateInvitationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationsResponse(rsp)
}

func (c *ClientWithResponses) CreateInvitationsWithResponse(ctx context.Context, body CreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvitationsResponse, error) {
	rsp, err := c.CreateInvitations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationsResponse(rsp)
}

// DeleteInvitationWithResponse request returning *DeleteInvitationResponse
func (c *ClientWithResponses) DeleteInvitationWithResponse(ctx context.Context, invitationId InvitationId, reqEditors ...RequestEditorFn) (*DeleteInvitationResponse, error) {
	rsp, err := c.DeleteInvitation(ctx, invitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvitationResponse(rsp)
}

// ResendInvitationWithBodyWithResponse request with arbitrary body returning *ResendInvitationResponse
func (c *ClientWithResponses) ResendInvitationWithBodyWithResponse(ctx context.Context, invitationId InvitationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResendInvitationResponse, error) {
	rsp, err := c.ResendInvitationWithBody(ctx, invitationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendInvitationResponse(rsp)
}

func (c *ClientWithResponses) ResendInvitationWithResponse(ctx context.Context, invitationId InvitationId, body ResendInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*ResendInvitationResponse, error) {
	rsp, err := c.ResendInvitation(ctx, invitationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendInvitationResponse(rsp)
}

// ListMembersWithResponse request returning *ListMembersResponse
func (c *ClientWithResponses) ListMembersWithResponse(ctx context.Context, params *ListMembersParams, reqEditors ...RequestEditorFn) (*ListMembersResponse, error) {
	rsp, err := c.ListMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMembersResponse(rsp)
}

// DeleteMemberWithResponse request returning *DeleteMemberResponse
func (c *ClientWithResponses) DeleteMemberWithResponse(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*DeleteMemberResponse, error) {
	rsp, err := c.DeleteMember(ctx, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMemberResponse(rsp)
}

// RetrieveMemberWithResponse request returning *RetrieveMemberResponse
func (c *ClientWithResponses) RetrieveMemberWithResponse(ctx context.Context, memberId MemberId, reqEditors ...RequestEditorFn) (*RetrieveMemberResponse, error) {
	rsp, err := c.RetrieveMember(ctx, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveMemberResponse(rsp)
}

// UpdateMemberWithBodyWithResponse request with arbitrary body returning *UpdateMemberResponse
func (c *ClientWithResponses) UpdateMemberWithBodyWithResponse(ctx context.Context, memberId MemberId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error) {
	rsp, err := c.UpdateMemberWithBody(ctx, memberId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemberResponse(rsp)
}

func (c *ClientWithResponses) UpdateMemberWithResponse(ctx context.Context, memberId MemberId, body UpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error) {
	rsp, err := c.UpdateMember(ctx, memberId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemberResponse(rsp)
}

// ListMemberTeamMembershipsWithResponse request returning *ListMemberTeamMembershipsResponse
func (c *ClientWithResponses) ListMemberTeamMembershipsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamMembershipsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamMembershipsResponse, error) {
	rsp, err := c.ListMemberTeamMemberships(ctx, memberId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMemberTeamMembershipsResponse(rsp)
}

// ListMemberTeamRequestsWithResponse request returning *ListMemberTeamRequestsResponse
func (c *ClientWithResponses) ListMemberTeamRequestsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamRequestsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamRequestsResponse, error) {
	rsp, err := c.ListMemberTeamRequests(ctx, memberId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMemberTeamRequestsResponse(rsp)
}

// ListMemberTeamsWithResponse request returning *ListMemberTeamsResponse
func (c *ClientWithResponses) ListMemberTeamsWithResponse(ctx context.Context, memberId MemberId, params *ListMemberTeamsParams, reqEditors ...RequestEditorFn) (*ListMemberTeamsResponse, error) {
	rsp, err := c.ListMemberTeams(ctx, memberId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMemberTeamsResponse(rsp)
}

// MultipleScanWithBodyWithResponse request with arbitrary body returning *MultipleScanResponse
func (c *ClientWithResponses) MultipleScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MultipleScanResponse, error) {
	rsp, err := c.MultipleScanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultipleScanResponse(rsp)
}

func (c *ClientWithResponses) MultipleScanWithResponse(ctx context.Context, body MultipleScanJSONRequestBody, reqEditors ...RequestEditorFn) (*MultipleScanResponse, error) {
	rsp, err := c.MultipleScan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMultipleScanResponse(rsp)
}

// ListOccsWithResponse request returning *ListOccsResponse
func (c *ClientWithResponses) ListOccsWithResponse(ctx context.Context, params *ListOccsParams, reqEditors ...RequestEditorFn) (*ListOccsResponse, error) {
	rsp, err := c.ListOccs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOccsResponse(rsp)
}

// QuotasWithResponse request returning *QuotasResponse
func (c *ClientWithResponses) QuotasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*QuotasResponse, error) {
	rsp, err := c.Quotas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuotasResponse(rsp)
}

// ComputeScaFilesWithResponse request returning *ComputeScaFilesResponse
func (c *ClientWithResponses) ComputeScaFilesWithResponse(ctx context.Context, params *ComputeScaFilesParams, reqEditors ...RequestEditorFn) (*ComputeScaFilesResponse, error) {
	rsp, err := c.ComputeScaFiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeScaFilesResponse(rsp)
}

// ScaScanAllWithBodyWithResponse request with arbitrary body returning *ScaScanAllResponse
func (c *ClientWithResponses) ScaScanAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaScanAllResponse, error) {
	rsp, err := c.ScaScanAllWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaScanAllResponse(rsp)
}

// ScaScanDiffWithBodyWithResponse request with arbitrary body returning *ScaScanDiffResponse
func (c *ClientWithResponses) ScaScanDiffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScaScanDiffResponse, error) {
	rsp, err := c.ScaScanDiffWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScaScanDiffResponse(rsp)
}

// ContentScanWithBodyWithResponse request with arbitrary body returning *ContentScanResponse
func (c *ClientWithResponses) ContentScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContentScanResponse, error) {
	rsp, err := c.ContentScanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentScanResponse(rsp)
}

func (c *ClientWithResponses) ContentScanWithResponse(ctx context.Context, body ContentScanJSONRequestBody, reqEditors ...RequestEditorFn) (*ContentScanResponse, error) {
	rsp, err := c.ContentScan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContentScanResponse(rsp)
}

// ListSecretDetectorsWithResponse request returning *ListSecretDetectorsResponse
func (c *ClientWithResponses) ListSecretDetectorsWithResponse(ctx context.Context, params *ListSecretDetectorsParams, reqEditors ...RequestEditorFn) (*ListSecretDetectorsResponse, error) {
	rsp, err := c.ListSecretDetectors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSecretDetectorsResponse(rsp)
}

// GetSecretDetectorWithResponse request returning *GetSecretDetectorResponse
func (c *ClientWithResponses) GetSecretDetectorWithResponse(ctx context.Context, detectorName string, reqEditors ...RequestEditorFn) (*GetSecretDetectorResponse, error) {
	rsp, err := c.GetSecretDetector(ctx, detectorName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretDetectorResponse(rsp)
}

// ListSourcesWithResponse request returning *ListSourcesResponse
func (c *ClientWithResponses) ListSourcesWithResponse(ctx context.Context, params *ListSourcesParams, reqEditors ...RequestEditorFn) (*ListSourcesResponse, error) {
	rsp, err := c.ListSources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesResponse(rsp)
}

// RetrieveSourceWithResponse request returning *RetrieveSourceResponse
func (c *ClientWithResponses) RetrieveSourceWithResponse(ctx context.Context, sourceId int, reqEditors ...RequestEditorFn) (*RetrieveSourceResponse, error) {
	rsp, err := c.RetrieveSource(ctx, sourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSourceResponse(rsp)
}

// ListTeamsWithResponse request returning *ListTeamsResponse
func (c *ClientWithResponses) ListTeamsWithResponse(ctx context.Context, params *ListTeamsParams, reqEditors ...RequestEditorFn) (*ListTeamsResponse, error) {
	rsp, err := c.ListTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamsResponse(rsp)
}

// CreateTeamsWithBodyWithResponse request with arbitrary body returning *CreateTeamsResponse
func (c *ClientWithResponses) CreateTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamsResponse, error) {
	rsp, err := c.CreateTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamsResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamsWithResponse(ctx context.Context, body CreateTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamsResponse, error) {
	rsp, err := c.CreateTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamsResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// RetrieveTeamWithResponse request returning *RetrieveTeamResponse
func (c *ClientWithResponses) RetrieveTeamWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*RetrieveTeamResponse, error) {
	rsp, err := c.RetrieveTeam(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, teamId TeamId, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// ListTeamIncidentsWithResponse request returning *ListTeamIncidentsResponse
func (c *ClientWithResponses) ListTeamIncidentsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamIncidentsParams, reqEditors ...RequestEditorFn) (*ListTeamIncidentsResponse, error) {
	rsp, err := c.ListTeamIncidents(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamIncidentsResponse(rsp)
}

// ListTeamSourcesWithResponse request returning *ListTeamSourcesResponse
func (c *ClientWithResponses) ListTeamSourcesWithResponse(ctx context.Context, teamId TeamId, params *ListTeamSourcesParams, reqEditors ...RequestEditorFn) (*ListTeamSourcesResponse, error) {
	rsp, err := c.ListTeamSources(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamSourcesResponse(rsp)
}

// UpdateTeamSourcesWithBodyWithResponse request with arbitrary body returning *UpdateTeamSourcesResponse
func (c *ClientWithResponses) UpdateTeamSourcesWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamSourcesResponse, error) {
	rsp, err := c.UpdateTeamSourcesWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamSourcesResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamSourcesWithResponse(ctx context.Context, teamId TeamId, body UpdateTeamSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamSourcesResponse, error) {
	rsp, err := c.UpdateTeamSources(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamSourcesResponse(rsp)
}

// ListTeamInvitationWithResponse request returning *ListTeamInvitationResponse
func (c *ClientWithResponses) ListTeamInvitationWithResponse(ctx context.Context, teamId TeamId, params *ListTeamInvitationParams, reqEditors ...RequestEditorFn) (*ListTeamInvitationResponse, error) {
	rsp, err := c.ListTeamInvitation(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamInvitationResponse(rsp)
}

// CreateTeamInvitationsWithBodyWithResponse request with arbitrary body returning *CreateTeamInvitationsResponse
func (c *ClientWithResponses) CreateTeamInvitationsWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamInvitationsResponse, error) {
	rsp, err := c.CreateTeamInvitationsWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamInvitationsResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamInvitationsWithResponse(ctx context.Context, teamId TeamId, body CreateTeamInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamInvitationsResponse, error) {
	rsp, err := c.CreateTeamInvitations(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamInvitationsResponse(rsp)
}

// DeleteTeamInvitationWithResponse request returning *DeleteTeamInvitationResponse
func (c *ClientWithResponses) DeleteTeamInvitationWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, reqEditors ...RequestEditorFn) (*DeleteTeamInvitationResponse, error) {
	rsp, err := c.DeleteTeamInvitation(ctx, teamId, teamInvitationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamInvitationResponse(rsp)
}

// UpdateTeamInvitationWithBodyWithResponse request with arbitrary body returning *UpdateTeamInvitationResponse
func (c *ClientWithResponses) UpdateTeamInvitationWithBodyWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamInvitationResponse, error) {
	rsp, err := c.UpdateTeamInvitationWithBody(ctx, teamId, teamInvitationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamInvitationResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamInvitationWithResponse(ctx context.Context, teamId TeamId, teamInvitationId int, body UpdateTeamInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamInvitationResponse, error) {
	rsp, err := c.UpdateTeamInvitation(ctx, teamId, teamInvitationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamInvitationResponse(rsp)
}

// ListTeamMembershipsWithResponse request returning *ListTeamMembershipsResponse
func (c *ClientWithResponses) ListTeamMembershipsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamMembershipsParams, reqEditors ...RequestEditorFn) (*ListTeamMembershipsResponse, error) {
	rsp, err := c.ListTeamMemberships(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamMembershipsResponse(rsp)
}

// CreateTeamMembershipWithBodyWithResponse request with arbitrary body returning *CreateTeamMembershipResponse
func (c *ClientWithResponses) CreateTeamMembershipWithBodyWithResponse(ctx context.Context, teamId TeamId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamMembershipResponse, error) {
	rsp, err := c.CreateTeamMembershipWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamMembershipResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamMembershipWithResponse(ctx context.Context, teamId TeamId, body CreateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamMembershipResponse, error) {
	rsp, err := c.CreateTeamMembership(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamMembershipResponse(rsp)
}

// DeleteTeamMembershipWithResponse request returning *DeleteTeamMembershipResponse
func (c *ClientWithResponses) DeleteTeamMembershipWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, reqEditors ...RequestEditorFn) (*DeleteTeamMembershipResponse, error) {
	rsp, err := c.DeleteTeamMembership(ctx, teamId, teamMembershipId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamMembershipResponse(rsp)
}

// UpdateTeamMembershipWithBodyWithResponse request with arbitrary body returning *UpdateTeamMembershipResponse
func (c *ClientWithResponses) UpdateTeamMembershipWithBodyWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamMembershipResponse, error) {
	rsp, err := c.UpdateTeamMembershipWithBody(ctx, teamId, teamMembershipId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamMembershipResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamMembershipWithResponse(ctx context.Context, teamId TeamId, teamMembershipId int, body UpdateTeamMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamMembershipResponse, error) {
	rsp, err := c.UpdateTeamMembership(ctx, teamId, teamMembershipId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamMembershipResponse(rsp)
}

// ListTeamRequestsWithResponse request returning *ListTeamRequestsResponse
func (c *ClientWithResponses) ListTeamRequestsWithResponse(ctx context.Context, teamId TeamId, params *ListTeamRequestsParams, reqEditors ...RequestEditorFn) (*ListTeamRequestsResponse, error) {
	rsp, err := c.ListTeamRequests(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTeamRequestsResponse(rsp)
}

// CreateTeamRequestWithResponse request returning *CreateTeamRequestResponse
func (c *ClientWithResponses) CreateTeamRequestWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*CreateTeamRequestResponse, error) {
	rsp, err := c.CreateTeamRequest(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamRequestResponse(rsp)
}

// DeleteTeamRequestWithResponse request returning *DeleteTeamRequestResponse
func (c *ClientWithResponses) DeleteTeamRequestWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, reqEditors ...RequestEditorFn) (*DeleteTeamRequestResponse, error) {
	rsp, err := c.DeleteTeamRequest(ctx, teamId, teamRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamRequestResponse(rsp)
}

// AcceptTeamRequestWithBodyWithResponse request with arbitrary body returning *AcceptTeamRequestResponse
func (c *ClientWithResponses) AcceptTeamRequestWithBodyWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptTeamRequestResponse, error) {
	rsp, err := c.AcceptTeamRequestWithBody(ctx, teamId, teamRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptTeamRequestResponse(rsp)
}

func (c *ClientWithResponses) AcceptTeamRequestWithResponse(ctx context.Context, teamId TeamId, teamRequestId int, body AcceptTeamRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptTeamRequestResponse, error) {
	rsp, err := c.AcceptTeamRequest(ctx, teamId, teamRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptTeamRequestResponse(rsp)
}

// ParseListApiTokensResponse parses an HTTP response from a ListApiTokensWithResponse call
func ParseListApiTokensResponse(rsp *http.Response) (*ListApiTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApiTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiTokenDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSelfDeleteApiTokenResponse parses an HTTP response from a SelfDeleteApiTokenWithResponse call
func ParseSelfDeleteApiTokenResponse(rsp *http.Response) (*SelfDeleteApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SelfDeleteApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSelfRetrieveApiTokenResponse parses an HTTP response from a SelfRetrieveApiTokenWithResponse call
func ParseSelfRetrieveApiTokenResponse(rsp *http.Response) (*SelfRetrieveApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SelfRetrieveApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiTokenDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteApiTokenResponse parses an HTTP response from a DeleteApiTokenWithResponse call
func ParseDeleteApiTokenResponse(rsp *http.Response) (*DeleteApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveApiTokenResponse parses an HTTP response from a RetrieveApiTokenWithResponse call
func ParseRetrieveApiTokenResponse(rsp *http.Response) (*RetrieveApiTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveApiTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiTokenDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListAuditLogsResponse parses an HTTP response from a ListAuditLogsWithResponse call
func ParseListAuditLogsResponse(rsp *http.Response) (*ListAuditLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuditLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuditLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePublicJwtCreateResponse parses an HTTP response from a PublicJwtCreateWithResponse call
func ParsePublicJwtCreateResponse(rsp *http.Response) (*PublicJwtCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicJwtCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Token JWT
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseHealthCheckResponse parses an HTTP response from a HealthCheckWithResponse call
func ParseHealthCheckResponse(rsp *http.Response) (*HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Detail API key status.
			Detail string `json:"detail"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListHoneytokenResponse parses an HTTP response from a ListHoneytokenWithResponse call
func ParseListHoneytokenResponse(rsp *http.Response) (*ListHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateHoneytokenResponse parses an HTTP response from a CreateHoneytokenWithResponse call
func ParseCreateHoneytokenResponse(rsp *http.Response) (*CreateHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteHoneytokenLabelKeyResponse parses an HTTP response from a DeleteHoneytokenLabelKeyWithResponse call
func ParseDeleteHoneytokenLabelKeyResponse(rsp *http.Response) (*DeleteHoneytokenLabelKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHoneytokenLabelKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListHoneytokenLabelsResponse parses an HTTP response from a ListHoneytokenLabelsWithResponse call
func ParseListHoneytokenLabelsResponse(rsp *http.Response) (*ListHoneytokenLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHoneytokenLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HoneyTokenLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchHoneytokenLabelKeyResponse parses an HTTP response from a PatchHoneytokenLabelKeyWithResponse call
func ParsePatchHoneytokenLabelKeyResponse(rsp *http.Response) (*PatchHoneytokenLabelKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchHoneytokenLabelKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateHoneytokenLabelResponse parses an HTTP response from a CreateHoneytokenLabelWithResponse call
func ParseCreateHoneytokenLabelResponse(rsp *http.Response) (*CreateHoneytokenLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHoneytokenLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HoneyTokenLabel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteHoneytokenLabelResponse parses an HTTP response from a DeleteHoneytokenLabelWithResponse call
func ParseDeleteHoneytokenLabelResponse(rsp *http.Response) (*DeleteHoneytokenLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHoneytokenLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchHoneytokenLabelResponse parses an HTTP response from a PatchHoneytokenLabelWithResponse call
func ParsePatchHoneytokenLabelResponse(rsp *http.Response) (*PatchHoneytokenLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchHoneytokenLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveHoneytokenResponse parses an HTTP response from a RetrieveHoneytokenWithResponse call
func ParseRetrieveHoneytokenResponse(rsp *http.Response) (*RetrieveHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateHoneytokenResponse parses an HTTP response from a UpdateHoneytokenWithResponse call
func ParseUpdateHoneytokenResponse(rsp *http.Response) (*UpdateHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListHoneytokenNotesResponse parses an HTTP response from a ListHoneytokenNotesWithResponse call
func ParseListHoneytokenNotesResponse(rsp *http.Response) (*ListHoneytokenNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHoneytokenNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HoneyTokenNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateHoneytokenNoteResponse parses an HTTP response from a CreateHoneytokenNoteWithResponse call
func ParseCreateHoneytokenNoteResponse(rsp *http.Response) (*CreateHoneytokenNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHoneytokenNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HoneyTokenNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteHoneytokenNoteResponse parses an HTTP response from a DeleteHoneytokenNoteWithResponse call
func ParseDeleteHoneytokenNoteResponse(rsp *http.Response) (*DeleteHoneytokenNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHoneytokenNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateHoneytokenNoteResponse parses an HTTP response from a UpdateHoneytokenNoteWithResponse call
func ParseUpdateHoneytokenNoteResponse(rsp *http.Response) (*UpdateHoneytokenNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHoneytokenNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HoneyTokenNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseResetHoneytokenResponse parses an HTTP response from a ResetHoneytokenWithResponse call
func ParseResetHoneytokenResponse(rsp *http.Response) (*ResetHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRevokeHoneytokenResponse parses an HTTP response from a RevokeHoneytokenWithResponse call
func ParseRevokeHoneytokenResponse(rsp *http.Response) (*RevokeHoneytokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeHoneytokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Honeytoken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListHoneytokenSourcesResponse parses an HTTP response from a ListHoneytokenSourcesWithResponse call
func ParseListHoneytokenSourcesResponse(rsp *http.Response) (*ListHoneytokenSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHoneytokenSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HoneyTokenSource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListHoneytokensEventsResponse parses an HTTP response from a ListHoneytokensEventsWithResponse call
func ParseListHoneytokensEventsResponse(rsp *http.Response) (*ListHoneytokensEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListHoneytokensEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HoneyTokenEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDiffScanIacResponse parses an HTTP response from a DiffScanIacWithResponse call
func ParseDiffScanIacResponse(rsp *http.Response) (*DiffScanIacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiffScanIacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IacDiffScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ScanningError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseScanIacResponse parses an HTTP response from a ScanIacWithResponse call
func ParseScanIacResponse(rsp *http.Response) (*ScanIacResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScanIacResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IacScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ScanningError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListIncidentsResponse parses an HTTP response from a ListIncidentsWithResponse call
func ParseListIncidentsResponse(rsp *http.Response) (*ListIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveIncidentsResponse parses an HTTP response from a RetrieveIncidentsWithResponse call
func ParseRetrieveIncidentsResponse(rsp *http.Response) (*RetrieveIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateSecretIncidentResponse parses an HTTP response from a UpdateSecretIncidentWithResponse call
func ParseUpdateSecretIncidentResponse(rsp *http.Response) (*UpdateSecretIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSecretIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAssignIncidentResponse parses an HTTP response from a AssignIncidentWithResponse call
func ParseAssignIncidentResponse(rsp *http.Response) (*AssignIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGrantAccessIncidentResponse parses an HTTP response from a GrantAccessIncidentWithResponse call
func ParseGrantAccessIncidentResponse(rsp *http.Response) (*GrantAccessIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GrantAccessIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseIgnoreIncidentResponse parses an HTTP response from a IgnoreIncidentWithResponse call
func ParseIgnoreIncidentResponse(rsp *http.Response) (*IgnoreIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IgnoreIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListIncidentInvitationsResponse parses an HTTP response from a ListIncidentInvitationsWithResponse call
func ParseListIncidentInvitationsResponse(rsp *http.Response) (*ListIncidentInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveIncidentsLeaksResponse parses an HTTP response from a RetrieveIncidentsLeaksWithResponse call
func ParseRetrieveIncidentsLeaksResponse(rsp *http.Response) (*RetrieveIncidentsLeaksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveIncidentsLeaksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Name   *string `json:"name,omitempty"`
			Source *string `json:"source,omitempty"`
			Url    *string `json:"url,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListIncidentMembersResponse parses an HTTP response from a ListIncidentMembersWithResponse call
func ParseListIncidentMembersResponse(rsp *http.Response) (*ListIncidentMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListIncidentNotesResponse parses an HTTP response from a ListIncidentNotesWithResponse call
func ParseListIncidentNotesResponse(rsp *http.Response) (*ListIncidentNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateIncidentNoteResponse parses an HTTP response from a CreateIncidentNoteWithResponse call
func ParseCreateIncidentNoteResponse(rsp *http.Response) (*CreateIncidentNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncidentNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentNoteResponse parses an HTTP response from a DeleteIncidentNoteWithResponse call
func ParseDeleteIncidentNoteResponse(rsp *http.Response) (*DeleteIncidentNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateIncidentNoteResponse parses an HTTP response from a UpdateIncidentNoteWithResponse call
func ParseUpdateIncidentNoteResponse(rsp *http.Response) (*UpdateIncidentNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncidentNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseReopenIncidentResponse parses an HTTP response from a ReopenIncidentWithResponse call
func ParseReopenIncidentResponse(rsp *http.Response) (*ReopenIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReopenIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseResolveIncidentResponse parses an HTTP response from a ResolveIncidentWithResponse call
func ParseResolveIncidentResponse(rsp *http.Response) (*ResolveIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResolveIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRevokeAccessIncidentResponse parses an HTTP response from a RevokeAccessIncidentWithResponse call
func ParseRevokeAccessIncidentResponse(rsp *http.Response) (*RevokeAccessIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeAccessIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseShareIncidentResponse parses an HTTP response from a ShareIncidentWithResponse call
func ParseShareIncidentResponse(rsp *http.Response) (*ShareIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShareIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListIncidentTeamsResponse parses an HTTP response from a ListIncidentTeamsWithResponse call
func ParseListIncidentTeamsResponse(rsp *http.Response) (*ListIncidentTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncidentTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentTeam
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUnassignIncidentResponse parses an HTTP response from a UnassignIncidentWithResponse call
func ParseUnassignIncidentResponse(rsp *http.Response) (*UnassignIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUnshareIncidentResponse parses an HTTP response from a UnshareIncidentWithResponse call
func ParseUnshareIncidentResponse(rsp *http.Response) (*UnshareIncidentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnshareIncidentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListInvitationsResponse parses an HTTP response from a ListInvitationsWithResponse call
func ParseListInvitationsResponse(rsp *http.Response) (*ListInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Invitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateInvitationsResponse parses an HTTP response from a CreateInvitationsWithResponse call
func ParseCreateInvitationsResponse(rsp *http.Response) (*CreateInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Invitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteInvitationResponse parses an HTTP response from a DeleteInvitationWithResponse call
func ParseDeleteInvitationResponse(rsp *http.Response) (*DeleteInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseResendInvitationResponse parses an HTTP response from a ResendInvitationWithResponse call
func ParseResendInvitationResponse(rsp *http.Response) (*ResendInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResendInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Detail Details on response.
			Detail *string `json:"detail,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListMembersResponse parses an HTTP response from a ListMembersWithResponse call
func ParseListMembersResponse(rsp *http.Response) (*ListMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteMemberResponse parses an HTTP response from a DeleteMemberWithResponse call
func ParseDeleteMemberResponse(rsp *http.Response) (*DeleteMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveMemberResponse parses an HTTP response from a RetrieveMemberWithResponse call
func ParseRetrieveMemberResponse(rsp *http.Response) (*RetrieveMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateMemberResponse parses an HTTP response from a UpdateMemberWithResponse call
func ParseUpdateMemberResponse(rsp *http.Response) (*UpdateMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListMemberTeamMembershipsResponse parses an HTTP response from a ListMemberTeamMembershipsWithResponse call
func ParseListMemberTeamMembershipsResponse(rsp *http.Response) (*ListMemberTeamMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMemberTeamMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TeamMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListMemberTeamRequestsResponse parses an HTTP response from a ListMemberTeamRequestsWithResponse call
func ParseListMemberTeamRequestsResponse(rsp *http.Response) (*ListMemberTeamRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMemberTeamRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TeamRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListMemberTeamsResponse parses an HTTP response from a ListMemberTeamsWithResponse call
func ParseListMemberTeamsResponse(rsp *http.Response) (*ListMemberTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMemberTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseMultipleScanResponse parses an HTTP response from a MultipleScanWithResponse call
func ParseMultipleScanResponse(rsp *http.Response) (*MultipleScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MultipleScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest OverQuotaError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListOccsResponse parses an HTTP response from a ListOccsWithResponse call
func ParseListOccsResponse(rsp *http.Response) (*ListOccsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOccsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VcsOccurrence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseQuotasResponse parses an HTTP response from a QuotasWithResponse call
func ParseQuotasResponse(rsp *http.Response) (*QuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseComputeScaFilesResponse parses an HTTP response from a ComputeScaFilesWithResponse call
func ParseComputeScaFilesResponse(rsp *http.Response) (*ComputeScaFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeScaFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PotentialSiblings *[]string `json:"potential_siblings,omitempty"`
			ScaFiles          *[]string `json:"sca_files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScaScanAllResponse parses an HTTP response from a ScaScanAllWithResponse call
func ParseScaScanAllResponse(rsp *http.Response) (*ScaScanAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaScanAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			FoundPackageVulns *[]LocationOutputSchema `json:"found_package_vulns,omitempty"`
			ScannedFiles      *[]string               `json:"scanned_files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseScaScanDiffResponse parses an HTTP response from a ScaScanDiffWithResponse call
func ParseScaScanDiffResponse(rsp *http.Response) (*ScaScanDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScaScanDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddedVulns   *[]LocationOutputSchema `json:"added_vulns,omitempty"`
			RemovedVulns *[]LocationOutputSchema `json:"removed_vulns,omitempty"`
			ScannedFiles *[]string               `json:"scanned_files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseContentScanResponse parses an HTTP response from a ContentScanWithResponse call
func ParseContentScanResponse(rsp *http.Response) (*ContentScanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContentScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest OverQuotaError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListSecretDetectorsResponse parses an HTTP response from a ListSecretDetectorsWithResponse call
func ParseListSecretDetectorsResponse(rsp *http.Response) (*ListSecretDetectorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSecretDetectorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DetectorGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSecretDetectorResponse parses an HTTP response from a GetSecretDetectorWithResponse call
func ParseGetSecretDetectorResponse(rsp *http.Response) (*GetSecretDetectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretDetectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetectorGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListSourcesResponse parses an HTTP response from a ListSourcesWithResponse call
func ParseListSourcesResponse(rsp *http.Response) (*ListSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveSourceResponse parses an HTTP response from a RetrieveSourceWithResponse call
func ParseRetrieveSourceResponse(rsp *http.Response) (*RetrieveSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamsResponse parses an HTTP response from a ListTeamsWithResponse call
func ParseListTeamsResponse(rsp *http.Response) (*ListTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateTeamsResponse parses an HTTP response from a CreateTeamsWithResponse call
func ParseCreateTeamsResponse(rsp *http.Response) (*CreateTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRetrieveTeamResponse parses an HTTP response from a RetrieveTeamWithResponse call
func ParseRetrieveTeamResponse(rsp *http.Response) (*RetrieveTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamIncidentsResponse parses an HTTP response from a ListTeamIncidentsWithResponse call
func ParseListTeamIncidentsResponse(rsp *http.Response) (*ListTeamIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IncidentWithoutOccurrences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamSourcesResponse parses an HTTP response from a ListTeamSourcesWithResponse call
func ParseListTeamSourcesResponse(rsp *http.Response) (*ListTeamSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Source
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateTeamSourcesResponse parses an HTTP response from a UpdateTeamSourcesWithResponse call
func ParseUpdateTeamSourcesResponse(rsp *http.Response) (*UpdateTeamSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamInvitationResponse parses an HTTP response from a ListTeamInvitationWithResponse call
func ParseListTeamInvitationResponse(rsp *http.Response) (*ListTeamInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TeamInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateTeamInvitationsResponse parses an HTTP response from a CreateTeamInvitationsWithResponse call
func ParseCreateTeamInvitationsResponse(rsp *http.Response) (*CreateTeamInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTeamInvitationResponse parses an HTTP response from a DeleteTeamInvitationWithResponse call
func ParseDeleteTeamInvitationResponse(rsp *http.Response) (*DeleteTeamInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateTeamInvitationResponse parses an HTTP response from a UpdateTeamInvitationWithResponse call
func ParseUpdateTeamInvitationResponse(rsp *http.Response) (*UpdateTeamInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamInvitation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamMembershipsResponse parses an HTTP response from a ListTeamMembershipsWithResponse call
func ParseListTeamMembershipsResponse(rsp *http.Response) (*ListTeamMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TeamMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateTeamMembershipResponse parses an HTTP response from a CreateTeamMembershipWithResponse call
func ParseCreateTeamMembershipResponse(rsp *http.Response) (*CreateTeamMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTeamMembershipResponse parses an HTTP response from a DeleteTeamMembershipWithResponse call
func ParseDeleteTeamMembershipResponse(rsp *http.Response) (*DeleteTeamMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateTeamMembershipResponse parses an HTTP response from a UpdateTeamMembershipWithResponse call
func ParseUpdateTeamMembershipResponse(rsp *http.Response) (*UpdateTeamMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListTeamRequestsResponse parses an HTTP response from a ListTeamRequestsWithResponse call
func ParseListTeamRequestsResponse(rsp *http.Response) (*ListTeamRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTeamRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TeamRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateTeamRequestResponse parses an HTTP response from a CreateTeamRequestWithResponse call
func ParseCreateTeamRequestResponse(rsp *http.Response) (*CreateTeamRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTeamRequestResponse parses an HTTP response from a DeleteTeamRequestWithResponse call
func ParseDeleteTeamRequestResponse(rsp *http.Response) (*DeleteTeamRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAcceptTeamRequestResponse parses an HTTP response from a AcceptTeamRequestWithResponse call
func ParseAcceptTeamRequestResponse(rsp *http.Response) (*AcceptTeamRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptTeamRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDeniedError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest MaintenanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

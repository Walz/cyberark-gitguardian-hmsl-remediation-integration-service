// Package hasmysecretleaked provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package hasmysecretleaked

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// APILocation Stores the location of an occurrence
//
// should be stored via `.dict(by_alias=True)`
type APILocation struct {
	U string `json:"u"`
}

// EncryptedSecretResponse defines model for EncryptedSecretResponse.
type EncryptedSecretResponse struct {
	Hint    string             `json:"hint"`
	Payload openapi_types.File `json:"payload"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// HashesQuery defines model for HashesQuery.
type HashesQuery struct {
	Hashes *[]string `json:"hashes,omitempty"`
}

// HashesResponse defines model for HashesResponse.
type HashesResponse struct {
	Secrets []SecretResponse `json:"secrets"`
}

// PrefixesQuery defines model for PrefixesQuery.
type PrefixesQuery struct {
	Prefixes *[]string `json:"prefixes,omitempty"`
}

// PrefixesResponse defines model for PrefixesResponse.
type PrefixesResponse struct {
	Matches []EncryptedSecretResponse `json:"matches"`
}

// SecretResponse defines model for SecretResponse.
type SecretResponse struct {
	Count int    `json:"count"`
	Hash  string `json:"hash"`

	// Location Stores the location of an occurrence
	//
	// should be stored via `.dict(by_alias=True)`
	Location *APILocation `json:"location,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// BatchHashesV1HashesPostJSONRequestBody defines body for BatchHashesV1HashesPost for application/json ContentType.
type BatchHashesV1HashesPostJSONRequestBody = HashesQuery

// BatchPrefixesV1PrefixesPostJSONRequestBody defines body for BatchPrefixesV1PrefixesPost for application/json ContentType.
type BatchPrefixesV1PrefixesPostJSONRequestBody = PrefixesQuery

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// HealthzHealthzGet request
	HealthzHealthzGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadinessReadinessGet request
	ReadinessReadinessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchHashesV1HashesPostWithBody request with any body
	BatchHashesV1HashesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchHashesV1HashesPost(ctx context.Context, body BatchHashesV1HashesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecretV1PrefixPrefixGet request
	GetSecretV1PrefixPrefixGet(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchPrefixesV1PrefixesPostWithBody request with any body
	BatchPrefixesV1PrefixesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchPrefixesV1PrefixesPost(ctx context.Context, body BatchPrefixesV1PrefixesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) HealthzHealthzGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthzHealthzGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadinessReadinessGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadinessReadinessGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchHashesV1HashesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchHashesV1HashesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchHashesV1HashesPost(ctx context.Context, body BatchHashesV1HashesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchHashesV1HashesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecretV1PrefixPrefixGet(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretV1PrefixPrefixGetRequest(c.Server, prefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchPrefixesV1PrefixesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchPrefixesV1PrefixesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchPrefixesV1PrefixesPost(ctx context.Context, body BatchPrefixesV1PrefixesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchPrefixesV1PrefixesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHealthzHealthzGetRequest generates requests for HealthzHealthzGet
func NewHealthzHealthzGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/healthz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadinessReadinessGetRequest generates requests for ReadinessReadinessGet
func NewReadinessReadinessGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/readiness")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchHashesV1HashesPostRequest calls the generic BatchHashesV1HashesPost builder with application/json body
func NewBatchHashesV1HashesPostRequest(server string, body BatchHashesV1HashesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchHashesV1HashesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchHashesV1HashesPostRequestWithBody generates requests for BatchHashesV1HashesPost with any type of body
func NewBatchHashesV1HashesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/hashes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecretV1PrefixPrefixGetRequest generates requests for GetSecretV1PrefixPrefixGet
func NewGetSecretV1PrefixPrefixGetRequest(server string, prefix string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix", runtime.ParamLocationPath, prefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/prefix/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchPrefixesV1PrefixesPostRequest calls the generic BatchPrefixesV1PrefixesPost builder with application/json body
func NewBatchPrefixesV1PrefixesPostRequest(server string, body BatchPrefixesV1PrefixesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchPrefixesV1PrefixesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchPrefixesV1PrefixesPostRequestWithBody generates requests for BatchPrefixesV1PrefixesPost with any type of body
func NewBatchPrefixesV1PrefixesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/prefixes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// HealthzHealthzGetWithResponse request
	HealthzHealthzGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthzHealthzGetResponse, error)

	// ReadinessReadinessGetWithResponse request
	ReadinessReadinessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadinessReadinessGetResponse, error)

	// BatchHashesV1HashesPostWithBodyWithResponse request with any body
	BatchHashesV1HashesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchHashesV1HashesPostResponse, error)

	BatchHashesV1HashesPostWithResponse(ctx context.Context, body BatchHashesV1HashesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchHashesV1HashesPostResponse, error)

	// GetSecretV1PrefixPrefixGetWithResponse request
	GetSecretV1PrefixPrefixGetWithResponse(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*GetSecretV1PrefixPrefixGetResponse, error)

	// BatchPrefixesV1PrefixesPostWithBodyWithResponse request with any body
	BatchPrefixesV1PrefixesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchPrefixesV1PrefixesPostResponse, error)

	BatchPrefixesV1PrefixesPostWithResponse(ctx context.Context, body BatchPrefixesV1PrefixesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchPrefixesV1PrefixesPostResponse, error)
}

type HealthzHealthzGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r HealthzHealthzGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthzHealthzGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadinessReadinessGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ReadinessReadinessGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadinessReadinessGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchHashesV1HashesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HashesResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r BatchHashesV1HashesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchHashesV1HashesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretV1PrefixPrefixGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixesResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSecretV1PrefixPrefixGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretV1PrefixPrefixGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchPrefixesV1PrefixesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixesResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r BatchPrefixesV1PrefixesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchPrefixesV1PrefixesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HealthzHealthzGetWithResponse request returning *HealthzHealthzGetResponse
func (c *ClientWithResponses) HealthzHealthzGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthzHealthzGetResponse, error) {
	rsp, err := c.HealthzHealthzGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthzHealthzGetResponse(rsp)
}

// ReadinessReadinessGetWithResponse request returning *ReadinessReadinessGetResponse
func (c *ClientWithResponses) ReadinessReadinessGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadinessReadinessGetResponse, error) {
	rsp, err := c.ReadinessReadinessGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadinessReadinessGetResponse(rsp)
}

// BatchHashesV1HashesPostWithBodyWithResponse request with arbitrary body returning *BatchHashesV1HashesPostResponse
func (c *ClientWithResponses) BatchHashesV1HashesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchHashesV1HashesPostResponse, error) {
	rsp, err := c.BatchHashesV1HashesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchHashesV1HashesPostResponse(rsp)
}

func (c *ClientWithResponses) BatchHashesV1HashesPostWithResponse(ctx context.Context, body BatchHashesV1HashesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchHashesV1HashesPostResponse, error) {
	rsp, err := c.BatchHashesV1HashesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchHashesV1HashesPostResponse(rsp)
}

// GetSecretV1PrefixPrefixGetWithResponse request returning *GetSecretV1PrefixPrefixGetResponse
func (c *ClientWithResponses) GetSecretV1PrefixPrefixGetWithResponse(ctx context.Context, prefix string, reqEditors ...RequestEditorFn) (*GetSecretV1PrefixPrefixGetResponse, error) {
	rsp, err := c.GetSecretV1PrefixPrefixGet(ctx, prefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretV1PrefixPrefixGetResponse(rsp)
}

// BatchPrefixesV1PrefixesPostWithBodyWithResponse request with arbitrary body returning *BatchPrefixesV1PrefixesPostResponse
func (c *ClientWithResponses) BatchPrefixesV1PrefixesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchPrefixesV1PrefixesPostResponse, error) {
	rsp, err := c.BatchPrefixesV1PrefixesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchPrefixesV1PrefixesPostResponse(rsp)
}

func (c *ClientWithResponses) BatchPrefixesV1PrefixesPostWithResponse(ctx context.Context, body BatchPrefixesV1PrefixesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchPrefixesV1PrefixesPostResponse, error) {
	rsp, err := c.BatchPrefixesV1PrefixesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchPrefixesV1PrefixesPostResponse(rsp)
}

// ParseHealthzHealthzGetResponse parses an HTTP response from a HealthzHealthzGetWithResponse call
func ParseHealthzHealthzGetResponse(rsp *http.Response) (*HealthzHealthzGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthzHealthzGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadinessReadinessGetResponse parses an HTTP response from a ReadinessReadinessGetWithResponse call
func ParseReadinessReadinessGetResponse(rsp *http.Response) (*ReadinessReadinessGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadinessReadinessGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchHashesV1HashesPostResponse parses an HTTP response from a BatchHashesV1HashesPostWithResponse call
func ParseBatchHashesV1HashesPostResponse(rsp *http.Response) (*BatchHashesV1HashesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchHashesV1HashesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HashesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSecretV1PrefixPrefixGetResponse parses an HTTP response from a GetSecretV1PrefixPrefixGetWithResponse call
func ParseGetSecretV1PrefixPrefixGetResponse(rsp *http.Response) (*GetSecretV1PrefixPrefixGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretV1PrefixPrefixGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseBatchPrefixesV1PrefixesPostResponse parses an HTTP response from a BatchPrefixesV1PrefixesPostWithResponse call
func ParseBatchPrefixesV1PrefixesPostResponse(rsp *http.Response) (*BatchPrefixesV1PrefixesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchPrefixesV1PrefixesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

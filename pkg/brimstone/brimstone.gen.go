// Package brimstone provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package brimstone

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Hash defines model for Hash.
type Hash struct {
	Hash string `gorm:"primaryKey" json:"hash"`
	Name string `gorm:"primaryKey" json:"name"`
}

// HashBatch defines model for HashBatch.
type HashBatch struct {
	Hashes   []Hash `gorm:"many2many:safename_hashes;References:name,hash" json:"hashes"`
	Safename string `gorm:"primaryKey" json:"safename"`
}

// StoreHashesJSONBody defines parameters for StoreHashes.
type StoreHashesJSONBody = []HashBatch

// StoreHashesJSONRequestBody defines body for StoreHashes for application/json ContentType.
type StoreHashesJSONRequestBody = StoreHashesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// StoreHashesWithBody request with any body
	StoreHashesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StoreHashes(ctx context.Context, body StoreHashesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendFullHashes request
	SendFullHashes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendHashPrefixes request
	SendHashPrefixes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GitGuardianEventPost request
	GitGuardianEventPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) StoreHashesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoreHashesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StoreHashes(ctx context.Context, body StoreHashesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStoreHashesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendFullHashes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendFullHashesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendHashPrefixes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendHashPrefixesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GitGuardianEventPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGitGuardianEventPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewStoreHashesRequest calls the generic StoreHashes builder with application/json body
func NewStoreHashesRequest(server string, body StoreHashesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStoreHashesRequestWithBody(server, "application/json", bodyReader)
}

// NewStoreHashesRequestWithBody generates requests for StoreHashes with any type of body
func NewStoreHashesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/hashes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSendFullHashesRequest generates requests for SendFullHashes
func NewSendFullHashesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/hashes/sendhashes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendHashPrefixesRequest generates requests for SendHashPrefixes
func NewSendHashPrefixesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/hashes/sendprefixes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGitGuardianEventPostRequest generates requests for GitGuardianEventPost
func NewGitGuardianEventPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notify/ggevent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// StoreHashesWithBodyWithResponse request with any body
	StoreHashesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoreHashesResponse, error)

	StoreHashesWithResponse(ctx context.Context, body StoreHashesJSONRequestBody, reqEditors ...RequestEditorFn) (*StoreHashesResponse, error)

	// SendFullHashesWithResponse request
	SendFullHashesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SendFullHashesResponse, error)

	// SendHashPrefixesWithResponse request
	SendHashPrefixesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SendHashPrefixesResponse, error)

	// GitGuardianEventPostWithResponse request
	GitGuardianEventPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GitGuardianEventPostResponse, error)
}

type StoreHashesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON401      *string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r StoreHashesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StoreHashesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendFullHashesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON401      *string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SendFullHashesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendFullHashesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendHashPrefixesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON401      *string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r SendHashPrefixesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendHashPrefixesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GitGuardianEventPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON401      *string
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GitGuardianEventPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GitGuardianEventPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// StoreHashesWithBodyWithResponse request with arbitrary body returning *StoreHashesResponse
func (c *ClientWithResponses) StoreHashesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StoreHashesResponse, error) {
	rsp, err := c.StoreHashesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoreHashesResponse(rsp)
}

func (c *ClientWithResponses) StoreHashesWithResponse(ctx context.Context, body StoreHashesJSONRequestBody, reqEditors ...RequestEditorFn) (*StoreHashesResponse, error) {
	rsp, err := c.StoreHashes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStoreHashesResponse(rsp)
}

// SendFullHashesWithResponse request returning *SendFullHashesResponse
func (c *ClientWithResponses) SendFullHashesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SendFullHashesResponse, error) {
	rsp, err := c.SendFullHashes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendFullHashesResponse(rsp)
}

// SendHashPrefixesWithResponse request returning *SendHashPrefixesResponse
func (c *ClientWithResponses) SendHashPrefixesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SendHashPrefixesResponse, error) {
	rsp, err := c.SendHashPrefixes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendHashPrefixesResponse(rsp)
}

// GitGuardianEventPostWithResponse request returning *GitGuardianEventPostResponse
func (c *ClientWithResponses) GitGuardianEventPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GitGuardianEventPostResponse, error) {
	rsp, err := c.GitGuardianEventPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGitGuardianEventPostResponse(rsp)
}

// ParseStoreHashesResponse parses an HTTP response from a StoreHashesWithResponse call
func ParseStoreHashesResponse(rsp *http.Response) (*StoreHashesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StoreHashesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSendFullHashesResponse parses an HTTP response from a SendFullHashesWithResponse call
func ParseSendFullHashesResponse(rsp *http.Response) (*SendFullHashesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendFullHashesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSendHashPrefixesResponse parses an HTTP response from a SendHashPrefixesWithResponse call
func ParseSendHashPrefixesResponse(rsp *http.Response) (*SendHashPrefixesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendHashPrefixesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGitGuardianEventPostResponse parses an HTTP response from a GitGuardianEventPostWithResponse call
func ParseGitGuardianEventPostResponse(rsp *http.Response) (*GitGuardianEventPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GitGuardianEventPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add new hashes
	// (PUT /v1/hashes)
	StoreHashes(ctx echo.Context) error
	// Trigger brimstone to send full hmsl-hashes to HMSL
	// (GET /v1/hashes/sendhashes)
	SendFullHashes(ctx echo.Context) error
	// Trigger brimstone to send hash prefixes to HMSL
	// (GET /v1/hashes/sendprefixes)
	SendHashPrefixes(ctx echo.Context) error
	// Gitguardian event posted from webhooks
	// (POST /v1/notify/ggevent)
	GitGuardianEventPost(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// StoreHashes converts echo context to params.
func (w *ServerInterfaceWrapper) StoreHashes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StoreHashes(ctx)
	return err
}

// SendFullHashes converts echo context to params.
func (w *ServerInterfaceWrapper) SendFullHashes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendFullHashes(ctx)
	return err
}

// SendHashPrefixes converts echo context to params.
func (w *ServerInterfaceWrapper) SendHashPrefixes(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendHashPrefixes(ctx)
	return err
}

// GitGuardianEventPost converts echo context to params.
func (w *ServerInterfaceWrapper) GitGuardianEventPost(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GitGuardianEventPost(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/v1/hashes", wrapper.StoreHashes)
	router.GET(baseURL+"/v1/hashes/sendhashes", wrapper.SendFullHashes)
	router.GET(baseURL+"/v1/hashes/sendprefixes", wrapper.SendHashPrefixes)
	router.POST(baseURL+"/v1/notify/ggevent", wrapper.GitGuardianEventPost)

}

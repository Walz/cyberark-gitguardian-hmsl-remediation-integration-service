{
    "openapi": "3.0.3",
    "servers": [
        {
            "url": "https://api.gitguardian.com"
        }
    ],
    "info": {
        "title": "GitGuardian API (WITH LOCAL FIXES)",
        "version": "1.1.0",
        "termsOfService": "https://www.gitguardian.com/legal-terms",
        "license": {
            "name": "GitGuardian",
            "url": "https://www.gitguardian.com/legal-terms"
        },
        "x-logo": {
            "url": "https://static.gitguardian.com/Logo-blue.png",
            "altText": "GitGuardian"
        },
        "contact": {
            "name": "GitGuardian",
            "email": "support@gitguardian.com",
            "url": "https://www.gitguardian.com"
        },
        "description": "\n# Introduction\n\nWhether you want to build a complete integration with your software development\nworkflow or simply want to test GitGuardian's policy break detection on any text content,\nyou can use our API.\n\n- The base url for the latest version is `api.gitguardian.com/v1` over `HTTPS`.\n- All data is sent and received as JSON by default.\n- All timestamps returned are ISO-8601 compliant, example:\n```python\n2020-03-16T04:46:00+00:00 # for date-time\n```\n\nGitGuardian supported wrappers:\n- Python: [**py-gitguardian**](https://github.com/GitGuardian/py-gitguardian)\n\nGitGuardian provides you with [**GitGuardian Shield**](https://github.com/GitGuardian/gg-shield),\na CLI application that uses the GitGuardian API through py-gitguardian\nto scan your files and detect potential secrets or issues in your code.\n\nThis CLI application can be used in many CIs (such as GitHub Actions, GitLab Pipelines, CircleCI,...)\nor as a pre-commit or pre-receive hook.\n\n# Authentication\n\nThe GitGuardian API uses API keys to authenticate requests.\n\nYou need to [create an account](https://dashboard.gitguardian.com/auth/signup) before getting started\nin order to get an API key.\n\nYour API key can be created and revoked from the\n[API section of your dashboard](https://dashboard.gitguardian.com/api).\n\nYour API key must kept private and should neither be embedded directly in the code nor versioned in Git.\n(Please do not push GitGuardian's API keys to public GitHub repositories ^^).\n\nBeware your API keys can expire and can be revoked.\n\nUse [/v1/health](#operation/health_check) to check the\nvalidity of your token if needed.\n\n```bash\ncurl -H \"Authorization: Token ${TOKEN}\" \\\n  https://api.gitguardian.com/v1/health\n```\n"
    },
    "tags": [
        {
            "name": "API Tokens",
            "description": "Manage API tokens.\n"
        },
        {
            "name": "Secret Incidents",
            "description": "Manage incidents found by post-receive hooks on your GitGuardian Dashboard.\n"
        },
        {
            "name": "Secret Occurrences",
            "description": "Manage occurrences found by post-receive hooks on your GitGuardian Dashboard.\n"
        },
        {
            "name": "Secret Incident Notes",
            "description": "Manage notes on incidents found by post-receive hooks on your GitGuardian Dashboard.\n"
        },
        {
            "name": "Secret Detectors",
            "description": "Retrieve details on detectors used for secret detection.\n"
        },
        {
            "name": "Invitations",
            "description": "Manage workspace invitations.\n"
        },
        {
            "name": "Sources",
            "description": "Retrieve details on sources monitored by GitGuardian.\n"
        },
        {
            "name": "Members",
            "description": "Retrieve details about workspace members.\n"
        },
        {
            "name": "Scan Methods",
            "description": "Use GitGuardian's brain at your leisure.\n\nScanning API allows you to scan any content you want using GitGuardian's secrets detection algorithms.\n"
        },
        {
            "name": "Quota",
            "description": "Retrieve details about quota usage.\n"
        },
        {
            "name": "IaC scan methods",
            "description": "Scanning a directory for Infrastructure as Code (IaC) vulnerabilities allows\nyou to enhance security in your project configuration.\n"
        },
        {
            "name": "Audit logs",
            "description": "List of audit logs of the workspace.\n"
        },
        {
            "name": "Status",
            "description": "Check the status of the API and the overall system health.\n"
        },
        {
            "name": "Teams",
            "description": "Manage teams.\n"
        },
        {
            "name": "Team Invitations",
            "description": "Manage team invitations.\n"
        },
        {
            "name": "Team Memberships",
            "description": "Add or remove members from teams, or update their permissions.\n"
        },
        {
            "name": "Honeytokens",
            "description": "Manage honeytokens.\n"
        },
        {
            "name": "SCA",
            "description": "Software Composition Analysis\n"
        },
        {
            "name": "Honeytoken Notes",
            "description": "Manage notes on honeytokens.\n"
        },
        {
            "name": "Honeytokens Events",
            "description": "Manage events on honeytokens.\n"
        },
        {
            "name": "Honeytoken Sources",
            "description": "Manage sources on honeytokens.\n"
        },
        {
            "name": "Labels",
            "description": "Manage labels for honeytokens. Labels provide a flexible way to organize honeytokens. You can create your own labels in the form of keys and values, assign them to honeytokens, and use them to filter and search for honeytokens based on specific characteristics.\n"
        }
    ],
    "x-tagGroups": [
        {
            "name": "Tokens management",
            "tags": [
                "API Tokens"
            ]
        },
        {
            "name": "Incidents Management",
            "tags": [
                "Secret Incidents",
                "Secret Occurrences",
                "Secret Incident Notes"
            ]
        },
        {
            "name": "Honeytokens Management",
            "tags": [
                "Honeytokens",
                "Honeytokens Events",
                "Honeytoken Notes",
                "Honeytoken Sources",
                "Labels"
            ]
        },
        {
            "name": "Perimeter Management",
            "tags": [
                "Sources"
            ]
        },
        {
            "name": "User Management",
            "tags": [
                "Members",
                "Invitations"
            ]
        },
        {
            "name": "Secrets Scanning",
            "tags": [
                "Scan Methods",
                "Secret Detectors",
                "Quota"
            ]
        },
        {
            "name": "SCA",
            "tags": [
                "SCA"
            ]
        },
        {
            "name": "IaC Scanning",
            "tags": [
                "IaC Scan Methods"
            ]
        },
        {
            "name": "Team Management",
            "tags": [
                "Teams",
                "Team Invitations",
                "Team Memberships",
                "Team Requests",
                "Team Sources"
            ]
        },
        {
            "name": "Audit Logs",
            "tags": [
                "Audit Logs"
            ]
        },
        {
            "name": "Other",
            "tags": [
                "Status"
            ]
        }
    ],
    "paths": {
        "/v1/api_tokens/self": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "self-retrieve-api-token",
                "summary": "Retrieve details of the current API token.",
                "responses": {
                    "200": {
                        "description": "Current token details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apiTokenDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            },
            "delete": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "self-delete-api-token",
                "summary": "Revoke the current API token.",
                "responses": {
                    "204": {
                        "description": "Token revocation confirmation"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/api_tokens": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "list-api-tokens",
                "summary": "List API tokens.",
                "description": "List all the tokens in the workspace, some filters are available and described \nbelow.\n",
                "security": [
                    {
                        "APIKey": [
                            "api_tokens:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/APITokenStatusEnum"
                                }
                            ],
                            "description": "Status of the token."
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "creator_id",
                        "in": "query",
                        "description": "Filter by creator id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "scopes",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Tokens with one of the following scopes.",
                            "example": "incidents:read,api_tokens:read",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/APITokenScopeEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search tokens based on their name."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "last_used_at",
                                "-last_used_at",
                                "expire_at",
                                "-expire_at",
                                "revoked_at",
                                "-revoked_at"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API tokens list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/apiTokenDetails"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/api_tokens/{token_id}": {
            "get": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "retrieve-api-token",
                "summary": "Retrieve details of an API token.",
                "security": [
                    {
                        "APIKey": [
                            "api_tokens:read"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "token_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the token.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current token details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/apiTokenDetails"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "API token not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "delete-api-token",
                "summary": "Revoke an an API token.",
                "security": [
                    {
                        "APIKey": [
                            "api_tokens:write"
                        ]
                    }
                ],
                "parameters": [
                    {
                        "name": "token_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the token.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token revocation confirmation"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "API token not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/auth/jwt": {
            "post": {
                "tags": [
                    "API Tokens"
                ],
                "operationId": "public-jwt-create",
                "summary": "Create a JSON Web Token.",
                "description": "Create a short lived JWT for authentication to specific GitGuardian services,\nincluding HasMySecretLeaked.\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "audience"
                                ],
                                "properties": {
                                    "audience": {
                                        "type": "string",
                                        "description": "Audience of the JWT.",
                                        "example": "https://api.hasmysecretleaked.com"
                                    },
                                    "audience_type": {
                                        "type": "string",
                                        "description": "Type of audience.",
                                        "example": "hmsl"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created JWT",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "description": "JWT",
                                            "example": "eyJhbGciOiJS[...]"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    }
                }
            }
        },
        "/v1/incidents/secrets": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incidents",
                "summary": "List secret incidents",
                "description": "List secret incidents detected by the GitGuardian dashboard.\nOccurrences are not returned in this route.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "retrieve-incidents",
                "summary": "Retrieve a secret incident",
                "description": "Retrieve secret incident detected by the GitGuardian dashboard with\nits occurrences.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "with_occurrences",
                        "in": "query",
                        "description": "Retrieve a number of occurrences of this incident.",
                        "schema": {
                            "type": "integer",
                            "default": 20,
                            "minimum": 0,
                            "maximum": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incident"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "update-secret-incident",
                "summary": "Update a secret incident",
                "description": "Update a secret incident\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/incidentWithoutOccurrences"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/leaks": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "retrieve-incidents-leaks",
                "summary": "Retrieve where a secret has been publicly leaked",
                "description": "Retrieve where a secret has been publicly leaked.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of the leaks of the incident",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "source": {
                                                "type": "string",
                                                "example": "github, github_issue, github_gist, unknown"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "GitGuardian / ggshield"
                                            },
                                            "url": {
                                                "type": "string",
                                                "example": "https://github.com/GitGuardian/ggshield/blob/1f8cd3497aa9acabaafb1851039be2c63448c2f9/README.md?plain=1#L5"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/assign": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "assign-incident",
                "summary": "Assign a secret incident",
                "description": "Assign secret incident detected by the GitGuardian dashboard to a workspace member\nby email.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Assignee Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "eric@gitguardian.com",
                                        "description": "email of the member to assign. This parameter is mutually exclusive with `member_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "example": 4295,
                                        "description": "id of the member to assign. This parameter is mutually exclusive with `email`.\n"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/unassign": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "unassign-incident",
                "summary": "Unassign a secret incident",
                "description": "Unassign secret incident from a workspace member by email.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/resolve": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "resolve-incident",
                "summary": "Resolve a secret incident",
                "description": "Resolve a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Resolve Request",
                                "required": [
                                    "secret_revoked"
                                ],
                                "properties": {
                                    "secret_revoked": {
                                        "type": "boolean",
                                        "example": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/ignore": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "ignore-incident",
                "summary": "Ignore a secret incident",
                "description": "Ignore a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Ignore Request",
                                "required": [
                                    "ignore_reason"
                                ],
                                "properties": {
                                    "ignore_reason": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/SecretStatusEnum"
                                            }
                                        ],
                                        "example": "low_risk"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/reopen": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "reopen-incident",
                "summary": "Reopen a secret incident",
                "description": "Unresolve or unignore a secret incident detected by the GitGuardian dashboard.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident Details without occurrences.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/share": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "share-incident",
                "summary": "Share a secret incident",
                "description": "Share a secret incident by creating a public link.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Share Request",
                                "properties": {
                                    "auto_healing": {
                                        "type": "boolean",
                                        "example": true,
                                        "default": false,
                                        "description": "Allow the developer to resolve or ignore through the share link"
                                    },
                                    "feedback_collection": {
                                        "type": "boolean",
                                        "example": true,
                                        "default": true,
                                        "description": "Allow the developer to submit their feedback through the share link"
                                    },
                                    "lifespan": {
                                        "type": "integer",
                                        "example": 720,
                                        "default": 0,
                                        "minimum": 0,
                                        "description": "Lifespan, in hours, of the share link. If 0 or unset, a default value will be applied based on the workspace settings."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Incident Sharing Details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentToken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/unshare": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "unshare-incident",
                "summary": "Unshare a secret incident",
                "description": "Unshare a secret incident by revoking its public link.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The public link was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/grant_access": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "grant-access-incident",
                "summary": "Grant access to a secret incident",
                "description": "Grant a user, an existing invitee or a team access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Grant Access Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of a user or invitee. This parameter is mutually exclusive\nwith `member_id`, `invitation_id` and `team_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "description": "Id of a member. This parameter is mutually exclusive with `email`,\n`invitation_id` and `team_id`.\n"
                                    },
                                    "invitation_id": {
                                        "type": "number",
                                        "description": "Id of an invitation. This parameter is mutually exclusive with `email`,\n`member_id` and `team_id`.\n"
                                    },
                                    "team_id": {
                                        "type": "number",
                                        "description": "Id of a team, except for the global team. This parameter is mutually\nexclusive with `email`, `member_id` and `invitation_id`.\n"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ]
                                    }
                                },
                                "example": {
                                    "member_id": 1492,
                                    "incident_permission": "can_edit"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was granted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/revoke_access": {
            "post": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "revoke-access-incident",
                "summary": "Revoke access to a secret incident",
                "description": "Revoke access of a user, an existing invitee or a team to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Grant Access Request",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of a user or invitee. This parameter is mutually exclusive\nwith `member_id`, `invitation_id` and `team_id`.\n"
                                    },
                                    "member_id": {
                                        "type": "number",
                                        "description": "Id of a member. This parameter is mutually exclusive with `email`,\n`invitation_id` and `team_id`.\n"
                                    },
                                    "invitation_id": {
                                        "type": "number",
                                        "description": "Id of an invitation. This parameter is mutually exclusive with `email`,\n`member_id` and `team_id`.\n"
                                    },
                                    "team_id": {
                                        "type": "number",
                                        "description": "Id of a team, except for the global team. This parameter is mutually\nexclusive with `email`, `member_id` and `invitation_id`.\n"
                                    }
                                },
                                "example": {
                                    "member_id": 1492
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The access was revoked successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:share"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/notes": {
            "get": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "list-incident-notes",
                "summary": "List notes on a secret incident",
                "description": "List notes left on a secret incident in chronological order.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "updated_at",
                                "-updated_at"
                            ]
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search notes based on the comment field content.",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Incident Note List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentNote"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "create-incident-note",
                "summary": "Create a secret incident note",
                "description": "Add a note on a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Note Request",
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "example": "I revoked this secret",
                                        "description": "Content of the incident note"
                                    }
                                },
                                "required": [
                                    "comment"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The note was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/notes/{note_id}": {
            "patch": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "update-incident-note",
                "summary": "Update a secret incident note",
                "description": "Update an existing comment on a secret incident. Only incident notes\ncreated by the current API key can be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the incident note to update",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Incident Note Request",
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "example": "I revoked this secret",
                                        "description": "Content of the incident note"
                                    }
                                },
                                "required": [
                                    "comment"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The note was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/incidentNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot update an Incident Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Secret Incident or Incident Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Secret Incident Notes"
                ],
                "operationId": "delete-incident-note",
                "summary": "Delete a secret incident note",
                "description": "Delete an existing comment on a secret incident. Only incident notes\ncreated by the current API key can be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the incident note to delete",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The note was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot delete an Incident Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Secret Incident or Incident Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:write"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/members": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-members",
                "summary": "List members having access to a secret incident",
                "description": "List all the members having access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific member id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberRoleEnum"
                                }
                            ],
                            "description": "Filter members based on their role.",
                            "deprecated": true
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search members based on their name or email.",
                            "deprecated": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of members",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentMember"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/teams": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-teams",
                "summary": "List teams having access to a secret incident",
                "description": "List all the teams having access to a secret incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific team id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of team accesses",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentTeam"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/incidents/secrets/{incident_id}/invitations": {
            "get": {
                "tags": [
                    "Secret Incidents"
                ],
                "operationId": "list-incident-invitations",
                "summary": "List invitations having access to a Secret Incident",
                "description": "List all the invitations having access to a Secret Incident.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/incident_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "name": "invitation_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "filter on a specific invitation id.",
                            "example": 1234
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "description": "filter accesses with a specific permission.",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "example": "can_view"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invitation accesses",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/incidents/secrets/1/invitations?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/incidents/secrets/1/invitations?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentInvitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Incident not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read",
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/occurrences/secrets": {
            "get": {
                "tags": [
                    "Secret Occurrences"
                ],
                "operationId": "list-occs",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "source_id",
                        "in": "query",
                        "description": "Filter on the source ID.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    },
                    {
                        "name": "source_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this source name search.",
                            "example": "gitguardian/test-repository"
                        }
                    },
                    {
                        "name": "source_type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by integration type.",
                            "example": "github",
                            "enum": [
                                "bitbucket",
                                "github",
                                "gitlab",
                                "azure_devops",
                                "slack"
                            ]
                        }
                    },
                    {
                        "name": "incident_id",
                        "in": "query",
                        "description": "Filter by incident ID.",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "presence",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/PresenceEnum"
                                }
                            ],
                            "description": "Entries that have the following presence status."
                        }
                    },
                    {
                        "name": "author_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this author name search.",
                            "minLength": 3,
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "author_info",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this author email search.",
                            "minLength": 3,
                            "example": "john.doe@gitguardian.com"
                        }
                    },
                    {
                        "name": "sha",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries starting with the commit sha search string.",
                            "minLength": 3,
                            "example": "fccebf0562698ab99dc10dcb2e864fc563b25ac4"
                        }
                    },
                    {
                        "name": "filepath",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Entries matching this filepath search.",
                            "minLength": 3,
                            "example": "myfile.txt"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Occurrences with one of the following tags. Use `NONE` if you want to filter occurrences with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date"
                            ]
                        }
                    }
                ],
                "summary": "List secret occurrences",
                "description": "List occurrences of secrets in the monitored perimeter.\n",
                "responses": {
                    "200": {
                        "description": "List occurrences",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/occurrences/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/occurrences/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/vcsOccurrence"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations": {
            "get": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "list-invitations",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search invitations based on the email field."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date"
                            ]
                        }
                    }
                ],
                "summary": "List invitations",
                "description": "This endpoint allows you to list all pending invitations.\n\nThe response contains the list of invitations and a pagination cursor to retrieve the next page.\n\nThe invitations are sorted by id.\n\nIf you are using a personal access token, you need to have a role superior or equal to `member`.\n",
                "responses": {
                    "200": {
                        "description": "List invitations",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/invitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "create-invitations",
                "summary": "Create an invitation",
                "description": "This endpoint allows you to send an invitation to a user.\n\nIf you are using a personal access token, you need to have a role superior or equal to `member`.\n",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Invitation Request",
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "eric@gitguardian.com",
                                        "description": "email of the user to invite.\n"
                                    },
                                    "role": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/NonOwnerMemberRoleEnum"
                                            }
                                        ],
                                        "example": "manager",
                                        "default": "member"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invitation sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/invitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}": {
            "delete": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "delete-invitation",
                "summary": "Delete an invitation",
                "description": "Delete an existing invitation.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The invitation was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/invitations/{invitation_id}/resend": {
            "post": {
                "tags": [
                    "Invitations"
                ],
                "operationId": "resend-invitation",
                "summary": "Resend an invitation",
                "description": "Resend an existing invitation.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/invitation_id"
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invitation sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "detail": {
                                            "type": "string",
                                            "description": "Details on response.",
                                            "example": "Email sent"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invitation not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-members",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/MemberRoleEnum"
                                }
                            ],
                            "description": "Filter members based on their role."
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search members based on their name or email."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "last_login",
                                "-last_login"
                            ]
                        }
                    }
                ],
                "summary": "List members",
                "description": "List members of the workspace.\n",
                "responses": {
                    "200": {
                        "description": "List members",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/member"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "retrieve-member",
                "summary": "Retrieve a member",
                "description": "Retrieve an existing workspace member.\n\nIf you are using a personal access token, you need to have a role greater or equal to `member`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Workspace member details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/member"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Members"
                ],
                "operationId": "delete-member",
                "summary": "Delete a member",
                "description": "Delete an existing workspace member.\n\nIf you are using a personal access token, you need to have a role greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The member was deleted successfully"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Members"
                ],
                "operationId": "update-member",
                "summary": "Update a member",
                "description": "Update an existing workspace member.\n\nIf you are using a personal access token, you need to have a role greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/member"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Workspace member details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/member"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Member not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:write"
                        ]
                    }
                ]
            }
        },
        "/v1/scan": {
            "post": {
                "tags": [
                    "Scan Methods"
                ],
                "operationId": "content_scan",
                "summary": "Content scan",
                "description": "Scan provided document content for policy breaks.\n\nRequest body shouldn't exceed 1MB.\n\nThis endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.\n",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/document"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Scan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/scanResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/OverQuotaError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request POST \\\n  --url https://api.gitguardian.com/v1/scan \\\n  --header 'authorization: Token <Insert API Key>' \\\n  --header 'content-type: application/json' \\\n  --data '{\n\"document\": \"import urllib.request\\nurl = '\\''http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\''\\nresponse = urllib.request.urlopen(url)\\nconsume(response.read())\",\n\"filename\": \".env\"\n} '\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\ndoc_content = \"import urllib.request\\n\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\n\nresponse = urllib.request.urlopen(url)\\n\nconsume(response.read())\"\nclient = GGClient(api_key=API_KEY)\nscan_result = client.content_scan(filename=\".env\", document=doc_content)\nprint(\"Scan results:\", scan_result.has_secrets, \":\", scan_result.policy_break_count)\n"
                    }
                ],
                "security": [
                    {
                        "APIKey": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/multiscan": {
            "post": {
                "tags": [
                    "Scan Methods"
                ],
                "operationId": "multiple_scan",
                "summary": "Multiple content scan",
                "description": "Scan provided document contents for policy breaks.\nMultiple documents are returned by the same index order.\n\nThere should not be more than 20 documents in the payload. Individual documents should not exceed 1MB.\n\nQuota usage is based on requests and not on the content size. One request to this endpoint will consume 1 API call.\nAlso note that the quota is set on a rolling month and not on a calendar month.\nSee [this documentation](https://docs.gitguardian.com/api-docs/usage-and-quotas) for more details.\n\nThis endpoint is stateless and as such will not store in our servers neither the documents nor the secrets found.\n",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "description": "List of documents to scan.",
                                "minItems": 1,
                                "items": {
                                    "$ref": "#/components/schemas/document"
                                },
                                "example": [
                                    {
                                        "filename": ".env",
                                        "document": "import urllib.request\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\nresponse = urllib.request.urlopen(url)\nconsume(response.read())\n"
                                    },
                                    {
                                        "filename": "tasks.py",
                                        "document": "__version__=\"1.0.0\""
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Scan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "description": "List of scan results. Corresponding index to document array.",
                                    "minItems": 1,
                                    "items": {
                                        "$ref": "#/components/schemas/scanResult"
                                    },
                                    "example": [
                                        {
                                            "policy_break_count": 2,
                                            "policies": [
                                                "Filename",
                                                "File extensions",
                                                "Secrets detection"
                                            ],
                                            "policy_breaks": [
                                                {
                                                    "type": ".env",
                                                    "policy": "Filenames",
                                                    "matches": [
                                                        {
                                                            "type": "filename",
                                                            "match": ".env"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type": "Basic Auth String",
                                                    "policy": "Secrets detection",
                                                    "validity": "cannot_check",
                                                    "matches": [
                                                        {
                                                            "type": "username",
                                                            "match": "jen_barber",
                                                            "index_start": 52,
                                                            "index_end": 61,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        },
                                                        {
                                                            "type": "password",
                                                            "match": "correcthorsebatterystaple",
                                                            "index_start": 63,
                                                            "index_end": 87,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        },
                                                        {
                                                            "type": "host",
                                                            "match": "cake.gitguardian.com",
                                                            "index_start": 89,
                                                            "index_end": 108,
                                                            "line_start": 2,
                                                            "line_end": 2
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "policy_break_count": 0,
                                            "policies": [
                                                "Filename",
                                                "File extensions",
                                                "Secrets detection"
                                            ],
                                            "policy_breaks": []
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/OverQuotaError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request POST \\\n  --url https://api.gitguardian.com/v1/multiscan \\\n  --header 'authorization: Token <Insert API Key>' \\\n  --header 'content-type: application/json' \\\n  --data '[\n{\n\"document\":  \"import urllib.request\\nurl = '\\''http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\''\\nresponse = urllib.request.urlopen(url)\\nconsume(response.read())\",\n\"filename\": \".env\"\n},\n{\n  \"document\":  \"__version__=\\\"1.0.0\\\"\",\n  \"filename\": \"__init__.py\"\n}\n]'\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\ndoc_content = \"import urllib.request\\n\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\\n\nresponse = urllib.request.urlopen(url)\\n\nconsume(response.read())\"\nclient = GGClient(api_key=API_KEY)\nto_scan = [{\"filename\": \".env\", \"document\": doc_content},\n  {\"filename\": \"__init__.py\", \"document\": \"__version__=\"1.0.0\"}]\nscan_results = client.multi_content_scan(to_scan)\nprint(scan_results)\n"
                    }
                ],
                "security": [
                    {
                        "APIKey": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/secret_detectors": {
            "get": {
                "tags": [
                    "Secret Detectors"
                ],
                "operationId": "list-secret-detectors",
                "summary": "List secret detectors",
                "description": "List secret detectors.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "is_active",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter only active or inactive detectors.",
                            "example": true
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/DetectorGroupTypeEnum"
                                }
                            ],
                            "description": "Filter detectors on their type.",
                            "example": "generic"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "example": "aws"
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "name",
                                "-name"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Secret Detectors",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/detectorGroup"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/secret_detectors/{detector_name}": {
            "get": {
                "tags": [
                    "Secret Detectors"
                ],
                "operationId": "get-secret-detector",
                "summary": "Get a secret detector",
                "description": "Get a secret detector.",
                "parameters": [
                    {
                        "name": "detector_name",
                        "in": "path",
                        "required": true,
                        "description": "Name of the detector to retrieve",
                        "schema": {
                            "type": "string",
                            "example": "aws_iam"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Detector",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/detectorGroup"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Secret Detector not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/quotas": {
            "get": {
                "tags": [
                    "Quota"
                ],
                "operationId": "quotas",
                "summary": "Quota overview",
                "description": "Check available scanning calls for this token. Quota is shared between all tokens of a workspace\n",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Quota Overview",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/quota"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                }
            }
        },
        "/v1/iac_scan": {
            "post": {
                "tags": [
                    "IaC Scan Methods"
                ],
                "operationId": "scan-iac",
                "summary": "Content scan",
                "description": "This feature is experimental.\n\nScan a tar file directory seeking potential IaC (Infrastructure as Code)\nvulnerabilities. Return a list of vulnerabilities found in the files\nof the scanned directory.\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "directory"
                                ],
                                "properties": {
                                    "directory": {
                                        "type": "object",
                                        "format": "tar",
                                        "description": "Tar file containing the folder to be scanned."
                                    },
                                    "scan_parameters": {
                                        "title": "Scan Parameters",
                                        "type": "object",
                                        "default": {
                                            "minimum_severity": null,
                                            "ignored_vulnerabilities": []
                                        },
                                        "example": {
                                            "minimum_severity": "medium",
                                            "ignored_vulnerabilities": [
                                                "GG_IAC_0001"
                                            ]
                                        },
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IACScanTarParameters"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Scan success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/iacScanResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ScanningError"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/iac_diff_scan": {
            "post": {
                "tags": [
                    "IaC Scan Methods"
                ],
                "operationId": "diff-scan-iac",
                "summary": "Differential scan",
                "description": "This feature is experimental.\n\nInfrastructure as Code (IaC) differential scanning compares two states of the\nsame project and reports any change in the vulnerabilities of your configuration.\n\nScan tar files containing two states of the same directory\n(under the names `reference` and `current`) seeking changes in potential\nIaC (Infrastructure as Code) vulnerabilities. Return the status of vulnerabilities\nfound in the files of the compared scanned directories.\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "reference",
                                    "current"
                                ],
                                "properties": {
                                    "reference": {
                                        "type": "object",
                                        "format": "tar",
                                        "description": "Tar file containing reference folder to be scanned."
                                    },
                                    "current": {
                                        "type": "object",
                                        "format": "tar",
                                        "description": "Tar file containing current folder to be scanned."
                                    },
                                    "scan_parameters": {
                                        "title": "Scan Parameters",
                                        "type": "object",
                                        "default": {
                                            "minimum_severity": null,
                                            "ignored_vulnerabilities": []
                                        },
                                        "example": {
                                            "minimum_severity": "medium",
                                            "ignored_vulnerabilities": [
                                                "GG_IAC_0001"
                                            ]
                                        },
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IACScanTarParameters"
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Scan success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/iacDiffScanResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "500": {
                        "$ref": "#/components/responses/ScanningError"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/sources": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "operationId": "list-sources",
                "summary": "List sources",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/page"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Sources matching this search.",
                            "example": "test-repository"
                        }
                    },
                    {
                        "name": "last_scan_status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScanStatusEnum"
                                }
                            ],
                            "description": "Filter sources based on the status of their latest historical scan."
                        }
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceHealthEnum"
                                }
                            ],
                            "description": "Filter sources based on their health status."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by integration type.",
                            "example": "github",
                            "enum": [
                                "bitbucket",
                                "github",
                                "gitlab",
                                "azure_devops",
                                "slack"
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last_scan_date",
                                "-last_scan_date"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by visibility status.",
                            "example": "public",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by specific external id.",
                            "example": "1"
                        }
                    }
                ],
                "description": "List vcs sources monitored by GitGuardian.\n",
                "responses": {
                    "200": {
                        "description": "Source List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            },
                            "X-Next-Page": {
                                "$ref": "#/components/headers/xNextPage"
                            },
                            "X-Page": {
                                "$ref": "#/components/headers/xPage"
                            },
                            "X-Prev-Page": {
                                "$ref": "#/components/headers/xPrevPage"
                            },
                            "X-Total": {
                                "$ref": "#/components/headers/xTotal"
                            },
                            "X-Total-Pages": {
                                "$ref": "#/components/headers/xTotalPages"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/source"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/sources/{source_id}": {
            "get": {
                "tags": [
                    "Sources"
                ],
                "operationId": "retrieve-source",
                "summary": "Retrieve a source",
                "description": "Retrieve a source monitored by GitGuardian.\n",
                "parameters": [
                    {
                        "name": "source_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the source to retrieve.",
                        "schema": {
                            "type": "integer",
                            "example": 5523
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source List",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/source"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read"
                        ]
                    }
                ]
            }
        },
        "/v1/audit_logs": {
            "get": {
                "tags": [
                    "Audit Logs"
                ],
                "operationId": "list-audit-logs",
                "summary": "List audit Logs",
                "description": "List audit logs.",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "name": "event_name",
                        "in": "query",
                        "description": "Entries matching this event name.",
                        "schema": {
                            "type": "string",
                            "example": "user.logged_in"
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "The id of the member to retrieve.",
                        "schema": {
                            "type": "integer",
                            "example": 3252
                        }
                    },
                    {
                        "name": "member_name",
                        "in": "query",
                        "description": "Entries matching this member name.",
                        "schema": {
                            "type": "string",
                            "example": "John Smith"
                        }
                    },
                    {
                        "name": "member_email",
                        "in": "query",
                        "description": "Entries matching this member email.",
                        "schema": {
                            "type": "string",
                            "example": "john.smith@example.org"
                        }
                    },
                    {
                        "name": "api_token_id",
                        "in": "query",
                        "description": "Entries matching this API token id.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "ip_address",
                        "in": "query",
                        "description": "Entries matching this IP address.",
                        "schema": {
                            "type": "string",
                            "example": "8.8.8.8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist"
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/auditLog"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "audit_logs:read"
                        ]
                    }
                ]
            }
        },
        "/v1/health": {
            "get": {
                "tags": [
                    "Status"
                ],
                "operationId": "health_check",
                "summary": "Health check",
                "description": "Check the status of the API and your token without spending your quota.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "API on and key valid response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Health Status",
                                    "description": "Health check response.",
                                    "required": [
                                        "detail"
                                    ],
                                    "properties": {
                                        "detail": {
                                            "type": "string",
                                            "description": "API key status."
                                        }
                                    }
                                },
                                "examples": {
                                    "healthy": {
                                        "summary": "Valid API Key.",
                                        "value": {
                                            "detail": "Valid API key."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "Shell",
                        "label": "cURL",
                        "source": "curl --request GET \\\n    --url https://api.gitguardian.com/v1/health \\\n    --header 'authorization: Token <Insert API Key>'\n"
                    },
                    {
                        "lang": "Python",
                        "source": "import os\nfrom pygitguardian import GGClient\n# store your API key in an environment variable\nclient = GGClient(api_key=os.getenv(\"GG_API_KEY\"))\nhealth_obj = client.health_check()\nif bool(health_obj):\n    print(\"Healthy API server\")\n"
                    }
                ]
            }
        },
        "/v1/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "list-teams",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "is_global",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter on/exclude the \"All-incidents\" team."
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search teams based on their name and/or description."
                        }
                    }
                ],
                "summary": "List teams",
                "description": "This endpoint allows you to list all the teams of your workspace.\n\nThe response contains the list of teams and a pagination cursor to retrieve the next page.\n\nThe teams are sorted by id.\n\nIf you are using a personal access token, you need to have a role superior or equal to `member`.\n",
                "responses": {
                    "200": {
                        "description": "List teams",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Teams"
                ],
                "operationId": "create-teams",
                "summary": "Create a team",
                "description": "This endpoint allows you to create a team.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager`.\n\nIf a personal access token is being used, the member is automatically added to the created team with permissions `can_manage` and `full_access`\n",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/team"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "name"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "operationId": "retrieve-team",
                "summary": "Retrieve a team",
                "description": "Retrieve an existing team.\n\nIf you are using a personal access token, you need to have a role greater or equal to `member`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Teams"
                ],
                "operationId": "delete-team",
                "summary": "Delete a team",
                "description": "Delete an existing team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n\nThe \"All-incidents\" team (is_global=true) cannot be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The team was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Teams"
                ],
                "operationId": "update-team",
                "summary": "Update a team",
                "description": "Update a team's name and/or its description.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n\nThe \"All-incidents\" team (is_global=true) cannot be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/team"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The team was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/team"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/incidents/secrets": {
            "get": {
                "tags": [
                    "Secret Incidents",
                    "Teams"
                ],
                "operationId": "list-team-incidents",
                "summary": "List secret incidents of a team",
                "description": "List secret incidents of a particular team.\nOccurrences are not returned in this route.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/date_before"
                    },
                    {
                        "$ref": "#/components/parameters/date_after"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "assignee_email",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents assigned to this email.",
                            "example": "eric@gitguardian.com"
                        }
                    },
                    {
                        "name": "assignee_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents assigned to this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/StatusEnum"
                                }
                            ],
                            "description": "Incidents with the following status."
                        }
                    },
                    {
                        "name": "severity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SeverityEnum"
                                }
                            ],
                            "description": "Filter incidents by severity."
                        }
                    },
                    {
                        "name": "validity",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ValidityEnum"
                                }
                            ],
                            "description": "Secrets with the following validity."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents with one of the following tags. Use `NONE` if you want to filter incidents with no tags.",
                            "example": "FROM_HISTORICAL_SCAN,SENSITIVE_FILE",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TagFilterEnum"
                                }
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "date",
                                "-date",
                                "resolved_at",
                                "-resolved_at",
                                "ignored_at",
                                "-ignored_at"
                            ]
                        }
                    },
                    {
                        "name": "detector_group_name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Incidents belonging to the specified detector group.",
                            "example": "slackbot_token"
                        }
                    },
                    {
                        "name": "ignorer_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents ignored by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "ignorer_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents ignored by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "resolver_id",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "description": "Incidents resolved by this user id.",
                            "example": 4932
                        }
                    },
                    {
                        "name": "resolver_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "Incidents resolved by this API token id.",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Secret Incident List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/123/incidents/secrets?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/incidentWithoutOccurrences"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "incidents:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/teams": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-member-teams",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search teams based on their name and/or description."
                        }
                    },
                    {
                        "name": "is_global",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter on/exclude the \"All-incidents\" team."
                        }
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    }
                ],
                "summary": "List teams of a member",
                "description": "List teams of a workspace member.\nThe response contains the list of teams and a pagination cursor to retrieve the next page.\n\nThe teams are sorted by id.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager` except if the requested member is yourself.\n",
                "responses": {
                    "200": {
                        "description": "List teams",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/123/teams?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/123/teams?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/team"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_invitations": {
            "get": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "list-team-invitation",
                "summary": "List team invitations",
                "description": "List all existing team invitations.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "invitation_id",
                        "in": "query",
                        "description": "The id of an invitation to filter on",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "team_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TeamPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific team permission",
                            "example": "can_manage"
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific incident permission",
                            "example": "can_edit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team invitation list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_invitations?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_invitations?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamInvitation"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "create-team-invitations",
                "summary": "Create a team invitation",
                "description": "This endpoint allows you to create a team invitation from an existing team and invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/teamInvitation"
                                    },
                                    {
                                        "type": "object",
                                        "required": [
                                            "invitation_id"
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team invitation created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamInvitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_invitations/{team_invitation_id}": {
            "patch": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "update-team-invitation",
                "summary": "Update a team invitation",
                "description": "Update permissions of a team invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_invitation_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team invitation",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamInvitation",
                                "properties": {
                                    "team_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team invitation was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamInvitation"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Team Invitations"
                ],
                "operationId": "delete-team-invitation",
                "summary": "Delete a team invitation",
                "description": "Delete an existing team invitation.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_invitation_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team invitation",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team invitation was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_memberships": {
            "get": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "list-team-memberships",
                "summary": "List team memberships",
                "description": "List all the memberships of a team.\n\nIf you are using a personal access token, you need to be a workspace manager or be part of the team.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/TeamPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific team permission",
                            "example": "can_manage"
                        }
                    },
                    {
                        "name": "incident_permission",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/IncidentPermissionEnum"
                                }
                            ],
                            "description": "Filter team memberships with a specific incident permission",
                            "example": "can_edit"
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter team memberships on a specific member",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team membership list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamMembership"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "create-team-membership",
                "summary": "Add a member to a team",
                "description": "Add a member to a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/teamMembership"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Team membership created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_memberships/{team_membership_id}": {
            "patch": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "update-team-membership",
                "summary": "Update a team membership",
                "description": "Update permissions of a team membership.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_membership_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team membership",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamMembership",
                                "properties": {
                                    "team_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team membership was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Team Memberships"
                ],
                "operationId": "delete-team-membership",
                "summary": "Remove a member from a team",
                "description": "Remove a member from a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager,\nor be the member being removed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_membership_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team membership",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team membership was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/team_memberships": {
            "get": {
                "tags": [
                    "Members"
                ],
                "operationId": "list-member-team-memberships",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "description": "The id of a team to filter on",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "List team memberships of a member",
                "description": "List team memberships of a workspace member.\nThe response contains the list of team memberships and a pagination cursor to retrieve the next page.\n\nThe team memberships are sorted by id.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager` except if the requested member is yourself.\n",
                "responses": {
                    "200": {
                        "description": "Team membership list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/124/team_memberships?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamMembership"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests": {
            "get": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "list-team-requests",
                "summary": "List team requests of a team",
                "description": "List pending requests of a team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter requests coming from a specific member",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team request list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/team_requests?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/team_requests?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "create-team-request",
                "summary": "Request access to a team",
                "description": "Create an access request to a team.\n\nYou must be authenticated via a Personal Access Token. You must not already have a pending\nrequest on the team, be a member of the team, be a workspace manager or have the\nrestricted role.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team request created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamRequest"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests/{team_request_id}": {
            "delete": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "delete-team-request",
                "summary": "Cancel or decline a team request",
                "description": "Cancel or decline a team request.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager, or\nbe the member who created the request being cancelled.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_request_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team request",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Team request deleted"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/team_requests/{team_request_id}/accept": {
            "post": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "accept-team-request",
                "summary": "Accept a team request",
                "description": "Accept a team request by adding the member to the team.\n\nIf you are using a personal access token, you must have \"can manage\" permission on the team or be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "team_request_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the team request",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "TeamMembership",
                                "properties": {
                                    "team_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/TeamPermissionEnum"
                                            }
                                        ],
                                        "example": "cannot_manage"
                                    },
                                    "incident_permission": {
                                        "type": "string",
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                                            }
                                        ],
                                        "example": "can_view"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Team request accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/teamMembership"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/members/{member_id}/team_requests": {
            "get": {
                "tags": [
                    "Team Requests"
                ],
                "operationId": "list-member-team-requests",
                "summary": "List team requests of a member",
                "description": "List pending team requests of a member.\n\nIf you are using a personal access token, you need to be either a workspace manager or the member being queried.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/member_id"
                    },
                    {
                        "name": "team_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Filter requests to a specific team",
                            "example": 1234
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team request list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/members/124/team_requests?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/members/124/team_requests?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/teamRequest"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "members:read",
                            "teams:read"
                        ]
                    }
                ]
            }
        },
        "/v1/teams/{team_id}/sources": {
            "get": {
                "tags": [
                    "Team Sources"
                ],
                "operationId": "list-team-sources",
                "summary": "List team sources",
                "description": "List sources belonging to a team's perimeter.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "$ref": "#/components/parameters/team_id"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Sources matching this search.",
                            "example": "test-repository"
                        }
                    },
                    {
                        "name": "last_scan_status",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ScanStatusEnum"
                                }
                            ],
                            "description": "Filter sources based on the status of their latest historical scan."
                        }
                    },
                    {
                        "name": "health",
                        "in": "query",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/SourceHealthEnum"
                                }
                            ],
                            "description": "Filter sources based on their health status."
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by integration type.",
                            "example": "github",
                            "enum": [
                                "bitbucket",
                                "github",
                                "gitlab",
                                "azure_devops"
                            ]
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "last_scan_date",
                                "-last_scan_date"
                            ]
                        }
                    },
                    {
                        "name": "visibility",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by visibility status.",
                            "example": "public",
                            "enum": [
                                "public",
                                "private",
                                "internal"
                            ]
                        }
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter by specific external id.",
                            "example": "1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Source list",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/teams/124/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/teams/124/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/source"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Team Sources"
                ],
                "operationId": "update-team-sources",
                "summary": "Update a team perimeter",
                "description": "This endpoint allows you to add and remove sources from the perimeter of a team.\n\nIf you are using a personal access token, you need to be a workspace manager.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/team_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "sources_to_add": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "description": "Ids of sources to add to the perimeter."
                                    },
                                    "sources_to_remove": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "description": "Ids of sources to remove from the perimeter."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Team perimeter updated"
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionDeniedError"
                    },
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "teams:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens": {
            "get": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "list-honeytoken",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Status of a honeytoken.",
                            "enum": [
                                "triggered",
                                "active",
                                "revoked"
                            ]
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Type of a honeytoken.",
                            "enum": [
                                "AWS"
                            ]
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search honeytokens based on their name and/or description."
                        }
                    },
                    {
                        "name": "creator_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Member id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "revoker_id",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "description": "Member id of the honeytoken revoker."
                        }
                    },
                    {
                        "name": "creator_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Token id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "revoker_api_token_id",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Token id of the honeytoken creator."
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of tags to filter on."
                        }
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "triggered_at",
                                "-triggered_at",
                                "revoked_at",
                                "-revoked_at",
                                "name",
                                "-name"
                            ]
                        }
                    },
                    {
                        "name": "show_token",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Show token details (`access_token_id` and `secret_key`)."
                        }
                    }
                ],
                "summary": "List honeytokens",
                "description": "This endpoint allows you to list all the honeytokens of your workspace.\n\nThe response contains the list of honeytokens and a pagination cursor to retrieve the next page.\n\nThe honeytokens are sorted by id.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager`.\n",
                "responses": {
                    "200": {
                        "description": "List honeytokens",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeytoken"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "create-honeytoken",
                "summary": "Create a honeytoken",
                "description": "This endpoint allows you to create a honeytoken of a type.\n\nIf you are using a personal access token, you need to have a role superior or equal to `manager`.\n",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken",
                                "required": [
                                    "name",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "honeytoken name",
                                        "description": "honeytoken name.\n"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "This honeytoken was placed in the repository test",
                                        "description": "honeytoken description.\n"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "AWS",
                                        "enum": [
                                            "AWS"
                                        ],
                                        "description": "honeytoken type\n"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "Labels to set on the honeytoken. If the label doesn't exist, it will be created.",
                                        "items": {
                                            "$ref": "#/components/schemas/honeyTokenLabel"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Honeytoken created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "409": {
                        "$ref": "#/components/responses/ConflictError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}": {
            "get": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "retrieve-honeytoken",
                "summary": "Retrieve a honeytoken",
                "description": "Retrieve an existing honeytoken.\n\nIf you are using a personal access token, you need to have a role greater or equal to `manager`.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "show_token",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "description": "Show token details (`access_token_id` and `secret_key`)."
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "update-honeytoken",
                "summary": "Update a honeytoken",
                "description": "Update a name or descriptions of an existing honeytoken.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "name and description",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "test-honeytoken",
                                        "description": "A new honeytoken name"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "honeytoken in repository test",
                                        "description": "A new honeytoken description"
                                    },
                                    "labels": {
                                        "type": "array",
                                        "description": "A new set of labels for the honeytoken. Will completely override the former labels.",
                                        "items": {
                                            "$ref": "#/components/schemas/honeyTokenLabel"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The honeytoken was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/reset": {
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "reset-honeytoken",
                "summary": "Reset the honeytoken",
                "description": "Resets a triggered honeytoken. All the associated events will be closed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken was successfully revoked.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/revoke": {
            "post": {
                "tags": [
                    "Honeytokens"
                ],
                "operationId": "revoke-honeytoken",
                "summary": "Revoke the honeytoken",
                "description": "Revokes an active or triggered honeytoken. All the associated events will be closed.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken was successfully revoked.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeytoken"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/notes": {
            "get": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "list-honeytoken-notes",
                "summary": "List notes on an honeytoken",
                "description": "List notes left on a honeytoken in chronological order.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "created_at",
                                "-created_at",
                                "updated_at",
                                "-updated_at"
                            ]
                        }
                    },
                    {
                        "name": "member_id",
                        "in": "query",
                        "description": "Filter by member id.",
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "api_token_id",
                        "in": "query",
                        "description": "Entries matching this API token id.",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search notes based on the comment field content.",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Note List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenNote"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "create-honeytoken-note",
                "summary": "Create an honeytoken note",
                "description": "Add a note on a honeytoken.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Note Request",
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "example": "I revoked this honeytoken",
                                        "description": "Content of the honeytoken note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The note was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/notes/{note_id}": {
            "patch": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "update-honeytoken-note",
                "summary": "Update a honeytoken note",
                "description": "Update an existing comment on a honeytoken. Only honeytoken notes\ncreated by the current API key can be updated.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the honeytoken note to update",
                        "schema": {
                            "type": "string",
                            "readOnly": true,
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Note Request",
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "example": "I revoked this",
                                        "description": "Content of the honeytoken note"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The note was updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenNote"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot update an Honeytoken Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken or Honeytoken Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Honeytoken Notes"
                ],
                "operationId": "delete-honeytoken-note",
                "summary": "Delete a honeytoken note",
                "description": "Delete an existing comment on a honeytoken. Only honeytoken notes\ncreated by the current API key can be deleted.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "name": "note_id",
                        "in": "path",
                        "required": true,
                        "description": "The id of the honeytoken note to update",
                        "schema": {
                            "type": "string",
                            "readOnly": true,
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The note was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "You cannot delete an Honeytoken Note you that was not created by\nthe current API key.\n",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Honeytoken or Honeytoken Note not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/{honeytoken_id}/sources": {
            "get": {
                "tags": [
                    "Honeytoken Sources"
                ],
                "operationId": "list-honeytoken-sources",
                "summary": "List sources on an honeytoken",
                "description": "List sources where a honeytoken appears.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/honeytoken_id"
                    },
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'.\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "source_id",
                                "-source_id"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Sources List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/sources?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/sources?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenSource"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "404": {
                        "description": "Honeytoken not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens_events": {
            "get": {
                "tags": [
                    "Honeytokens Events"
                ],
                "operationId": "list-honeytokens-events",
                "summary": "List all honeytokens events",
                "description": "List events related to all honeytokens of the workspace.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "ordering",
                        "in": "query",
                        "description": "Sort the results by their field value. The default sort is ASC, DESC if the\nfield is preceded by a '-'\n",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "triggered_at",
                                "-triggered_at"
                            ]
                        }
                    },
                    {
                        "name": "honeytoken_id",
                        "in": "query",
                        "description": "Filter by honeytoken id",
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "open",
                                "archived",
                                "allowed"
                            ],
                            "default": "open"
                        }
                    },
                    {
                        "name": "ip_address",
                        "in": "query",
                        "description": "Filter by ip address",
                        "schema": {
                            "type": "string",
                            "example": "8.8.8.8"
                        }
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Comma-separated list of tags to filter on"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Search events based on the `data` field content",
                        "schema": {
                            "type": "string",
                            "example": "I revoked this"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytokens Events List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens_events?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens_events?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenEvent"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/labels": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "operationId": "list-honeytoken-labels",
                "summary": "List labels",
                "description": "List labels created for honeytokens in chronological order.\n",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/cursor"
                    },
                    {
                        "$ref": "#/components/parameters/per_page"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search string to filter only labels which contains the search string in either its key or value. The search string can also be in the key:value format.",
                            "example": "env:production"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Filter only labels which have the given key.",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Honeytoken Labels List",
                        "headers": {
                            "Link": {
                                "schema": {
                                    "type": "string",
                                    "description": "Links toward the previous and next pages if they exist",
                                    "example": "<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"next\",<http://api.gitguardian.com/v1/honeytokens/1/notes?cursor=cD0xNTA%3D>; rel=\"prev\""
                                }
                            },
                            "X-Per-Page": {
                                "$ref": "#/components/headers/xPerPage"
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/honeyTokenLabel"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:read"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "Labels"
                ],
                "operationId": "create-honeytoken-label",
                "summary": "Create a label",
                "description": "Create a label for honeytokens.\n",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Label Request",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "example": "env",
                                        "description": "Label's key's content."
                                    },
                                    "value": {
                                        "type": "string",
                                        "example": "production",
                                        "description": "Label's value's content."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The label was created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/honeyTokenLabel"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "patch": {
                "tags": [
                    "Labels"
                ],
                "operationId": "patch-honeytoken-label-key",
                "summary": "Update a key",
                "description": "Rename a label key. It will be renamed in all the labels using this key.\n",
                "parameters": [
                    {
                        "name": "old_key",
                        "in": "query",
                        "required": true,
                        "description": "an existing key that we want to rename",
                        "schema": {
                            "type": "string",
                            "example": "env"
                        }
                    },
                    {
                        "name": "new_key",
                        "in": "query",
                        "required": true,
                        "description": "a new name of the key",
                        "schema": {
                            "type": "string",
                            "example": "env prod"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The key was changed successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Labels"
                ],
                "operationId": "delete-honeytoken-label-key",
                "summary": "Delete a key",
                "description": "Delete a key. All the labels using this key will be deleted.\n",
                "parameters": [
                    {
                        "name": "key",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "A specified key to use to delete all labels which have the key matched.",
                            "example": "env"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The key was deleted successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/honeytokens/labels/{label_id}": {
            "patch": {
                "tags": [
                    "Labels"
                ],
                "operationId": "patch-honeytoken-label",
                "summary": "Update a value",
                "description": "Rename the value of a label.\n",
                "parameters": [
                    {
                        "name": "label_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the label.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Honeytoken Label Request",
                                "properties": {
                                    "value": {
                                        "type": "string",
                                        "example": "production",
                                        "description": "New value for the label."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "The value was changed successfully."
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequestError"
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Labels"
                ],
                "operationId": "delete-honeytoken-label",
                "summary": "Delete a label",
                "description": "Delete a label for honeytokens.\n",
                "parameters": [
                    {
                        "name": "label_id",
                        "in": "path",
                        "required": true,
                        "description": "Id of the label.",
                        "schema": {
                            "type": "string",
                            "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The label was deleted successfully."
                    },
                    "401": {
                        "$ref": "#/components/responses/UnauthorizedError"
                    },
                    "403": {
                        "description": "Forbidden Call",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        }
                    },
                    "503": {
                        "$ref": "#/components/responses/MaintenanceResponse"
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "honeytokens:write"
                        ]
                    }
                ]
            }
        },
        "/v1/sca/compute_sca_files": {
            "get": {
                "tags": [
                    "SCA"
                ],
                "operationId": "compute-sca-files",
                "summary": "Compute SCA files amongst a list of files.",
                "description": "Compute SCA files amongst a list of files.",
                "parameters": [
                    {
                        "in": "query",
                        "name": "files",
                        "schema": {
                            "type": "string"
                        },
                        "description": "List of input files, comma separated."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "ComputeSCAFilesOutputSchema",
                                    "type": "object",
                                    "properties": {
                                        "sca_files": {
                                            "title": "SCA Files",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "potential_siblings": {
                                            "title": "Potential Siblings",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "security": [
                    {
                        "APIKey": [
                            "scan"
                        ]
                    }
                ]
            }
        },
        "/v1/sca/sca_scan_all": {
            "post": {
                "operationId": "sca-scan-all",
                "description": "Scan a directory using GitGuardian SCA engine",
                "summary": "Scan a directory using GitGuardian SCA engine",
                "tags": [
                    "SCA"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "title": "SCAScanAllInputSchema",
                                "type": "object",
                                "properties": {
                                    "scan_parameters": {
                                        "title": "Scan Parameters",
                                        "default": {
                                            "minimum_severity": null,
                                            "ignored_vulnerabilities": []
                                        },
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/SCAScanTarParameters"
                                            }
                                        ]
                                    },
                                    "directory": {
                                        "title": "Directory",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "directory"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "SCAScanAllOutputSchema",
                                    "type": "object",
                                    "properties": {
                                        "scanned_files": {
                                            "title": "Scanned Files",
                                            "default": [],
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "found_package_vulns": {
                                            "title": "Found Package Vulns",
                                            "default": [],
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationOutputSchema"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        },
        "/v1/sca/sca_scan_diff": {
            "post": {
                "operationId": "sca-scan-diff",
                "description": "Scan a diff using GitGuardian SCA engine",
                "summary": "Scan a diff using GitGuardian SCA engine",
                "tags": [
                    "SCA"
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "title": "SCAScanDiffInputSchema",
                                "type": "object",
                                "properties": {
                                    "scan_parameters": {
                                        "title": "Scan Parameters",
                                        "default": {
                                            "minimum_severity": null,
                                            "ignored_vulnerabilities": []
                                        },
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/SCAScanTarParameters"
                                            }
                                        ]
                                    },
                                    "reference": {
                                        "title": "Reference",
                                        "type": "string"
                                    },
                                    "current": {
                                        "title": "Current",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reference",
                                    "current"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "SCAScanDiffOutputSchema",
                                    "type": "object",
                                    "properties": {
                                        "scanned_files": {
                                            "title": "Scanned Files",
                                            "default": [],
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "added_vulns": {
                                            "title": "Added Vulns",
                                            "default": [],
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationOutputSchema"
                                            }
                                        },
                                        "removed_vulns": {
                                            "title": "Removed Vulns",
                                            "default": [],
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocationOutputSchema"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {}
                                }
                            }
                        },
                        "description": ""
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "document": {
                "type": "object",
                "title": "Document",
                "required": [
                    "document"
                ],
                "properties": {
                    "filename": {
                        "type": "string",
                        "example": ".env",
                        "maxLength": 256
                    },
                    "document": {
                        "type": "string",
                        "example": "\nimport urllib.request\nurl = 'http://jen_barber:correcthorsebatterystaple@cake.gitguardian.com/isreal.json'\nresponse = urllib.request.urlopen(url)\nconsume(response.read())\n"
                    }
                }
            },
            "error": {
                "type": "object",
                "title": "Error",
                "description": "Error obtained in an API response",
                "required": [
                    "detail"
                ],
                "properties": {
                    "detail": {
                        "type": "string",
                        "description": "Details on response."
                    }
                }
            },
            "quota": {
                "type": "object",
                "title": "Quota Overview",
                "required": [
                    "content"
                ],
                "properties": {
                    "content": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer"
                            },
                            "limit": {
                                "type": "integer"
                            },
                            "remaining": {
                                "type": "integer"
                            },
                            "since": {
                                "type": "string",
                                "format": "date"
                            }
                        }
                    }
                },
                "example": {
                    "content": {
                        "count": 2,
                        "limit": 5000,
                        "remaining": 4998,
                        "since": "2021-04-18"
                    }
                }
            },
            "apiTokenDetails": {
                "type": "object",
                "title": "API Token Details",
                "description": "Details of an API Token",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Id of API token",
                        "example": "5ddaad0c-5a0c-4674-beb5-1cd198d13360"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of API token",
                        "example": "myTokenName"
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APITokenTypeEnum"
                            }
                        ],
                        "example": "personal_access_token"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/APITokenStatusEnum"
                            }
                        ],
                        "example": "revoked"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Creation date of the API token",
                        "example": "2023-05-20T12:40:55.662949Z"
                    },
                    "last_used_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Last usage of the API token",
                        "example": "2023-05-24T12:40:55.662949Z"
                    },
                    "expire_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Expiration date of the API token",
                        "example": null
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "Revocation date of the API token",
                        "example": "2023-05-27T12:40:55.662949Z"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Member id",
                        "example": 22015
                    },
                    "creator_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Creator id",
                        "example": 22015
                    },
                    "scopes": {
                        "type": "array",
                        "description": "List of scopes",
                        "minItems": 0,
                        "items": {
                            "$ref": "#/components/schemas/APITokenScopeEnum"
                        },
                        "example": [
                            "incidents:read",
                            "scan"
                        ]
                    }
                }
            },
            "scanResult": {
                "type": "object",
                "title": "Scan Result",
                "description": "Result of a content scan.",
                "required": [
                    "policy_break_count",
                    "policies",
                    "policy_breaks"
                ],
                "properties": {
                    "policy_break_count": {
                        "type": "integer",
                        "description": "Number of policy breaks on this document.",
                        "minimum": 0,
                        "example": 2
                    },
                    "policies": {
                        "type": "array",
                        "description": "Policies checked on this document.",
                        "minItems": 0,
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Filename",
                            "File extensions",
                            "Secrets detection"
                        ]
                    },
                    "policy_breaks": {
                        "type": "array",
                        "description": "List of policy breaks.",
                        "minItems": 0,
                        "items": {
                            "$ref": "#/components/schemas/policyBreak"
                        },
                        "example": [
                            {
                                "type": ".env",
                                "policy": "Filenames",
                                "matches": [
                                    {
                                        "type": "filename",
                                        "match": ".env"
                                    }
                                ]
                            },
                            {
                                "type": "Basic Auth String",
                                "policy": "Secrets detection",
                                "validity": "cannot_check",
                                "matches": [
                                    {
                                        "type": "username",
                                        "match": "jen_barber",
                                        "index_start": 52,
                                        "index_end": 61,
                                        "line_start": 2,
                                        "line_end": 2
                                    },
                                    {
                                        "type": "password",
                                        "match": "correcthorsebatterystaple",
                                        "index_start": 63,
                                        "index_end": 87,
                                        "line_start": 2,
                                        "line_end": 2
                                    },
                                    {
                                        "type": "host",
                                        "match": "cake.gitguardian.com",
                                        "index_start": 89,
                                        "index_end": 108,
                                        "line_start": 2,
                                        "line_end": 2
                                    }
                                ]
                            }
                        ]
                    }
                }
            },
            "policyBreak": {
                "type": "object",
                "title": "Policy Break",
                "description": "Issue found in your Document",
                "required": [
                    "type",
                    "policy",
                    "matches"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Type of detected policy."
                    },
                    "policy": {
                        "type": "string",
                        "description": "Name of failing policy."
                    },
                    "validity": {
                        "type": "string",
                        "nullable": true,
                        "enum": [
                            "no_checker",
                            "valid",
                            "invalid",
                            "failed_to_check",
                            "unknown"
                        ],
                        "description": "Validity of the found secret."
                    },
                    "matches": {
                        "type": "array",
                        "description": "List of secret matches.",
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "required": [
                                "type",
                                "match"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Type of match"
                                },
                                "match": {
                                    "type": "string",
                                    "description": "Matched string of failure"
                                },
                                "line_start": {
                                    "type": "integer",
                                    "description": "start line number of match (index origin = 1)"
                                },
                                "line_end": {
                                    "type": "integer",
                                    "description": "end line number of match (index origin = 1)"
                                },
                                "index_start": {
                                    "type": "integer",
                                    "description": "start index of match in file as an array (index origin = 0)"
                                },
                                "index_end": {
                                    "type": "integer",
                                    "description": "end index of match in file as an array (index origin = 0)"
                                }
                            }
                        }
                    },
                    "known_secret": {
                        "type": "boolean",
                        "description": "Indicates whether the secret is known by your GitGuardian dashboard.\n"
                    },
                    "incident_url": {
                        "type": "string",
                        "description": "The incident's URL on your GitGuardian dashboard, if it is a known secret, or\nan empty string otherwise.\n"
                    }
                }
            },
            "match": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Match name",
                        "example": "apikey"
                    },
                    "indice_start": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match start index",
                        "example": 32
                    },
                    "indice_end": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match end index",
                        "example": 79
                    },
                    "pre_line_start": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "title": "Match start line before Git patch",
                        "example": null
                    },
                    "pre_line_end": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "title": "Match end line before Git patch",
                        "example": null
                    },
                    "post_line_start": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match start line after Git patch",
                        "example": 1
                    },
                    "post_line_end": {
                        "type": "integer",
                        "readOnly": true,
                        "title": "Match end line after Git patch",
                        "example": 1
                    }
                },
                "required": [
                    "indice_end",
                    "indice_start",
                    "name",
                    "post_line_end",
                    "post_line_start",
                    "pre_line_end",
                    "pre_line_start"
                ]
            },
            "scan": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of this historical scan",
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ScanStatusEnum"
                            }
                        ],
                        "example": "finished",
                        "readOnly": true
                    },
                    "failing_reason": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Failure reason of the historical scan, if status is failed",
                        "example": "DMCA takedown"
                    },
                    "commits_scanned": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of commits scanned",
                        "example": 123
                    },
                    "branches_scanned": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of branches scanned",
                        "example": 2
                    },
                    "duration": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Historical scan duration",
                        "example": "1:30.454444"
                    }
                }
            },
            "_base_incident": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Last trigger date",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "detector": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/detector"
                            }
                        ],
                        "readOnly": true
                    },
                    "secret_hash": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Unique hash",
                        "example": "Ri9FjVgdOlPnBmujoxP4XPJcbe82BhJXB/SAngijw/juCISuOMgPzYhV28m6OG24"
                    },
                    "hmsl_hash": {
                        "type": "string",
                        "readOnly": true,
                        "title": "Unique HasMySecretLeaked hash",
                        "example": "05975add34ddc9a38a0fb57c7d3e676ffed57080516fc16bf8d8f14308fedb86"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3899"
                    },
                    "regression": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/StatusEnum"
                            }
                        ],
                        "readOnly": true
                    },
                    "assignee_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 309
                    },
                    "assignee_email": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "example": "eric@gitguardian.com"
                    },
                    "occurrences_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4
                    },
                    "ignore_reason": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SecretStatusEnum"
                            }
                        ],
                        "nullable": true,
                        "readOnly": true,
                        "example": "test_credential"
                    },
                    "ignored_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2019-08-24T14:15:22Z"
                    },
                    "ignorer_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 309
                    },
                    "ignorer_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                    },
                    "resolver_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 395
                    },
                    "resolver_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": "fdf075f9-1662-4cf1-9171-af50568158a8"
                    },
                    "secret_revoked": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false
                    },
                    "severity": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SeverityEnum"
                            }
                        ],
                        "example": "high"
                    },
                    "validity": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ValidityEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "valid"
                    },
                    "resolved_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null
                    },
                    "share_url": {
                        "type": "string",
                        "nullable": true,
                        "readOnly": true,
                        "example": "https://dashboard.gitguardian.com/share/incidents/11111111-1111-1111-1111-111111111111"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagEnum"
                        },
                        "readOnly": true,
                        "example": [
                            "FROM_HISTORICAL_SCAN",
                            "SENSITIVE_FILE"
                        ]
                    }
                }
            },
            "incident": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/_base_incident"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "occurrences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/vcsOccurrence"
                                },
                                "readOnly": true
                            }
                        }
                    }
                ]
            },
            "incidentWithoutOccurrences": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/_base_incident"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "occurrences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/vcsOccurrence"
                                },
                                "nullable": true,
                                "readOnly": true,
                                "example": null
                            }
                        }
                    }
                ]
            },
            "incidentNote": {
                "type": "object",
                "title": "Incident Note",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 17
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 42,
                        "description": "Id of the related Incident"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the member who created this note. Can be null if the note was\nnot created by a member or if the member was deleted.\n"
                    },
                    "api_token": {
                        "type": "string",
                        "deprecated": true,
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "Name of the API key which created this note. Can be null if the note\nwas not created via the API. Use `api_token_id` instead.\n"
                    },
                    "api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "ID of the API key which created this note. Can be null if the note\nwas not created via the API.\n"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the note",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "Last time the content of the note was updated. Null if the\ncomment was never modified.\n"
                    },
                    "comment": {
                        "type": "string",
                        "nullable": true,
                        "example": "I revoked this secret"
                    },
                    "issue_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 42,
                        "description": "Id of the related Incident. Use `incident_id` instead.",
                        "deprecated": true
                    },
                    "user_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the user who created this note. Can be null if the note was\nnot created by a user or if the user was deleted. Use `member_id` instead.\n",
                        "deprecated": true
                    }
                }
            },
            "incidentToken": {
                "type": "object",
                "title": "Incident Sharing Information",
                "properties": {
                    "share_url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://dashboard.gitguardian.com/share/incidents/11111111-1111-1111-1111-111111111111"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "feedback_collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": true,
                        "description": "Allow the developer to submit their feedback through the share link"
                    },
                    "auto_healing": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": false,
                        "description": "Allow the developer to resolve or ignore through the share link"
                    },
                    "token": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678-1234-1234-1234-123456789012"
                    },
                    "expire_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2019-08-24T14:15:22Z"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": null
                    }
                }
            },
            "occurrence": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4421
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "kind": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OccurrenceKindEnum"
                            }
                        ],
                        "readOnly": true,
                        "title": "Kind when created"
                    },
                    "source": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/source"
                            }
                        ],
                        "readOnly": true
                    },
                    "author_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Eric"
                    },
                    "author_info": {
                        "type": "string",
                        "readOnly": true,
                        "example": "eric@gitguardian.com"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Publish date",
                        "example": "2021-05-20T12:40:55.662949Z"
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true,
                        "example": "https://github.com/prm-dev-team/QATest_staging/commit/76dd18a2a8d27eaf00a45851cc7731c53b59ed19#diff-0f372f3171c8f13a15a22a1081487ed54fa70ad088e17c6c6386196a179a04ffR1"
                    },
                    "matches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/match"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagEnum"
                        },
                        "example": [
                            "FROM_HISTORICAL_SCAN",
                            "SENSITIVE_FILE"
                        ]
                    }
                }
            },
            "vcsOccurrence": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/occurrence"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "sha": {
                                "type": "string",
                                "nullable": true,
                                "readOnly": true,
                                "title": "Commit SHA",
                                "example": "d670460b4b4aece5915caf5c68d12f560a9fe3e4"
                            },
                            "presence": {
                                "type": "string",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PresenceEnum"
                                    }
                                ],
                                "example": "present"
                            },
                            "filepath": {
                                "type": "string",
                                "readOnly": true,
                                "nullable": true,
                                "description": "This is filename for old models with incomplete data",
                                "example": "test_data/12123testfile.txt"
                            }
                        }
                    }
                ]
            },
            "detector": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "slack_bot_token"
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Slack Bot Token"
                    },
                    "nature": {
                        "type": "string",
                        "readOnly": true,
                        "example": "specific"
                    },
                    "family": {
                        "type": "string",
                        "readOnly": true,
                        "example": "apikey"
                    },
                    "detector_group_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "slackbot_token"
                    },
                    "detector_group_display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Slack Bot Token"
                    }
                },
                "required": [
                    "name",
                    "display_name",
                    "nature"
                ]
            },
            "detectorGroup": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "aws_iam"
                    },
                    "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "AWS Keys"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DetectorGroupTypeEnum"
                            }
                        ],
                        "example": "specific"
                    },
                    "category": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Cloud Provider"
                    },
                    "is_active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the detector is currently enabled on the workspace",
                        "example": true
                    },
                    "scans_code_only": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether the detector can scan other kinds of resources than VCS ones",
                        "example": false
                    },
                    "checkable": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Indicates whether this detector has a validity checker",
                        "example": true
                    },
                    "use_with_validity_check_disabled": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "If false, this detector will not be used if secret validity check is disabled on the workspace"
                    },
                    "frequency": {
                        "type": "number",
                        "readOnly": true,
                        "description": "Number of secrets found per million of commits from GitGuardian experience of open-source monitoring",
                        "example": "1O3.74"
                    },
                    "removed_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Date at which this detector was disabled by GitGuardian",
                        "example": null
                    },
                    "open_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of open secret incidents on the workspace associated to this detector",
                        "example": 17
                    },
                    "ignored_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of ignored secret incidents on the workspace associated to this detector",
                        "example": 9
                    },
                    "resolved_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of resolved secret incidents on the workspace associated to this detector",
                        "example": 42
                    }
                }
            },
            "invitation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org"
                    },
                    "role": {
                        "readOnly": true,
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/NonOwnerMemberRoleEnum"
                            }
                        ]
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the invitation",
                        "example": "2019-08-22T14:15:22Z"
                    }
                }
            },
            "incidentInvitation": {
                "type": "object",
                "properties": {
                    "invitation_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the invitation object\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    }
                }
            },
            "member": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "John Smith"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org"
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MemberRoleEnum"
                            }
                        ]
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-06-28T16:40:26.897Z"
                    },
                    "last_login": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "readOnly": true,
                        "example": "2023-06-28T16:40:26.897Z"
                    }
                }
            },
            "incidentMember": {
                "type": "object",
                "properties": {
                    "member_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Member object (replaces the id field)\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    },
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234,
                        "deprecated": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "John Smith",
                        "deprecated": true
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "readOnly": true,
                        "example": "john.smith@example.org",
                        "deprecated": true
                    },
                    "role": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MemberRoleEnum"
                            }
                        ],
                        "readOnly": true,
                        "deprecated": true
                    }
                }
            },
            "source": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 6531
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "readOnly": true,
                        "example": "https://github.com/GitGuardian/gg-shield"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "example": "github"
                    },
                    "full_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "gitguardian/gg-shield"
                    },
                    "health": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SourceHealthEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "at_risk"
                    },
                    "default_branch": {
                        "type": "string",
                        "readOnly": true,
                        "example": "main",
                        "description": "Default branch of the source repository."
                    },
                    "default_branch_head": {
                        "type": "string",
                        "readOnly": true,
                        "example": "abcd97b4aaf927ea934504263322e75e86c31xyz",
                        "description": "Reference of the HEAD of the default branch."
                    },
                    "open_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of open secret incidents with at least one occurrence on this source.\n",
                        "example": 3
                    },
                    "closed_incidents_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Number of closed secret incidents with at least one occurrence on this source.\n",
                        "example": 2
                    },
                    "visibility": {
                        "type": "string",
                        "readOnly": true,
                        "example": "public"
                    },
                    "external_id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "VCS identifier of the source (e.g.: the GitHub id for a GitHub repository). Warning: external_id is a string because some VCS ids can be UUIDs.\n",
                        "example": "125"
                    },
                    "last_scan": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/scan"
                            }
                        ],
                        "readOnly": true
                    }
                }
            },
            "auditLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3759
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "title": "Date the event occurred",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "member_email": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "eric@gitguardian.com"
                    },
                    "member_name": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true,
                        "example": "Eric",
                        "description": "Name of the member at the time he/she did the event. It may differ from the current name\nof the member if it has been updated since.\n"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 1243,
                        "description": "ID of the member that did the event. Can be null if the member has been deleted since then:\nin that case use `member_name` and `member_email` to identify the author of the action.\n"
                    },
                    "api_token_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 1243,
                        "description": "ID of the API token associated to the event if it was done through the API"
                    },
                    "ip_address": {
                        "type": "string",
                        "readOnly": true,
                        "nullable": true
                    },
                    "target_ids": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "integer"
                        },
                        "example": [
                            1243,
                            3423
                        ]
                    },
                    "action_type": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AuditLogActionTypeEnum"
                            }
                        ],
                        "example": "READ",
                        "readOnly": true
                    },
                    "event_name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "user.logged_in"
                    },
                    "data": {
                        "type": "object",
                        "readOnly": true,
                        "nullable": true,
                        "description": "Additional data associated to the event.",
                        "example": "{type: github_sso}"
                    }
                }
            },
            "team": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "name": {
                        "type": "string",
                        "example": "feature team A"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true,
                        "description": "team description.",
                        "example": "Description of my team"
                    },
                    "is_global": {
                        "type": "boolean",
                        "example": false,
                        "readOnly": true
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/settings/workspace/teams/1"
                    }
                }
            },
            "teamInvitation": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252
                    },
                    "invitation_id": {
                        "type": "integer",
                        "example": 4851
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 991
                    },
                    "team_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TeamPermissionEnum"
                            }
                        ],
                        "example": "cannot_manage"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "example": "can_edit"
                    }
                }
            },
            "teamMembership": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234
                    },
                    "member_id": {
                        "type": "integer",
                        "description": "Id of a workspace member.",
                        "example": 2489
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4285
                    },
                    "team_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/TeamPermissionEnum"
                            }
                        ],
                        "example": "cannot_manage"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "example": "can_edit"
                    }
                }
            },
            "teamRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1234
                    },
                    "member_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 2489
                    },
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 4285
                    }
                }
            },
            "incidentTeam": {
                "type": "object",
                "properties": {
                    "team_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Team object\n"
                    },
                    "incident_id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 3252,
                        "description": "The id of the Incident object\n"
                    },
                    "incident_permission": {
                        "type": "string",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/IncidentPermissionEnum"
                            }
                        ],
                        "readOnly": true,
                        "example": "can_edit"
                    }
                }
            },
            "honeytoken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b"
                    },
                    "name": {
                        "type": "string",
                        "example": "honeytoken A"
                    },
                    "description": {
                        "type": "string",
                        "example": "honeytoken used in the repository AA"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the honeytoken",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3bf0ed1b-68b2-4db8-b944-d450c5d35cf4"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "active",
                            "triggered",
                            "revoked"
                        ],
                        "description": "Status of the honeytoken.",
                        "example": "active"
                    },
                    "triggered_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date when the honeytoken was switched from active to triggered the last time",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "revoked_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Date when the honeytoken was revoked",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "open_events_count": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 122
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "AWS"
                        ],
                        "description": "Type of the honeytoken.",
                        "example": "AWS"
                    },
                    "creator_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Id of the member who created this honeytoken.",
                        "example": 122
                    },
                    "revoker_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "description": "Id of the member who revoked this honeytoken.",
                        "example": 122
                    },
                    "creator_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "ID of the API key which created this honeytoken. Can be null if the honeytoken\nwas not created via the API.\n"
                    },
                    "revoker_api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "ID of the API key which created honeytoken note. Can be null if the honeytoken\nwas not created via the API.\n"
                    },
                    "token": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Secret to be placed as a honeytoken.",
                        "example": {
                            "access_token_id": "AAAA",
                            "secret_key": "BBB"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HoneyTokenEventTag"
                        },
                        "example": [
                            "publicly_exposed"
                        ]
                    },
                    "labels": {
                        "type": "array",
                        "description": "Labels set on the honeytoken.",
                        "items": {
                            "$ref": "#/components/schemas/honeyTokenLabel"
                        }
                    }
                }
            },
            "honeyTokenNote": {
                "type": "object",
                "title": "Honeytoken Note",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "1b99892e-6254-4f8a-9e98-559ed810b7da"
                    },
                    "honeytoken_id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b",
                        "description": "Id of the related Honeytoken"
                    },
                    "member_id": {
                        "type": "integer",
                        "nullable": true,
                        "readOnly": true,
                        "example": 38,
                        "description": "Id of the member who created this note. Can be null if the note was\nnot created by a member or if the member was deleted.\n"
                    },
                    "api_token_id": {
                        "type": "string",
                        "format": "uuid",
                        "nullable": true,
                        "readOnly": true,
                        "example": null,
                        "description": "ID of the API key which created this note. Can be null if the note\nwas not created via the API.\n"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Creation date of the note",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": null,
                        "description": "Last time the content of the note was updated. Null if the\ncomment was never modified.\n"
                    },
                    "comment": {
                        "type": "string",
                        "example": "I revoked this secret"
                    }
                }
            },
            "honeyTokenEvent": {
                "type": "object",
                "title": "Honeytoken Event",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "0cad1887-d616-4a46-8b5e-4c7b3a70dbaf"
                    },
                    "honeytoken_id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "d45a123f-b15d-4fea-abf6-ff2a8479de5b",
                        "description": "Id of the related Honeytoken."
                    },
                    "triggered_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time on which the honeytoken was triggered. Null if the\nhoneytoken was never triggered.\n",
                        "example": "2019-08-22T14:15:22Z"
                    },
                    "gitguardian_url": {
                        "type": "string",
                        "readOnly": true,
                        "title": "URL on the dashboard",
                        "example": "https://dashboard.gitguardian.com/workspace/1/incidents/3bf0ed1b-68b2-4db8-b944-d450c5d35cf4"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "open",
                            "closed"
                        ],
                        "description": "Status of the honeytoken event.",
                        "example": "open"
                    },
                    "ip_address": {
                        "type": "string",
                        "readOnly": true,
                        "description": "IP address from which the event originates.",
                        "example": "8.8.8.8"
                    },
                    "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The action made through the honeytoken."
                    },
                    "data": {
                        "type": "object",
                        "readOnly": true,
                        "description": "An object with additional data related to the event"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HoneyTokenEventTag"
                        },
                        "example": [
                            "publicly_exposed"
                        ]
                    }
                }
            },
            "honeyTokenSource": {
                "type": "object",
                "title": "Honeytoken Source",
                "properties": {
                    "type": {
                        "type": "string",
                        "example": "github",
                        "enum": [
                            "github",
                            "gitlab",
                            "bitbucket",
                            "azure_devops"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "example": "gitguardian/gg-shield"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "example": "https://github.com/GitGuardian/gg-shield"
                    },
                    "open_issues_count": {
                        "type": "number",
                        "description": "Number of open secret issues with at least one occurrence on this source.\n",
                        "example": 3
                    },
                    "total_files_count": {
                        "type": "number",
                        "description": "Number of files where the honeytoken appears.\n",
                        "example": 2
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Files where the honeytoken appears.",
                        "minItems": 0,
                        "example": [
                            ".env"
                        ]
                    },
                    "source_id": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "honeyTokenLabel": {
                "type": "object",
                "title": "Honeytoken Label",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "format": "uuid",
                        "example": "0cad1887-d616-4a46-8b5e-4c7b3a70dbaf"
                    },
                    "key": {
                        "type": "string",
                        "example": "env"
                    },
                    "value": {
                        "type": "string",
                        "example": "production"
                    }
                }
            },
            "IACScanTarParameters": {
                "title": "IACScanTarParameters",
                "type": "object",
                "properties": {
                    "minimum_severity": {
                        "$ref": "#/components/schemas/SeverityEnumIAC"
                    },
                    "ignored_policies": {
                        "title": "Ignored Policies",
                        "default": [],
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "iacScanResult": {
                "title": "IaC Scan Result",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Scan Id",
                        "type": "string"
                    },
                    "iac_engine_version": {
                        "title": "IaC Engine Version",
                        "type": "string"
                    },
                    "type": {
                        "title": "Scan Type",
                        "type": "string"
                    },
                    "entities_with_incidents": {
                        "title": "Entities With Incidents",
                        "$ref": "#/components/schemas/entitiesWithIncidents"
                    }
                }
            },
            "iacDiffScanResult": {
                "title": "IaC Diff Scan Result",
                "type": "object",
                "properties": {
                    "id": {
                        "title": "Scan Id",
                        "type": "string"
                    },
                    "iac_engine_version": {
                        "title": "IaC Engine Version",
                        "type": "string"
                    },
                    "type": {
                        "title": "Scan Type",
                        "type": "string"
                    },
                    "entities_with_incidents": {
                        "title": "Categorized Vulnerabilities",
                        "type": "object",
                        "properties": {
                            "new": {
                                "title": "New Vulnerabilities",
                                "$ref": "#/components/schemas/entitiesWithIncidents"
                            },
                            "unchanged": {
                                "title": "Unchanged Vulnerabilities",
                                "$ref": "#/components/schemas/entitiesWithIncidents"
                            },
                            "deleted": {
                                "title": "Deleted Vulnerabilities",
                                "$ref": "#/components/schemas/entitiesWithIncidents"
                            }
                        }
                    }
                }
            },
            "entitiesWithIncidents": {
                "type": "array",
                "description": "Files and their incidents",
                "items": {
                    "type": "object",
                    "required": [
                        "filename",
                        "incidents"
                    ],
                    "properties": {
                        "filename": {
                            "type": "string",
                            "description": "File name"
                        },
                        "incidents": {
                            "title": "Incidents",
                            "description": "Incidents detected in the file",
                            "type": "array",
                            "required": [
                                "policy",
                                "policy_id",
                                "severity",
                                "component",
                                "line_start",
                                "line_end",
                                "description",
                                "documentation_url"
                            ],
                            "items": {
                                "type": "object",
                                "properties": {
                                    "policy": {
                                        "type": "string",
                                        "description": "Policy involved with the vulnerability"
                                    },
                                    "policy_id": {
                                        "type": "string",
                                        "description": "Policy id"
                                    },
                                    "severity": {
                                        "type": "string",
                                        "description": "Severity of the vulnerability"
                                    },
                                    "component": {
                                        "type": "string",
                                        "description": "Component in which the vulnerability has been found"
                                    },
                                    "line_start": {
                                        "type": "integer",
                                        "description": "Starting line of the vulnerability block"
                                    },
                                    "line_end": {
                                        "type": "integer",
                                        "description": "Ending line of the vulnerability block"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Vulnerability description"
                                    },
                                    "documentation_url": {
                                        "type": "string",
                                        "description": "Vulnerability documentation"
                                    },
                                    "gitguardian_url": {
                                        "type": "string",
                                        "description": "The URL of the incident on your GitGuardian dashboard, if it is a known vulnerability."
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The status of the incident on your GitGuardian dashboard, if it is a known vulnerability.",
                                        "$ref": "#/components/schemas/IACStatusEnum"
                                    },
                                    "ignored_until": {
                                        "type": "string",
                                        "format": "date-time",
                                        "nullable": true,
                                        "description": "The date when the incident will no longer be ignored on your GitGuardian Dashboard, if it is a known vulnerability (null if the incident is ignored permanently or not ignored)."
                                    },
                                    "ignore_reason": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "The reason selected for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if the incident is not ignored)."
                                    },
                                    "ignore_comment": {
                                        "type": "string",
                                        "nullable": true,
                                        "description": "The comment provided for ignoring the incident on your GitGuardian dashboard, if it is a known vulnerability (null if no comment has been provided or if the incident is not ignored)."
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SCAScanTarParameters": {
                "title": "SCAScanTarParameters",
                "type": "object",
                "properties": {
                    "minimum_severity": {
                        "$ref": "#/components/schemas/SeverityEnum"
                    },
                    "ignored_vulnerabilities": {
                        "title": "Ignored Vulnerabilities",
                        "default": [],
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SCAIgnoredVulnerability"
                        }
                    }
                }
            },
            "SCAIgnoredVulnerability": {
                "title": "SCAIgnoredVulnerability",
                "type": "object",
                "properties": {
                    "identifier": {
                        "title": "Identifier",
                        "type": "string"
                    },
                    "path": {
                        "title": "Path",
                        "type": "string"
                    }
                },
                "required": [
                    "identifier",
                    "path"
                ]
            },
            "LocationOutputSchema": {
                "title": "LocationOutputSchema",
                "type": "object",
                "properties": {
                    "location": {
                        "title": "Location",
                        "type": "string"
                    },
                    "package_vulns": {
                        "title": "Package Vulns",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PackageVulnerabilityOutputSchema"
                        }
                    }
                },
                "required": [
                    "location",
                    "package_vulns"
                ]
            },
            "DependencyTypeEnum": {
                "enum": [
                    "direct",
                    "transitive"
                ],
                "type": "string"
            },
            "PackageVulnerabilityOutputSchema": {
                "title": "PackageVulnerabilityOutputSchema",
                "type": "object",
                "properties": {
                    "package_full_name": {
                        "title": "Package Full Name",
                        "type": "string"
                    },
                    "version": {
                        "title": "Version",
                        "type": "string"
                    },
                    "ecosystem": {
                        "title": "Ecosystem",
                        "type": "string"
                    },
                    "dependency_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DependencyTypeEnum"
                            }
                        ],
                        "title": "Dependency Type"
                    },
                    "vulns": {
                        "title": "Vulns",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExposedVulnerabilityOutputSchema"
                        }
                    }
                },
                "required": [
                    "package_full_name",
                    "version",
                    "ecosystem",
                    "vulns"
                ]
            },
            "ExposedVulnerabilityOutputSchema": {
                "title": "ExposedVulnerabilityOutputSchema",
                "type": "object",
                "properties": {
                    "cve_ids": {
                        "title": "Cve Ids",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "identifier": {
                        "title": "Identifier",
                        "type": "string"
                    },
                    "severity": {
                        "title": "Severity",
                        "type": "string"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "format": "date-time"
                    },
                    "fixed_version": {
                        "title": "Fixed Version",
                        "type": "string"
                    },
                    "summary": {
                        "title": "Summary",
                        "type": "string"
                    }
                },
                "required": [
                    "cve_ids",
                    "identifier",
                    "severity",
                    "summary"
                ]
            },
            "APITokenStatusEnum": {
                "enum": [
                    "active",
                    "expired",
                    "revoked"
                ],
                "type": "string"
            },
            "APITokenTypeEnum": {
                "enum": [
                    "personal_access_token",
                    "service_account"
                ],
                "type": "string"
            },
            "APITokenScopeEnum": {
                "enum": [
                    "scan",
                    "incidents:read",
                    "incidents:write",
                    "incidents:share",
                    "members:read",
                    "members:write",
                    "teams:read",
                    "teams:write",
                    "audit_logs:read",
                    "honeytokens:read",
                    "honeytokens:write",
                    "api_tokens:read",
                    "api_tokens:write"
                ],
                "type": "string"
            },
            "MemberRoleEnum": {
                "enum": [
                    "owner",
                    "manager",
                    "member",
                    "restricted"
                ],
                "type": "string"
            },
            "NonOwnerMemberRoleEnum": {
                "enum": [
                    "manager",
                    "member",
                    "restricted"
                ],
                "type": "string"
            },
            "OccurrenceKindEnum": {
                "enum": [
                    "Realtime",
                    "Historical"
                ],
                "type": "string"
            },
            "PresenceEnum": {
                "enum": [
                    "present",
                    "removed"
                ],
                "type": "string"
            },
            "DetectorGroupTypeEnum": {
                "enum": [
                    "specific",
                    "generic",
                    "custom"
                ],
                "type": "string"
            },
            "ScanStatusEnum": {
                "enum": [
                    "pending",
                    "running",
                    "canceled",
                    "failed",
                    "too_large",
                    "timeout",
                    "finished"
                ],
                "type": "string"
            },
            "SecretStatusEnum": {
                "enum": [
                    "test_credential",
                    "false_positive",
                    "low_risk"
                ],
                "type": "string"
            },
            "SeverityEnum": {
                "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low",
                    "info",
                    "unknown"
                ],
                "type": "string"
            },
            "SeverityEnumIAC": {
                "enum": [
                    "critical",
                    "high",
                    "medium",
                    "low"
                ],
                "type": "string"
            },
            "SourceHealthEnum": {
                "enum": [
                    "safe",
                    "unknown",
                    "at_risk"
                ],
                "type": "string"
            },
            "StatusEnum": {
                "enum": [
                    "IGNORED",
                    "TRIGGERED",
                    "ASSIGNED",
                    "RESOLVED"
                ],
                "type": "string"
            },
            "IACStatusEnum": {
                "enum": [
                    "IGNORED",
                    "TRIGGERED",
                    "RESOLVED"
                ],
                "type": "string"
            },
            "ValidityEnum": {
                "enum": [
                    "valid",
                    "invalid",
                    "failed_to_check",
                    "no_checker",
                    "unknown"
                ],
                "type": "string"
            },
            "TagEnum": {
                "enum": [
                    "DEFAULT_BRANCH",
                    "FROM_HISTORICAL_SCAN",
                    "IGNORED_IN_CHECK_RUN",
                    "PUBLIC",
                    "PUBLICLY_EXPOSED",
                    "PUBLICLY_LEAKED",
                    "REGRESSION",
                    "SENSITIVE_FILE",
                    "TEST_FILE"
                ],
                "type": "string"
            },
            "TagFilterEnum": {
                "enum": [
                    "DEFAULT_BRANCH",
                    "FROM_HISTORICAL_SCAN",
                    "IGNORED_IN_CHECK_RUN",
                    "PUBLIC",
                    "PUBLICLY_EXPOSED",
                    "PUBLICLY_LEAKED",
                    "REGRESSION",
                    "SENSITIVE_FILE",
                    "TEST_FILE",
                    "NONE"
                ]
            },
            "AuditLogActionTypeEnum": {
                "enum": [
                    "READ",
                    "CREATE",
                    "UPDATE",
                    "DELETE",
                    "OTHER"
                ],
                "type": "string"
            },
            "TeamPermissionEnum": {
                "enum": [
                    "can_manage",
                    "cannot_manage"
                ],
                "type": "string"
            },
            "IncidentPermissionEnum": {
                "enum": [
                    "can_view",
                    "can_edit",
                    "full_access"
                ],
                "type": "string"
            },
            "HoneyTokenEventTag": {
                "enum": [
                    "publicly_exposed"
                ],
                "type": "string"
            }
        },
        "responses": {
            "MaintenanceResponse": {
                "description": "API under maintenance",
                "headers": {
                    "X-Maintenance": {
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        },
                        "example": true
                    }
                },
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "API maintenance",
                                "value": {
                                    "detail": "API under scheduled maintenance."
                                }
                            }
                        }
                    }
                }
            },
            "ConflictError": {
                "description": "Data conflict",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Data conflict",
                                "value": {
                                    "detail": "Request conflicts with existing data."
                                }
                            }
                        }
                    }
                }
            },
            "BadRequestError": {
                "description": "Invalid data",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Invalid data",
                                "value": {
                                    "detail": "Invalid data."
                                }
                            }
                        }
                    }
                }
            },
            "UnauthorizedError": {
                "description": "Invalid API key",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Invalid APIKey",
                                "value": {
                                    "detail": "Invalid API key."
                                }
                            }
                        }
                    }
                }
            },
            "PermissionDeniedError": {
                "description": "Permission denied",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Permission denied",
                                "value": {
                                    "detail": "Permission denied."
                                }
                            }
                        }
                    }
                }
            },
            "OverQuotaError": {
                "description": "Quota limit reached",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Quota limit reached.",
                                "value": {
                                    "detail": "Quota limit reached."
                                }
                            }
                        }
                    }
                }
            },
            "ScanningError": {
                "description": "Scanning error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/error"
                        },
                        "examples": {
                            "error": {
                                "summary": "Scan did not succeed.",
                                "value": {
                                    "detail": "Scan did not succeed."
                                }
                            }
                        }
                    }
                }
            }
        },
        "parameters": {
            "incident_id": {
                "name": "incident_id",
                "in": "path",
                "required": true,
                "description": "The id of the incident to retrieve",
                "schema": {
                    "type": "integer"
                }
            },
            "honeytoken_id": {
                "name": "honeytoken_id",
                "in": "path",
                "required": true,
                "description": "The id of the honeytoken to retrieve",
                "schema": {
                    "type": "string",
                    "format": "uuid"
                }
            },
            "invitation_id": {
                "name": "invitation_id",
                "in": "path",
                "required": true,
                "description": "The id of the invitation to retrieve",
                "schema": {
                    "type": "integer"
                }
            },
            "team_id": {
                "name": "team_id",
                "in": "path",
                "required": true,
                "description": "The id of the team",
                "schema": {
                    "type": "integer"
                }
            },
            "member_id": {
                "name": "member_id",
                "in": "path",
                "required": true,
                "description": "The id of the workspace member",
                "schema": {
                    "type": "integer"
                }
            },
            "cursor": {
                "name": "cursor",
                "in": "query",
                "description": "Pagination cursor.",
                "schema": {
                    "type": "string"
                }
            },
            "page": {
                "deprecated": true,
                "name": "page",
                "in": "query",
                "description": "Page number.",
                "schema": {
                    "type": "integer",
                    "minimum": 0,
                    "default": 1
                }
            },
            "per_page": {
                "name": "per_page",
                "in": "query",
                "description": "Number of items to list per page.",
                "schema": {
                    "type": "integer",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 100
                }
            },
            "date_before": {
                "in": "query",
                "name": "date_before",
                "schema": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Entries found before this date.",
                    "example": "2019-08-30T14:15:22Z"
                }
            },
            "date_after": {
                "in": "query",
                "name": "date_after",
                "schema": {
                    "type": "string",
                    "format": "datetime",
                    "description": "Entries found after this date.",
                    "example": "2019-08-22T14:15:22Z"
                }
            }
        },
        "headers": {
            "xPage": {
                "deprecated": true,
                "schema": {
                    "description": "The index of the current page.",
                    "minimum": 1
                }
            },
            "xPerPage": {
                "schema": {
                    "type": "integer",
                    "description": "The number of items per page.",
                    "default": 20,
                    "minimum": 1,
                    "maximum": 100
                }
            },
            "xNextPage": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The index of the next page.",
                    "minimum": 1
                }
            },
            "xPrevPage": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The index of the previous page.",
                    "minimum": 1
                }
            },
            "xTotal": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The total number of items.",
                    "minimum": 1
                }
            },
            "xTotalPages": {
                "deprecated": true,
                "schema": {
                    "type": "integer",
                    "description": "The total number of pages.",
                    "minimum": 1
                }
            }
        },
        "securitySchemes": {
            "APIKey": {
                "description": "Usage: `Token <API Key>` in `Authorization` header.\n",
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "Token <API Key>"
            }
        }
    },
    "security": [
        {
            "APIKey": []
        }
    ]
}
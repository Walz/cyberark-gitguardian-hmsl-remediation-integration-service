{"openapi":"3.1.0","info":{"title":"HasMySecretLeaked API","summary":"Documentation for the API of GitGuardian's [HasMySecretLeaked](https://hasmysecretleaked.com) service.\n\nThis is the same API that is used by the [web interface](https://hasmysecretleaked.com) and [ggshield](https://www.gitguardian.com/ggshield).\n\nThe API is composed of three endpoints, one to easily test the product and two others that allow more complex batch queries.\n\n## Authentication\n\nTo benefit from increased quota when interacting with HasMySecretLeaked, you can perform authenticated calls to the API.\n\n- If you are using `ggshield` to interact with HMSL, the authentication part is transparent for you.\n- If instead you intend to develop your own client to interact with HMSL, you will first need to create a free account on\n  [GitGuardian Platform](https://dashboard.gitguardian.com). You can then get a JWT token from [GitGuardian's platform API](https://api.gitguardian.com/docs#operation/public-jwt-create).\n  This JWT then needs to be included in the headers of your requests to HMSL. See the example below:\n\n```bash\ncurl -H \"Authorization: Bearer ${JWT_TOKEN}\" https://api.hasmysecretleaked.com/v1/prefix/{PREFIX_HERE}\n```\n\n## Protocol\n\n### Overview\n\nWhen checking if a secret is leaked, the secret is not sent in cleartext to the API.\n\nWe use a bucket-based approach with encryption:\n\n1. The user sends a fixed-size prefix of the hash of their secret to the API. The hash is the hexadecimal representation of the secret hashed with Scrypt (n=2048, r=8, p=1) with a pepper (the SHA256 of the string “GitGuardian”).\n2. The API returns one row for each secret stored in the database which hash starts by the input prefix.\n3. The response is encrypted using the hash of the secret as a key.\n4. The API returns encrypted responses plus a hint consisting in a hash of the key.\n5. The end user can now compute this hint, and see if one row of the payload matches.\n6. They then decode the answer with the original hash.\n\n### An end-to-end example\n\nMy secret is `hjshnk5ex5u34565d4654HJKGjhz545d89sjkjak`.\n\n1. We compute the hash as explained above, for example with the following function:\n\n```python\nfrom hashlib import sha256\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\n\ndef compute_hash(secret: str) -> str:\n    \"\"\"Compute the hash of a given secret.\"\"\"\n    pepper = sha256(b\"GitGuardian\").digest()\n    return (\n        Scrypt(salt=pepper, n=2048, r=8, p=1, length=32)\n        .derive(secret.encode(\"utf-8\"))\n        .hex()\n    )\n```\n\n2. I now have `408a5b05c35bb4d230e31da1f9afa0e8881050cb72775e925d6bc7cb945b4f39` as the hash of my secret, so my prefix is `408a5`\n3. I use the `/v1/prefix/{prefix}` endpoint to query HasMySecretLeaked, so I sent a request to `https://api.hasmysecretleaked.com/v1/prefix/408a5`\n4. The response will contain the matches with this prefix, like:\n\n```json\n{\n  \"matches\": [\n    {\n      \"hint\": \"5de9f935ee515de855551e1786d71f1d7f4c3805083f57dc49863ad624f5ba42\",\n      \"payload\": \"gubW5fk1nZF8I4yGVMdcpeZv3CDg5lKE4LTeWDmjD3YkuaMx9c7/HuzIv8T3X2KXAcEWME+wQBiUP0WJQY6dEUNbcvyBpuxl+KGLj7KC3Dxlt8U+Frv4vDnFwWouN3c=\"\n    },\n    {\n      \"hint\": \"df096cd78ff6d840a21d95db852d69c3bb7710945123841fe0cfae88561a32be\",\n      \"payload\": \"sEdfOFMcwEmt2ZNwRL4nuoiTsnHbycdC/OOUPOM0ktZQhQQmG60+Js57T003SP6brRO4EZILO9cWJGAaCWiv21rAgwCt2r6IZn2KodRq0S4RWHajbphRgOvw3j6oPQ==\"\n    }\n  ]\n}\n```\n\n5. I can compute the hint (the sha256 of my hash) of my hash and verify whether it is present in the response. For example in Python:\n\n```python\nfrom hashlib import sha256\n\ndef compute_hint(secret_hash: str) -> str:\n    \"\"\"Make a hint from the given secret hash.\"\"\"\n    return sha256(bytes.fromhex(secret_hash)).hexdigest()\n```\n\nwhich gives me this hint: `5de9f935ee515de855551e1786d71f1d7f4c3805083f57dc49863ad624f5ba42`.\n\n6. In this case, I can see my hint match an hint in the response. I can get more information from the payload, which I can decrypt with my hash using AES-GCM:\n\n```python\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\nimport base64\n\ndef decrypt_payload(payload_str: str, key: str) -> str:\n    \"\"\"Decrypt the payload with the given key.\"\"\"\n    payload = base64.b64decode(payload_str)\n    cleartext = AESGCM(bytes.fromhex(key)).decrypt(\n        nonce=payload[:12], data=payload[12:], associated_data=None\n    )\n    return cleartext.decode()\n```\n\n## Usage\n\nSee below for the documentation for each endpoint.\n\n### Rate-limiting\n\nThe API is rate-limited.\n\nIn every response, you will have the following headers:\n\n- `ratelimit-limit`: the requests quota in the time window\n- `ratelimit-remaining`: the remaining requests quota in the current window\n- `ratelimit-reset`: the time remaining in the current window, specified in seconds\n","version":"1.0.0","x-logo":{"url":"/docs/static/gitguardian_logo.svg","altText":"GitGuardian logo"}},"paths":{"/v1/prefix/{prefix}":{"get":{"tags":["Check a single secret"],"summary":"/v1/prefix/{prefix}","description":"This endpoint allows you to check a single prefix.","operationId":"get_secret_v1_prefix__prefix__get","parameters":[{"required":true,"schema":{"type":"string","pattern":"^[a-f0-9]{5}$","title":"Prefix"},"example":["bf701"],"name":"prefix","in":"path"}],"responses":{"200":{"description":"Successful Response","headers":{"ratelimit-limit":{"description":"The requests quota in the time window","type":"integer"},"ratelimit-remaining":{"description":"The remaining requests quota in the current window","type":"integer"},"ratelimit-reset":{"description":"The time remaining in the current window, specified in seconds","type":"integer"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PrefixesResponse"}}}},"429":{"description":"Rate-limited Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPExceptionDocumentationModel"},"example":{"detail":"You have reached your daily quota of 10 secrets"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/prefixes":{"post":{"tags":["Batch operations"],"summary":"/v1/prefixes","description":"This endpoint allows you to check multiple prefixes in a single call.","operationId":"batch_prefixes_v1_prefixes_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PrefixesQuery"}}},"required":true},"responses":{"200":{"description":"Successful Response","headers":{"ratelimit-limit":{"description":"The requests quota in the time window","type":"integer"},"ratelimit-remaining":{"description":"The remaining requests quota in the current window","type":"integer"},"ratelimit-reset":{"description":"The time remaining in the current window, specified in seconds","type":"integer"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PrefixesResponse"}}}},"429":{"description":"Rate-limited Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPExceptionDocumentationModel"},"example":{"detail":"You have reached your daily quota of 10 secrets"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/v1/hashes":{"post":{"tags":["Batch operations"],"summary":"/v1/hashes","description":"This endpoint allows you to check multiple hashes in a single call.","operationId":"batch_hashes_v1_hashes_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/HashesQuery"}}},"required":true},"responses":{"200":{"description":"Successful Response","headers":{"ratelimit-limit":{"description":"The requests quota in the time window","type":"integer"},"ratelimit-remaining":{"description":"The remaining requests quota in the current window","type":"integer"},"ratelimit-reset":{"description":"The time remaining in the current window, specified in seconds","type":"integer"}},"content":{"application/json":{"schema":{"$ref":"#/components/schemas/HashesResponse"}}}},"429":{"description":"Rate-limited Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPExceptionDocumentationModel"},"example":{"detail":"You have reached your daily quota of 10 secrets"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"APILocation":{"properties":{"u":{"type":"string","title":"U","example":"https://github.com/GitGuardian/sample_secrets/blob/da09702283c7c14d2048eddfb448f19ea6a3da08/bucket_s3.py#L10"}},"type":"object","required":["u"],"title":"APILocation","description":"The location of a secret occurrence."},"EncryptedSecretResponse":{"properties":{"hint":{"type":"string","title":"Hint","description":"The hint of the secret, i.e. the hash of the hash of the secret","example":"6b8c7a2bca64845cd21f18f4756536e398a7765f003612db15b5b525bf564ebf"},"payload":{"type":"string","format":"binary","title":"Payload","description":"The encrypted payload containing information about the secret, encrypted with AES256-GCM with the hash of the secret","example":"7sIDHzXcw1c/py/rRwR15Z7TNV83EavclTnYEl4tNCF5bIYAmR0qlp8nTnb15uhcMylKXzHE+138LgH3owsxz8mUtanKe5MUaYtClU/zO6Z+7TgECfCJfPxRTDx2om/0GFrv"}},"type":"object","required":["hint","payload"],"title":"EncryptedSecretResponse"},"HTTPExceptionDocumentationModel":{"properties":{"detail":{"type":"string","title":"Detail"}},"type":"object","required":["detail"],"title":"HTTPExceptionDocumentationModel","description":"Model in pydantic for FastAPI HTTPException to be used in doc."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"HashesQuery":{"properties":{"hashes":{"items":{"type":"string","pattern":"^[a-f0-9]{64}$"},"type":"array","maxItems":1000,"title":"Hashes","example":["6b8c7a2bca64845cd21f18f4756536e398a7765f003612db15b5b525bf564ebf","bf701c303bc67d27e7b1af115deff16544cf76cec5963bad8e9c8d23d55b7e0e"]}},"additionalProperties":false,"type":"object","title":"HashesQuery"},"HashesResponse":{"properties":{"secrets":{"items":{"$ref":"#/components/schemas/SecretResponse"},"type":"array","title":"Secrets"}},"type":"object","required":["secrets"],"title":"HashesResponse"},"PrefixesQuery":{"properties":{"prefixes":{"items":{"type":"string","pattern":"^[a-f0-9]{5}$"},"type":"array","maxItems":10,"title":"Prefixes","example":["6b8c7","bf701"]}},"additionalProperties":false,"type":"object","title":"PrefixesQuery"},"PrefixesResponse":{"properties":{"matches":{"items":{"$ref":"#/components/schemas/EncryptedSecretResponse"},"type":"array","title":"Matches"}},"type":"object","required":["matches"],"title":"PrefixesResponse"},"SecretResponse":{"properties":{"hash":{"type":"string","title":"Hash","description":"The hash of the secret"},"count":{"type":"integer","title":"Count","description":"Number of occurrences","example":3},"location":{"allOf":[{"$ref":"#/components/schemas/APILocation"}],"title":"Location","description":"Location of the first occurrence recorded for this secret"}},"type":"object","required":["hash","count"],"title":"SecretResponse"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}